shakespear.hs:(13,22)-(17,2): Splicing expression
    "\n\
    \/ HomeR GET\n\
    \/bue BlueR GET\n\
    \/red RedR GET\n"
  ======>
    [Yesod.Routes.TH.Types.ResourceLeaf
       (Yesod.Routes.TH.Types.Resource
          "HomeR"
          []
          (Yesod.Routes.TH.Types.Methods Nothing ["GET"])
          []
          True),
     Yesod.Routes.TH.Types.ResourceLeaf
       (Yesod.Routes.TH.Types.Resource
          "BlueR"
          [Yesod.Routes.TH.Types.Static "bue"]
          (Yesod.Routes.TH.Types.Methods Nothing ["GET"])
          []
          True),
     Yesod.Routes.TH.Types.ResourceLeaf
       (Yesod.Routes.TH.Types.Resource
          "RedR"
          [Yesod.Routes.TH.Types.Static "red"]
          (Yesod.Routes.TH.Types.Methods Nothing ["GET"])
          []
          True)]
shakespear.hs:(13,1)-(17,2): Splicing declarations
    mkYesod
      "Shakespear"
      ([Yesod.Routes.TH.Types.ResourceLeaf
          (Yesod.Routes.TH.Types.Resource
             "HomeR"
             []
             (Yesod.Routes.TH.Types.Methods Nothing ["GET"])
             []
             True),
        Yesod.Routes.TH.Types.ResourceLeaf
          (Yesod.Routes.TH.Types.Resource
             "BlueR"
             [Yesod.Routes.TH.Types.Static "bue"]
             (Yesod.Routes.TH.Types.Methods Nothing ["GET"])
             []
             True),
        Yesod.Routes.TH.Types.ResourceLeaf
          (Yesod.Routes.TH.Types.Resource
             "RedR"
             [Yesod.Routes.TH.Types.Static "red"]
             (Yesod.Routes.TH.Types.Methods Nothing ["GET"])
             []
             True)])
  ======>
    instance ParseRoute Shakespear where
      parseRoute
        = \ f_a8R7 x_a8R8 -> f_a8R7 ghc-prim-0.4.0.0:GHC.Tuple.() x_a8R8 ::
            forall a_a8R9.
            (() -> ([TS.Text], [(TS.Text, TS.Text)]) -> Maybe (Route a_a8R9))
            -> ([TS.Text], [(TS.Text, TS.Text)]) -> Maybe (Route a_a8R9)
          helper_a8R6
        where
            helper_a8R6 env1322_a8QZ req1322_a8R0
              = helper1322_a8R1 (fst req1322_a8R0)
              where
                  helper1322_a8R1 ghc-prim-0.4.0.0:GHC.Types.[]
                    = \ _ _ x_a8R3 _ -> x_a8R3
                        (error "mdsGetHandler") env1322_a8QZ (Just HomeR) req1322_a8R0
                  helper1322_a8R1
                    ((ghc-prim-0.4.0.0:GHC.Types.:) "bue"
                                                    ghc-prim-0.4.0.0:GHC.Types.[])
                    = \ _ _ x_a8R4 _ -> x_a8R4
                        (error "mdsGetHandler") env1322_a8QZ (Just BlueR) req1322_a8R0
                  helper1322_a8R1
                    ((ghc-prim-0.4.0.0:GHC.Types.:) "red"
                                                    ghc-prim-0.4.0.0:GHC.Types.[])
                    = \ _ _ x_a8R5 _ -> x_a8R5
                        (error "mdsGetHandler") env1322_a8QZ (Just RedR) req1322_a8R0
                  helper1322_a8R1 _
                    = \ _ _ x_a8R2 _ -> x_a8R2
                        (error "mds404") env1322_a8QZ Nothing req1322_a8R0
    instance RenderRoute Shakespear where
      data Route Shakespear
        = HomeR | BlueR | RedR
        deriving (Show, Eq, Read)
      renderRoute HomeR = ([], [])
      renderRoute BlueR
        = (((TS.pack "bue") ghc-prim-0.4.0.0:GHC.Types.: []), [])
      renderRoute RedR
        = (((TS.pack "red") ghc-prim-0.4.0.0:GHC.Types.: []), [])
    instance RouteAttrs Shakespear where
      routeAttrs (HomeR {})
        = containers-0.5.6.2:Data.Set.Base.fromList []
      routeAttrs (BlueR {})
        = containers-0.5.6.2:Data.Set.Base.fromList []
      routeAttrs (RedR {}) = containers-0.5.6.2:Data.Set.Base.fromList []
    resourcesShakespear :: [Yesod.Routes.TH.Types.ResourceTree String]
    resourcesShakespear
      = [Yesod.Routes.TH.Types.ResourceLeaf
           (Yesod.Routes.TH.Types.Resource
              "HomeR"
              []
              (Yesod.Routes.TH.Types.Methods Nothing ["GET"])
              []
              True),
         Yesod.Routes.TH.Types.ResourceLeaf
           (Yesod.Routes.TH.Types.Resource
              "BlueR"
              [Yesod.Routes.TH.Types.Static "bue"]
              (Yesod.Routes.TH.Types.Methods Nothing ["GET"])
              []
              True),
         Yesod.Routes.TH.Types.ResourceLeaf
           (Yesod.Routes.TH.Types.Resource
              "RedR"
              [Yesod.Routes.TH.Types.Static "red"]
              (Yesod.Routes.TH.Types.Methods Nothing ["GET"])
              []
              True)]
    type Handler = HandlerT Shakespear IO
    type Widget = WidgetT Shakespear IO ghc-prim-0.4.0.0:GHC.Tuple.()
    instance YesodDispatch Shakespear where
      yesodDispatch env6114_a8QW req6114_a8QX
        = helper6114_a8QY
            (wai-3.0.4.0:Network.Wai.Internal.pathInfo req6114_a8QX)
        where
            helper6114_a8QY ghc-prim-0.4.0.0:GHC.Types.[]
              = case
                    wai-3.0.4.0:Network.Wai.Internal.requestMethod req6114_a8QX
                of {
                  "GET"
                    -> yesodRunner getHomeR env6114_a8QW (Just HomeR) req6114_a8QX
                  _ -> yesodRunner
                         (badMethod >> (return ghc-prim-0.4.0.0:GHC.Tuple.()))
                         env6114_a8QW
                         (Just HomeR)
                         req6114_a8QX }
            helper6114_a8QY
              ((ghc-prim-0.4.0.0:GHC.Types.:) "bue"
                                              ghc-prim-0.4.0.0:GHC.Types.[])
              = case
                    wai-3.0.4.0:Network.Wai.Internal.requestMethod req6114_a8QX
                of {
                  "GET"
                    -> yesodRunner getBlueR env6114_a8QW (Just BlueR) req6114_a8QX
                  _ -> yesodRunner
                         (badMethod >> (return ghc-prim-0.4.0.0:GHC.Tuple.()))
                         env6114_a8QW
                         (Just BlueR)
                         req6114_a8QX }
            helper6114_a8QY
              ((ghc-prim-0.4.0.0:GHC.Types.:) "red"
                                              ghc-prim-0.4.0.0:GHC.Types.[])
              = case
                    wai-3.0.4.0:Network.Wai.Internal.requestMethod req6114_a8QX
                of {
                  "GET" -> yesodRunner getRedR env6114_a8QW (Just RedR) req6114_a8QX
                  _ -> yesodRunner
                         (badMethod >> (return ghc-prim-0.4.0.0:GHC.Tuple.()))
                         env6114_a8QW
                         (Just RedR)
                         req6114_a8QX }
            helper6114_a8QY _
              = yesodRunner
                  (notFound >> (return ghc-prim-0.4.0.0:GHC.Tuple.()))
                  env6114_a8QW
                  Nothing
                  req6114_a8QX
shakespear.hs:23:11-52: Splicing expression
    hamletFile "templates/default-base.hamlet"
  ======>
    \ _render_a8Ts
      -> do { id
                ((blaze-markup-0.7.0.3:Text.Blaze.Internal.preEscapedText
                  . TS.pack)
                   "<!DOCTYPE html>\n\
                   \<html><head><title>");
              id (toHtml (pageTitle pc));
              id
                ((blaze-markup-0.7.0.3:Text.Blaze.Internal.preEscapedText
                  . TS.pack)
                   "</title>\n\
                   \<meta charset=\"utf-8\">\n\
                   \<style>body { font-family: verdana }</style>\n");
              asHtmlUrl (pageHead pc) _render_a8Ts;
              id
                ((blaze-markup-0.7.0.3:Text.Blaze.Internal.preEscapedText
                  . TS.pack)
                   "</head>\n\
                   \<body><article>");
              asHtmlUrl (pageBody pc) _render_a8Ts;
              id
                ((blaze-markup-0.7.0.3:Text.Blaze.Internal.preEscapedText
                  . TS.pack)
                   "</article>\n\
                   \</body>\n\
                   \</html>\n") }
shakespear.hs:30:31-55: Splicing expression
    " <h1>Principal"
  ======>
    (asWidgetT . toWidget)
      ((blaze-markup-0.7.0.3:Text.Blaze.Internal.preEscapedText
        . TS.pack)
         "<h1>Principal</h1>\n")
shakespear.hs:33:24-42: Splicing expression
    " <h1>Red"
  ======>
    (asWidgetT . toWidget)
      ((blaze-markup-0.7.0.3:Text.Blaze.Internal.preEscapedText
        . TS.pack)
         "<h1>Red</h1>\n")
shakespear.hs:36:26-45: Splicing expression
    " <h1>Blue"
  ======>
    (asWidgetT . toWidget)
      ((blaze-markup-0.7.0.3:Text.Blaze.Internal.preEscapedText
        . TS.pack)
         "<h1>Blue</h1>\n")
shakespear.hs:(46,19)-(49,2): Splicing expression
    "\n\
    \    <header>\n\
    \        <h1>Header\n"
  ======>
    \ _render_a8TO
      -> id
           ((blaze-markup-0.7.0.3:Text.Blaze.Internal.preEscapedText
             . TS.pack)
              "<header><h1>Header</h1>\n\
              \</header>\n")
shakespear.hs:(52,17)-(60,2): Splicing expression
    "\n\
    \    <ul>\n\
    \      <li>\n\
    \        <a href=@{HomeR}> Home\n\
    \      <li>\n\
    \        <a href=@{BlueR}> Blue\n\
    \      <li>\n\
    \        <a href=@{RedR}> Red\n"
  ======>
    \ _render_a8TS
      -> do { id
                ((blaze-markup-0.7.0.3:Text.Blaze.Internal.preEscapedText
                  . TS.pack)
                   "<ul><li><a href=\"");
              id (toHtml (\ u_a8TT -> _render_a8TS u_a8TT [] HomeR));
              id
                ((blaze-markup-0.7.0.3:Text.Blaze.Internal.preEscapedText
                  . TS.pack)
                   "\"> Home</a>\n\
                   \</li>\n\
                   \<li><a href=\"");
              id (toHtml (\ u_a8TU -> _render_a8TS u_a8TU [] BlueR));
              id
                ((blaze-markup-0.7.0.3:Text.Blaze.Internal.preEscapedText
                  . TS.pack)
                   "\"> Blue</a>\n\
                   \</li>\n\
                   \<li><a href=\"");
              id (toHtml (\ u_a8TV -> _render_a8TS u_a8TV [] RedR));
              id
                ((blaze-markup-0.7.0.3:Text.Blaze.Internal.preEscapedText
                  . TS.pack)
                   "\"> Red</a>\n\
                   \</li>\n\
                   \</ul>\n") }
shakespear.hs:(64,16)-(68,2): Splicing expression
    "\n\
    \    <footer class=footer>\n\
    \      Footer \n\
    \        <i id=#{ face }>:)        \n"
  ======>
    do { (asWidgetT . toWidget)
           ((blaze-markup-0.7.0.3:Text.Blaze.Internal.preEscapedText
             . TS.pack)
              "<footer class=\"footer\">Footer <i id=\"");
         (asWidgetT . toWidget) (toHtml face);
         (asWidgetT . toWidget)
           ((blaze-markup-0.7.0.3:Text.Blaze.Internal.preEscapedText
             . TS.pack)
              "\">:)        </i>\n\
              \</footer>\n") }
shakespear.hs:71:26-61: Splicing expression
    cassiusFile "templates/home.cassius"
  ======>
    \ _render_a8U8
      -> (shakespeare-2.0.6:Text.Css.CssNoWhitespace . (foldr ($) []))
           [((++)
             $ (map
                  shakespeare-2.0.6:Text.Css.TopBlock
                  (((shakespeare-2.0.6:Text.Css.Block
                       {shakespeare-2.0.6:Text.Css.blockSelector = mconcat
                                                                     [(shakespeare-2.0.6:Text.Css.fromText
                                                                       . shakespeare-2.0.6:Text.Css.pack)
                                                                        "#content"],
                        shakespeare-2.0.6:Text.Css.blockAttrs = (concat
                                                                 $ ([]
                                                                    ghc-prim-0.4.0.0:GHC.Types.:
                                                                      (map
                                                                         shakespeare-2.0.6:Text.Css.mixinAttrs
                                                                         []))),
                        shakespeare-2.0.6:Text.Css.blockBlocks = ghc-prim-0.4.0.0:GHC.Tuple.(),
                        shakespeare-2.0.6:Text.Css.blockMixins = ghc-prim-0.4.0.0:GHC.Tuple.()} ::
                       shakespeare-2.0.6:Text.Css.Block shakespeare-2.0.6:Text.Css.Resolved
                   ghc-prim-0.4.0.0:GHC.Types.:)
                    . ((foldr
                          (.)
                          id
                          [((shakespeare-2.0.6:Text.Css.Block
                               {shakespeare-2.0.6:Text.Css.blockSelector = mconcat
                                                                             [(shakespeare-2.0.6:Text.Css.fromText
                                                                               . shakespeare-2.0.6:Text.Css.pack)
                                                                                "#content",
                                                                              (shakespeare-2.0.6:Text.Css.fromText
                                                                               . shakespeare-2.0.6:Text.Css.pack)
                                                                                " ",
                                                                              (shakespeare-2.0.6:Text.Css.fromText
                                                                               . shakespeare-2.0.6:Text.Css.pack)
                                                                                "h1"],
                                shakespeare-2.0.6:Text.Css.blockAttrs = (concat
                                                                         $ ([shakespeare-2.0.6:Text.Css.Attr
                                                                               (mconcat
                                                                                  [(shakespeare-2.0.6:Text.Css.fromText
                                                                                    . shakespeare-2.0.6:Text.Css.pack)
                                                                                     "background"])
                                                                               (mconcat
                                                                                  [toCss bgColor])]
                                                                            ghc-prim-0.4.0.0:GHC.Types.:
                                                                              (map
                                                                                 shakespeare-2.0.6:Text.Css.mixinAttrs
                                                                                 []))),
                                shakespeare-2.0.6:Text.Css.blockBlocks = ghc-prim-0.4.0.0:GHC.Tuple.(),
                                shakespeare-2.0.6:Text.Css.blockMixins = ghc-prim-0.4.0.0:GHC.Tuple.()} ::
                               shakespeare-2.0.6:Text.Css.Block shakespeare-2.0.6:Text.Css.Resolved
                           ghc-prim-0.4.0.0:GHC.Types.:)
                            . ((foldr (.) id [])
                               . (concatMap shakespeare-2.0.6:Text.Css.mixinBlocks [] ++)))])
                       . (concatMap shakespeare-2.0.6:Text.Css.mixinBlocks [] ++)))
                     [])))]
shakespear.hs:78:25-58: Splicing expression
    luciusFile "templates/home.lucius"
  ======>
    \ _render_a8Ug
      -> (shakespeare-2.0.6:Text.Css.CssNoWhitespace . (foldr ($) []))
           [((++)
             $ (map
                  shakespeare-2.0.6:Text.Css.TopBlock
                  (((shakespeare-2.0.6:Text.Css.Block
                       {shakespeare-2.0.6:Text.Css.blockSelector = mconcat
                                                                     [(shakespeare-2.0.6:Text.Css.fromText
                                                                       . shakespeare-2.0.6:Text.Css.pack)
                                                                        "#content"],
                        shakespeare-2.0.6:Text.Css.blockAttrs = (concat
                                                                 $ ([]
                                                                    ghc-prim-0.4.0.0:GHC.Types.:
                                                                      (map
                                                                         shakespeare-2.0.6:Text.Css.mixinAttrs
                                                                         []))),
                        shakespeare-2.0.6:Text.Css.blockBlocks = ghc-prim-0.4.0.0:GHC.Tuple.(),
                        shakespeare-2.0.6:Text.Css.blockMixins = ghc-prim-0.4.0.0:GHC.Tuple.()} ::
                       shakespeare-2.0.6:Text.Css.Block shakespeare-2.0.6:Text.Css.Resolved
                   ghc-prim-0.4.0.0:GHC.Types.:)
                    . ((foldr
                          (.)
                          id
                          [((shakespeare-2.0.6:Text.Css.Block
                               {shakespeare-2.0.6:Text.Css.blockSelector = mconcat
                                                                             [(shakespeare-2.0.6:Text.Css.fromText
                                                                               . shakespeare-2.0.6:Text.Css.pack)
                                                                                "#content",
                                                                              (shakespeare-2.0.6:Text.Css.fromText
                                                                               . shakespeare-2.0.6:Text.Css.pack)
                                                                                " ",
                                                                              (shakespeare-2.0.6:Text.Css.fromText
                                                                               . shakespeare-2.0.6:Text.Css.pack)
                                                                                "h2"],
                                shakespeare-2.0.6:Text.Css.blockAttrs = (concat
                                                                         $ ([shakespeare-2.0.6:Text.Css.Attr
                                                                               (mconcat
                                                                                  [(shakespeare-2.0.6:Text.Css.fromText
                                                                                    . shakespeare-2.0.6:Text.Css.pack)
                                                                                     "text-align"])
                                                                               (mconcat
                                                                                  [(shakespeare-2.0.6:Text.Css.fromText
                                                                                    . shakespeare-2.0.6:Text.Css.pack)
                                                                                     "center"]),
                                                                             shakespeare-2.0.6:Text.Css.Attr
                                                                               (mconcat
                                                                                  [(shakespeare-2.0.6:Text.Css.fromText
                                                                                    . shakespeare-2.0.6:Text.Css.pack)
                                                                                     "color"])
                                                                               (mconcat
                                                                                  [(shakespeare-2.0.6:Text.Css.fromText
                                                                                    . shakespeare-2.0.6:Text.Css.pack)
                                                                                     "#FF0",
                                                                                   (shakespeare-2.0.6:Text.Css.fromText
                                                                                    . shakespeare-2.0.6:Text.Css.pack)
                                                                                     "\n\
                                                                                     \    "])]
                                                                            ghc-prim-0.4.0.0:GHC.Types.:
                                                                              (map
                                                                                 shakespeare-2.0.6:Text.Css.mixinAttrs
                                                                                 []))),
                                shakespeare-2.0.6:Text.Css.blockBlocks = ghc-prim-0.4.0.0:GHC.Tuple.(),
                                shakespeare-2.0.6:Text.Css.blockMixins = ghc-prim-0.4.0.0:GHC.Tuple.()} ::
                               shakespeare-2.0.6:Text.Css.Block shakespeare-2.0.6:Text.Css.Resolved
                           ghc-prim-0.4.0.0:GHC.Types.:)
                            . ((foldr (.) id [])
                               . (concatMap shakespeare-2.0.6:Text.Css.mixinBlocks [] ++))),
                           ((shakespeare-2.0.6:Text.Css.Block
                               {shakespeare-2.0.6:Text.Css.blockSelector = mconcat
                                                                             [(shakespeare-2.0.6:Text.Css.fromText
                                                                               . shakespeare-2.0.6:Text.Css.pack)
                                                                                "#content",
                                                                              (shakespeare-2.0.6:Text.Css.fromText
                                                                               . shakespeare-2.0.6:Text.Css.pack)
                                                                                " ",
                                                                              (shakespeare-2.0.6:Text.Css.fromText
                                                                               . shakespeare-2.0.6:Text.Css.pack)
                                                                                "> ::first-letter"],
                                shakespeare-2.0.6:Text.Css.blockAttrs = (concat
                                                                         $ ([shakespeare-2.0.6:Text.Css.Attr
                                                                               (mconcat
                                                                                  [(shakespeare-2.0.6:Text.Css.fromText
                                                                                    . shakespeare-2.0.6:Text.Css.pack)
                                                                                     "font-weight"])
                                                                               (mconcat
                                                                                  [(shakespeare-2.0.6:Text.Css.fromText
                                                                                    . shakespeare-2.0.6:Text.Css.pack)
                                                                                     "800"])]
                                                                            ghc-prim-0.4.0.0:GHC.Types.:
                                                                              (map
                                                                                 shakespeare-2.0.6:Text.Css.mixinAttrs
                                                                                 []))),
                                shakespeare-2.0.6:Text.Css.blockBlocks = ghc-prim-0.4.0.0:GHC.Tuple.(),
                                shakespeare-2.0.6:Text.Css.blockMixins = ghc-prim-0.4.0.0:GHC.Tuple.()} ::
                               shakespeare-2.0.6:Text.Css.Block shakespeare-2.0.6:Text.Css.Resolved
                           ghc-prim-0.4.0.0:GHC.Types.:)
                            . ((foldr (.) id [])
                               . (concatMap shakespeare-2.0.6:Text.Css.mixinBlocks [] ++)))])
                       . (concatMap shakespeare-2.0.6:Text.Css.mixinBlocks [] ++)))
                     [])))]
shakespear.hs:81:29-62: Splicing expression
    juliusFile "templates/home.julius"
  ======>
    asJavascriptUrl
      (\ _render_a8Uo
         -> Javascript
              ((Data.Text.Internal.Builder.fromText . Text.Shakespeare.pack')
                 "onload = function(){\n\
                 \    var footer = document.querySelector(\"footer > i \");\n\
                 \    setInterval(function(){ \n\
                 \            var x = (new Date).getTime() % 2;\n\
                 \            var face  = \";)\";\n\
                 \            if( x )\n\
                 \                face = \":)\";\n\
                 \\n\
                 \            footer.innerText= face; \n\
                 \\n\
                 \        }, 199)\n\
                 \}"))
