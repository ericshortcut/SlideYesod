
==================== FINAL INTERFACE ====================
2016-01-25 13:31:50.745529 UTC

interface main@main:Main [family instance module] 7102
  interface hash: 6940969ddf386e71f0adaf192b63d0a0
  ABI hash: 3ba44282c898102c4f7b8ab9f108706d
  export-list hash: bb2d7d0160d60cd41458b922347a10c6
  orphan hash: 5153c71455624fdf1a24a6877b0f73ad
  flag hash: cfbec98d998f52dbdec42754cca6aa3e
  sig of: Nothing
  used TH splices: True
  where
exports:
  Main.main
module dependencies:
package dependencies: aeson-extra-0.2.1.0@aeson_00CInI6mf4E0IaIIvTXCtY
                      aeson-0.8.0.2@aeson_EuKT6VLihZ5IOeoLWhB2pn
                      ansi-terminal-0.6.2.3@ansit_KW0LUY2zB7JCYzE4ZYrwBg
                      appar-0.1.4@appar_3CaAIJvwfNLEy6bEqQYYYc
                      array-0.5.1.0@array_E0sTtauuKsGDLZoT7lTbgZ
                      attoparsec-0.12.1.6@attop_DspwQCeZhqd768dqqECCEZ
                      auto-update-0.1.2.2@autou_2DkwjWlXXrh60SbDElbu3f base-4.8.1.0
                      base64-bytestring-1.0.0.1@base6_5ombtuUXex39dVe2nth8cH
                      binary-0.7.5.0@binar_IvYoLp9H6Xy3zEH13MmZwd
                      blaze-html-0.8.1.1@blaze_1zXVsYxJvNk7KmCYUCIuBj
                      blaze-builder-0.4.0.1@blaze_6BKEupqZliOD9r4rLG9ckJ
                      blaze-markup-0.7.0.3@blaze_FhrnjaI7C1I5CvgGhchX3R
                      byteable-0.1.1@bytea_F2pcQljAfpbDG2panTEyo8
                      byteorder-1.0.4@byteo_7FRRspR69KU9KubkPZfm74
                      bytestring-0.10.6.0@bytes_6elQVSg5cWdFrvRnfxTUrH
                      case-insensitive-1.2.0.5@casei_9NseolisKnP80bb65s7rJ9
                      cereal-0.4.1.1@cerea_LMaR4P6lFvNJtmY00msKYH
                      cipher-aes-0.2.11@ciphe_2ERQ1dIZixg9tWYPK06AUH
                      clientsession-0.9.1.1@clien_5kRtaeg6cgn8JeDlqKk4C7
                      conduit-1.2.5@condu_9wHaNJrxyyq9dFXfK2u9W6
                      conduit-extra-1.1.9.1@condu_KwDFYvfqb3oCPEpqLs5RdA
                      containers-0.5.6.2@conta_LKCPrTJwOTOLk4OU37YmeN
                      cookie-0.4.1.6@cooki_FJHZaRHUUOJ8okSoq5Xh3V
                      cprng-aes-0.6.1@cprng_HBEG6jjDgoo5szNfzj66ME
                      crypto-cipher-types-0.0.9@crypt_7fh37Ly4VLPKhwwe0j0lXN
                      crypto-random-0.0.9@crypt_8HBxDhEOmiZBYlqNPLXEOa
                      crypto-api-0.13.2@crypt_A5WnkM78khp1E9HeFIfO7N
                      css-text-0.1.2.1@csste_AsOgpu0oUhUIxaI5X2qjxb
                      data-default-instances-containers-0.0.1@datad_2eq6fuwf8Tk14CtKGZXhB5
                      data-default-0.5.3@datad_5ESg1VNmkW3BMxo7EwKQrK
                      data-default-instances-base-0.0.1@datad_6bNp7ygtVUW3TbxeJU4Irf
                      data-default-class-0.0.1@datad_CgDdtafiXY68XlqDb5IqXw
                      data-default-instances-old-locale-0.0.1@datad_D3fIWe3ExBN6VISnKTEJV3
                      data-default-instances-dlist-0.0.1@datad_EXwD6nMCvj82LJzl8Xo6bb
                      deepseq-1.4.1.1@deeps_LbCWUlehDDeLxurARKDH5o
                      directory-1.2.2.0@direc_KowvXytSqazBcvN7MGpFtg
                      dlist-0.7.1.2@dlist_7AixcwRWCwX32HiPCcE7zz
                      easy-file-0.2.1@easyf_FJwrEwDWX67AIqrB5x3TwS
                      email-validate-2.1.3@email_KNOM4iwrKWXFb5Ec8otrSn
                      entropy-0.3.7@entro_BTeyFmIz5b6F1k5rgnvcgO
                      exceptions-0.8.0.2@excep_8GsEeHgaIks3pVGk6GaELJ
                      fast-logger-2.4.1@fastl_5obpil597KwB2V9Hv2ZA9d
                      filepath-1.4.0.0@filep_KsGE6pHE5eZHSN90ZVax6A ghc-prim-0.4.0.0
                      hashable-1.2.3.3@hasha_2GTZqecVp8NJZrNuKzGxfy
                      http2-1.0.4@http2_4sQuZ3WKGKmBNVNDFbJPRm
                      http-date-0.0.6.1@httpd_2tf3nTFlI2kLGHPgsNfz1u
                      http-types-0.8.6@httpt_C5IeULANR3XGcPcpozwQ7D integer-gmp-1.0.0.0
                      iproute-1.5.0@iprou_B0SP369TCng5d8Pd7LByY9
                      lifted-base-0.2.3.6@lifte_K3cQFA6mRg85rpDaA9numU
                      memory-0.7@memor_ByKf2PUnWbr6V2Z5gsXbfn
                      mmorph-1.0.4@mmorp_8dNpUU8QFPe77rrwKAb20b
                      monad-control-1.0.0.4@monad_3XCDr1mqlERGZgaxuwJF6b
                      monad-loops-0.4.3@monad_EQoySqNZ2bd85KCgzAOO4M
                      monad-logger-0.3.14@monad_LPwgDi9JpFEGNVRYbWvREh
                      mtl-2.2.1@mtl_KMpng31YRYc5JfMWFZ3FCU
                      mwc-random-0.13.3.2@mwcra_0iGmPos4Pta2ISXJLjBtd8
                      network-2.6.2.1@netwo_F6mK9sCIw3M5SbZMt2lUQE
                      network-uri-2.6.0.3@netwo_LFMzacKIfjmC6gRt5N3aSz
                      old-locale-1.0.0.7@oldlo_D6X1KPq5Sui5XjrHMwvFwK
                      old-time-1.1.0.3@oldti_FBWJJDS5FKr7UKFScBcUW2
                      parsec-3.1.9@parse_8fSmqig53hOL2SEu1k9Tv0
                      path-pieces-0.2.0@pathp_J0g0J8bkzER1Juj01TEf96
                      persistent-template-2.1.3.7@persi_BE4iTuqhVssDaBQ4Lj3JRN
                      persistent-2.2.1@persi_JtP9Zc16gv25fMrQ82pQ72
                      pretty-1.1.2.0@prett_7UQTOB05U7lIYPkFOVraeR
                      primitive-0.6.1.0@primi_5Jnw7oEuYtM9dmKXelGXVb
                      process-1.2.3.0@proce_FLTz0SLwyG6LJUpZ52HjkU
                      random-1.1@rando_1z8Ujelqc6aKgvPnbRUKkP
                      resource-pool-0.2.3.2@resou_07WWhNMBPs8Ihbjf6mIyPw
                      resourcet-1.1.6@resou_Ic1TzDDmqYbFNHpzRsDmfS
                      safe-0.3.9@safe_BXSoeRP9IFG6t9s3abNgVi
                      scientific-0.3.4.2@scien_4y53jPjKCJD6UICjmI9WaH
                      securemem-0.1.9@secur_IVsZrOqGXes1eaVFfLeM4x
                      semigroups-0.16.2.2@semig_509rjK42Yeb8JAwFst5KmO
                      shakespeare-2.0.6@shake_H6AYCzksHF8LdCuHfpTccR
                      silently-1.2.5@silen_8uJ39lhRp4MCX1bkpH7HLp
                      simple-sendfile-0.2.21@simpl_8JinxnD07KP3TRgmAVYt64
                      skein-1.0.9.3@skein_IvDavUTFfZ4JYOyVidCzES
                      stm-2.4.4@stm_C1kFMnPqFjvDhFjgMZGUpr
                      stm-chans-3.0.0.4@stmch_7j9sHjGqeHj8Gs1cUILhfw
                      streaming-commons-0.1.14.2@strea_6MWdbeujUEQEUDv55904UY
                      stringsearch-0.3.6.6@strin_LD3tXxltwdY99HXR2kj3px
                      tagged-0.8.1@tagge_6Tf46oJAk552xT73wGffBW
                      tagsoup-0.13.3@tagso_ImwiOxTXDQzEs0zEAu9cq0
                      template-haskell-2.10.0.0 text-1.2.1.3@text_1l1AN4I48k37RaQ6fm6CEh
                      time-1.5.0.1@time_AXTdBF9VRQoBOqJT6qtmVH
                      transformers-0.4.2.0@trans_3eG64VdP2vzGjP6wJiCp5X
                      transformers-base-0.4.4@trans_88TAFm21vtn2NrYUppy50c
                      unix-2.7.1.0@unix_A3WgcI5QiHK4PDo4jSYdwQ
                      unix-compat-0.4.1.4@unixc_DeAF5HEzYMu4CPLnbGbHUz
                      unix-time-0.3.5@unixt_AvHwgK1Y2i0DqLqnUno9kP
                      unordered-containers-0.2.5.1@unord_7E41cj9RvqSJeZ4jSnbs1a
                      utf8-string-1.0.1.1@utf8s_HWC8Qen5AZrArJxFQJuE72
                      vault-0.3.0.4@vault_0ClHfttEXGC8o1TYTuenH0
                      vector-0.10.12.3@vecto_JrQt7SYKOQF2foH4Ugm8MQ
                      wai-3.0.4.0@wai_IMYA1U3SnZGIWgxCNGPKnn
                      wai-extra-3.0.11.1@waiex_DRiEtVdiqX6GApgqFvzluj
                      wai-logger-2.2.4.1@wailo_KKSGrktapgYCYkxiEFCnmo
                      warp-3.1.3.1@warp_I7pHmGTMFaeLd7lvMlKc8E
                      word8-0.1.2@word8_JFinUbIMmjfAdy4qiZBFBe
                      xss-sanitize-0.3.5.6@xsssa_AIAsTAGdhaXAYbcEpBnab3
                      yesod-1.4.2@yesod_0krXskZHAATK3cepIsBazA
                      yesod-core-1.4.15.1@yesod_2xcmm3Dke2U0MaCJoF2RTB
                      yesod-persistent-1.4.0.3@yesod_6L7MY9qQZX4EEG9c1phr5X
                      yesod-form-1.4.4.1@yesod_B1lLuvFFBKK5hsUoEwFYh4
                      zlib-0.5.4.2@zlib_7EfFFsXSCF6JCVS3xlYBS8
orphans: aeson-0.8.0.2@aeson_EuKT6VLihZ5IOeoLWhB2pn:Data.Aeson.Types.Generic
         aeson-0.8.0.2@aeson_EuKT6VLihZ5IOeoLWhB2pn:Data.Aeson.Types.Instances
         attoparsec-0.12.1.6@attop_DspwQCeZhqd768dqqECCEZ:Data.Attoparsec.ByteString.Char8
         attoparsec-0.12.1.6@attop_DspwQCeZhqd768dqqECCEZ:Data.Attoparsec.Text.Internal
         base-4.8.1.0:GHC.Base base-4.8.1.0:GHC.Float
         binary-0.7.5.0@binar_IvYoLp9H6Xy3zEH13MmZwd:Data.Binary.Generic
         bytestring-0.10.6.0@bytes_6elQVSg5cWdFrvRnfxTUrH:Data.ByteString.Builder
         conduit-1.2.5@condu_9wHaNJrxyyq9dFXfK2u9W6:Data.Conduit.List
         crypto-api-0.13.2@crypt_A5WnkM78khp1E9HeFIfO7N:Crypto.Classes
         data-default-instances-containers-0.0.1@datad_2eq6fuwf8Tk14CtKGZXhB5:Data.Default.Instances.Containers
         data-default-instances-base-0.0.1@datad_6bNp7ygtVUW3TbxeJU4Irf:Data.Default.Instances.Base
         data-default-instances-old-locale-0.0.1@datad_D3fIWe3ExBN6VISnKTEJV3:Data.Default.Instances.OldLocale
         data-default-instances-dlist-0.0.1@datad_EXwD6nMCvj82LJzl8Xo6bb:Data.Default.Instances.DList
         hashable-1.2.3.3@hasha_2GTZqecVp8NJZrNuKzGxfy:Data.Hashable.Generic
         network-2.6.2.1@netwo_F6mK9sCIw3M5SbZMt2lUQE:Network.Socket
         network-2.6.2.1@netwo_F6mK9sCIw3M5SbZMt2lUQE:Network.Socket.Types
         persistent-template-2.1.3.7@persi_BE4iTuqhVssDaBQ4Lj3JRN:Database.Persist.TH
         persistent-2.2.1@persi_JtP9Zc16gv25fMrQ82pQ72:Database.Persist.Sql.Orphan.PersistQuery
         persistent-2.2.1@persi_JtP9Zc16gv25fMrQ82pQ72:Database.Persist.Sql.Orphan.PersistStore
         persistent-2.2.1@persi_JtP9Zc16gv25fMrQ82pQ72:Database.Persist.Sql.Orphan.PersistUnique
         stm-2.4.4@stm_C1kFMnPqFjvDhFjgMZGUpr:Control.Monad.STM
         text-1.2.1.3@text_1l1AN4I48k37RaQ6fm6CEh:Data.Text
         text-1.2.1.3@text_1l1AN4I48k37RaQ6fm6CEh:Data.Text.Lazy
         text-1.2.1.3@text_1l1AN4I48k37RaQ6fm6CEh:Data.Text.Show
         time-1.5.0.1@time_AXTdBF9VRQoBOqJT6qtmVH:Data.Time.Calendar.Gregorian
         time-1.5.0.1@time_AXTdBF9VRQoBOqJT6qtmVH:Data.Time.Format.Parse
         time-1.5.0.1@time_AXTdBF9VRQoBOqJT6qtmVH:Data.Time.LocalTime.LocalTime
         transformers-0.4.2.0@trans_3eG64VdP2vzGjP6wJiCp5X:Control.Monad.Trans.Error
         unix-time-0.3.5@unixt_AvHwgK1Y2i0DqLqnUno9kP:Data.UnixTime.Diff
         vector-0.10.12.3@vecto_JrQt7SYKOQF2foH4Ugm8MQ:Data.Vector.Fusion.Stream
         vector-0.10.12.3@vecto_JrQt7SYKOQF2foH4Ugm8MQ:Data.Vector.Unboxed
family instance modules: attoparsec-0.12.1.6@attop_DspwQCeZhqd768dqqECCEZ:Data.Attoparsec.Internal.Types
                         base-4.8.1.0:Control.Applicative base-4.8.1.0:Data.Either
                         base-4.8.1.0:Data.Functor.Identity base-4.8.1.0:Data.Monoid
                         base-4.8.1.0:Data.Type.Equality base-4.8.1.0:Data.Void
                         base-4.8.1.0:GHC.Exts base-4.8.1.0:GHC.Generics
                         containers-0.5.6.2@conta_LKCPrTJwOTOLk4OU37YmeN:Data.IntMap.Base
                         containers-0.5.6.2@conta_LKCPrTJwOTOLk4OU37YmeN:Data.IntSet.Base
                         containers-0.5.6.2@conta_LKCPrTJwOTOLk4OU37YmeN:Data.Map.Base
                         containers-0.5.6.2@conta_LKCPrTJwOTOLk4OU37YmeN:Data.Sequence
                         containers-0.5.6.2@conta_LKCPrTJwOTOLk4OU37YmeN:Data.Set.Base
                         dlist-0.7.1.2@dlist_7AixcwRWCwX32HiPCcE7zz:Data.DList
                         email-validate-2.1.3@email_KNOM4iwrKWXFb5Ec8otrSn:Text.Email.Parser
                         iproute-1.5.0@iprou_B0SP369TCng5d8Pd7LByY9:Data.IP.Addr
                         iproute-1.5.0@iprou_B0SP369TCng5d8Pd7LByY9:Data.IP.Range
                         monad-control-1.0.0.4@monad_3XCDr1mqlERGZgaxuwJF6b:Control.Monad.Trans.Control
                         monad-logger-0.3.14@monad_LPwgDi9JpFEGNVRYbWvREh:Control.Monad.Logger
                         mwc-random-0.13.3.2@mwcra_0iGmPos4Pta2ISXJLjBtd8:System.Random.MWC
                         network-uri-2.6.0.3@netwo_LFMzacKIfjmC6gRt5N3aSz:Network.URI
                         persistent-2.2.1@persi_JtP9Zc16gv25fMrQ82pQ72:Database.Persist.Class.PersistConfig
                         persistent-2.2.1@persi_JtP9Zc16gv25fMrQ82pQ72:Database.Persist.Sql.Orphan.PersistStore
                         pretty-1.1.2.0@prett_7UQTOB05U7lIYPkFOVraeR:Text.PrettyPrint.HughesPJ
                         primitive-0.6.1.0@primi_5Jnw7oEuYtM9dmKXelGXVb:Control.Monad.Primitive
                         resourcet-1.1.6@resou_Ic1TzDDmqYbFNHpzRsDmfS:Control.Monad.Trans.Resource.Internal
                         semigroups-0.16.2.2@semig_509rjK42Yeb8JAwFst5KmO:Data.List.NonEmpty
                         semigroups-0.16.2.2@semig_509rjK42Yeb8JAwFst5KmO:Data.Semigroup
                         shakespeare-2.0.6@shake_H6AYCzksHF8LdCuHfpTccR:Text.Css
                         shakespeare-2.0.6@shake_H6AYCzksHF8LdCuHfpTccR:Text.Shakespeare
                         tagged-0.8.1@tagge_6Tf46oJAk552xT73wGffBW:Data.Tagged
                         template-haskell-2.10.0.0:Language.Haskell.TH.Syntax
                         text-1.2.1.3@text_1l1AN4I48k37RaQ6fm6CEh:Data.Text
                         text-1.2.1.3@text_1l1AN4I48k37RaQ6fm6CEh:Data.Text.Lazy
                         unordered-containers-0.2.5.1@unord_7E41cj9RvqSJeZ4jSnbs1a:Data.HashMap.Base
                         unordered-containers-0.2.5.1@unord_7E41cj9RvqSJeZ4jSnbs1a:Data.HashSet
                         vector-0.10.12.3@vecto_JrQt7SYKOQF2foH4Ugm8MQ:Data.Vector
                         vector-0.10.12.3@vecto_JrQt7SYKOQF2foH4Ugm8MQ:Data.Vector.Primitive
                         vector-0.10.12.3@vecto_JrQt7SYKOQF2foH4Ugm8MQ:Data.Vector.Storable
                         vector-0.10.12.3@vecto_JrQt7SYKOQF2foH4Ugm8MQ:Data.Vector.Unboxed
                         vector-0.10.12.3@vecto_JrQt7SYKOQF2foH4Ugm8MQ:Data.Vector.Unboxed.Base
                         yesod-core-1.4.15.1@yesod_2xcmm3Dke2U0MaCJoF2RTB:Yesod.Core.Class.Handler
                         yesod-core-1.4.15.1@yesod_2xcmm3Dke2U0MaCJoF2RTB:Yesod.Core.Internal.LiteApp
                         yesod-core-1.4.15.1@yesod_2xcmm3Dke2U0MaCJoF2RTB:Yesod.Core.Types
import  -/  base-4.8.1.0:Data.Tuple 012ad951a59a9d85fe1de36a2f012986
import  -/  base-4.8.1.0:GHC.Base 1db77db5dae73d8c424c85b09fbadb89
import  -/  base-4.8.1.0:GHC.Read cfaa50b414b9b02ef6fe4fe5600d9b95
import  -/  base-4.8.1.0:GHC.Show b8c65ca3124f92a166c9f05120382442
import  -/  base-4.8.1.0:Prelude 518f762991bc287d78f21a73c974da1f
import  -/  base-4.8.1.0:Text.Read.Lex 1ec4c08d49d1d5264b910cc76b6c6fde
import  -/  blaze-html-0.8.1.1@blaze_1zXVsYxJvNk7KmCYUCIuBj:Text.Blaze.Html 20338b6845796ca3cfb0923f118f214b
import  -/  blaze-markup-0.7.0.3@blaze_FhrnjaI7C1I5CvgGhchX3R:Text.Blaze.Internal 9b5aa510dbcc59fd42b33d76138a58d1
import  -/  containers-0.5.6.2@conta_LKCPrTJwOTOLk4OU37YmeN:Data.Set.Base c7b7d74b8d8362cfd63af801b9be5c84
import  -/  ghc-prim-0.4.0.0:GHC.Classes e1f4ff80f7b5262008a595d29986fb18
import  -/  ghc-prim-0.4.0.0:GHC.Types 6b27fb3fdbd0e3f0925a4496c66513bb
import  -/  text-1.2.1.3@text_1l1AN4I48k37RaQ6fm6CEh:Data.Text e74c40da976ee643cb7d3cc6a9b83643
import  -/  text-1.2.1.3@text_1l1AN4I48k37RaQ6fm6CEh:Data.Text.Internal 9aaf446b91649c416d85a19f08d51f8e
import  -/  wai-3.0.4.0@wai_IMYA1U3SnZGIWgxCNGPKnn:Network.Wai.Internal 7e3b9d08a481a59ed8105c7ca355603c
import  -/  yesod-1.4.2@yesod_0krXskZHAATK3cepIsBazA:Yesod d0392ef041d2283e6ce220a4044045b7
import  -/  yesod-core-1.4.15.1@yesod_2xcmm3Dke2U0MaCJoF2RTB:Yesod.Core.Class.Dispatch 8b208963eca3a091e1c15667605e7229
import  -/  yesod-core-1.4.15.1@yesod_2xcmm3Dke2U0MaCJoF2RTB:Yesod.Core.Class.Yesod 71eef9371db7db4d30686217c4737b61
import  -/  yesod-core-1.4.15.1@yesod_2xcmm3Dke2U0MaCJoF2RTB:Yesod.Core.Dispatch 17e0a96e25021d9e42063511496acbf4
import  -/  yesod-core-1.4.15.1@yesod_2xcmm3Dke2U0MaCJoF2RTB:Yesod.Core.Handler bd4935b53d3496c14b67ee9c0fa08711
import  -/  yesod-core-1.4.15.1@yesod_2xcmm3Dke2U0MaCJoF2RTB:Yesod.Core.Internal.Run c38ecc4b2079c7934f303ed50aae4e6e
import  -/  yesod-core-1.4.15.1@yesod_2xcmm3Dke2U0MaCJoF2RTB:Yesod.Core.Internal.TH 73fb2c5559d4c738ee5a1eef6ee90c3d
import  -/  yesod-core-1.4.15.1@yesod_2xcmm3Dke2U0MaCJoF2RTB:Yesod.Core.Types 13c633dda1a712aa0394b9d7f4849bc5
import  -/  yesod-core-1.4.15.1@yesod_2xcmm3Dke2U0MaCJoF2RTB:Yesod.Core.Widget 65346ae2748ddb523109bca98c71dc5c
import  -/  yesod-core-1.4.15.1@yesod_2xcmm3Dke2U0MaCJoF2RTB:Yesod.Routes.Class ccd3450fc309ab0870ff9d72f473ec6b
import  -/  yesod-core-1.4.15.1@yesod_2xcmm3Dke2U0MaCJoF2RTB:Yesod.Routes.TH.Types cea4e821fb4df8fbf9cdd7085e9c4419
d081b443fa2131606923e6b73cdbd8ff
  $fEqRoute ::
    GHC.Classes.Eq (Yesod.Routes.Class.Route Main.OlaMundo)
  DFunId[0]
  {- HasNoCafRefs, Strictness: m, Inline: [ALWAYS] CONLIKE,
     Unfolding: DFun:.
                  @ (Yesod.Routes.Class.Route Main.OlaMundo)
                  Main.$fEqRoute_$c==
                  Main.$fEqRoute_$c/= -}
d081b443fa2131606923e6b73cdbd8ff
  $fEqRoute_$c/= ::
    Yesod.Routes.Class.Route Main.OlaMundo
    -> Yesod.Routes.Class.Route Main.OlaMundo -> GHC.Types.Bool
  {- Arity: 2, HasNoCafRefs, Strictness: <S,1*U><S,1*U>,
     Unfolding: InlineRule (2, True, False)
                (\ a53 :: Yesod.Routes.Class.Route Main.OlaMundo
                   b :: Yesod.Routes.Class.Route Main.OlaMundo ->
                 case a53 of tpl { DEFAULT ->
                 case b of tpl1 { DEFAULT -> GHC.Types.False } }) -}
d081b443fa2131606923e6b73cdbd8ff
  $fEqRoute_$c== ::
    Yesod.Routes.Class.Route Main.OlaMundo
    -> Yesod.Routes.Class.Route Main.OlaMundo -> GHC.Types.Bool
  {- Arity: 2, HasNoCafRefs, Strictness: <S,1*U><S,1*U>,
     Unfolding: InlineRule (2, True, False)
                (\ ds :: Yesod.Routes.Class.Route Main.OlaMundo
                   ds1 :: Yesod.Routes.Class.Route Main.OlaMundo ->
                 case ds of tpl { DEFAULT ->
                 case ds1 of tpl1 { DEFAULT -> GHC.Types.True } }) -}
d081b443fa2131606923e6b73cdbd8ff
  $fParseRouteOlaMundo :: Yesod.Routes.Class.ParseRoute Main.OlaMundo
  DFunId[0]
  {- HasNoCafRefs, Strictness: m, Inline: [ALWAYS] CONLIKE,
     Unfolding: DFun:.
                  @ Main.OlaMundo
                  Main.$fRenderRouteOlaMundo
                  Main.$fParseRouteOlaMundo_$cparseRoute -}
d081b443fa2131606923e6b73cdbd8ff
  $fParseRouteOlaMundo1 ::
    GHC.Base.Maybe (Yesod.Routes.Class.Route Main.OlaMundo)
  {- HasNoCafRefs, Strictness: m2,
     Unfolding: (GHC.Base.Just
                   @ (Yesod.Routes.Class.Route Main.OlaMundo)
                   Main.HomeR `cast` (Sub (Sym (Main.TFCo:R:RouteOlaMundo[0])))) -}
d081b443fa2131606923e6b73cdbd8ff
  $fParseRouteOlaMundo_$cparseRoute ::
    ([Data.Text.Internal.Text],
     [(Data.Text.Internal.Text, Data.Text.Internal.Text)])
    -> GHC.Base.Maybe (Yesod.Routes.Class.Route Main.OlaMundo)
  {- Arity: 1, HasNoCafRefs, Strictness: <S(SL),1*U(1*U,A)>,
     Unfolding: InlineRule (1, True, False)
                (\ x1 :: ([Data.Text.Internal.Text],
                          [(Data.Text.Internal.Text, Data.Text.Internal.Text)]) ->
                 case x1 of wild { (,) x2 ds1 ->
                 case x2 of wild1 {
                   [] -> Main.$fParseRouteOlaMundo1
                   : ipv ipv1
                   -> GHC.Base.Nothing
                        @ (Yesod.Routes.Class.Route Main.OlaMundo) } }) -}
d081b443fa2131606923e6b73cdbd8ff
  $fReadRoute ::
    GHC.Read.Read (Yesod.Routes.Class.Route Main.OlaMundo)
  DFunId[0]
  {- Strictness: m, Inline: [ALWAYS] CONLIKE,
     Unfolding: DFun:.
                  @ (Yesod.Routes.Class.Route Main.OlaMundo)
                  Main.$fReadRoute_$s$dmreadsPrec
                  Main.$fReadRoute_$sreadListDefault
                  Main.$fReadRoute_$creadPrec
                  Main.$fReadRoute_$creadListPrec -}
d081b443fa2131606923e6b73cdbd8ff
  $fReadRoute1 ::
    Text.ParserCombinators.ReadPrec.Prec
    -> forall b.
       ([Yesod.Routes.Class.Route Main.OlaMundo]
        -> Text.ParserCombinators.ReadP.P b)
       -> Text.ParserCombinators.ReadP.P b
  {- Arity: 2, Strictness: <L,A><L,C(U)>,
     Unfolding: InlineRule (2, True, True)
                (\ eta :: Text.ParserCombinators.ReadPrec.Prec
                   @ b
                   eta1 :: [Yesod.Routes.Class.Route Main.OlaMundo]
                           -> Text.ParserCombinators.ReadP.P b ->
                 GHC.Read.$wa
                   @ (Yesod.Routes.Class.Route Main.OlaMundo)
                   Main.$fReadRoute2
                     `cast`
                   (Sym (Text.ParserCombinators.ReadPrec.NTCo:ReadPrec[0]
                             <Yesod.Routes.Class.Route Main.OlaMundo>_R))
                   @ b
                   eta1) -}
d081b443fa2131606923e6b73cdbd8ff
  $fReadRoute2 ::
    Text.ParserCombinators.ReadPrec.Prec
    -> Text.ParserCombinators.ReadP.ReadP
         (Yesod.Routes.Class.Route Main.OlaMundo)
  {- Arity: 1,
     Unfolding: (GHC.Read.$fReadDouble10
                   @ (Yesod.Routes.Class.Route Main.OlaMundo)
                   Main.$fReadRoute3
                     `cast`
                   (Trans
                        (<Text.ParserCombinators.ReadPrec.Prec>_R
                         ->_R Sym (Text.ParserCombinators.ReadP.NTCo:ReadP[0]
                                       <Yesod.Routes.Class.Route Main.OlaMundo>_R))
                        (Sym (Text.ParserCombinators.ReadPrec.NTCo:ReadPrec[0]
                                  <Yesod.Routes.Class.Route Main.OlaMundo>_R)))) -}
d081b443fa2131606923e6b73cdbd8ff
  $fReadRoute3 ::
    Text.ParserCombinators.ReadPrec.Prec
    -> forall b1.
       (Yesod.Routes.Class.Route Main.OlaMundo
        -> Text.ParserCombinators.ReadP.P b1)
       -> Text.ParserCombinators.ReadP.P b1
  {- Arity: 2, Strictness: <L,A><L,1*C1(U)>m2, Inline: INLINE[0],
     Unfolding: InlineRule (2, True, False)
                (\ w :: Text.ParserCombinators.ReadPrec.Prec
                   @ b1
                   w1 :: Yesod.Routes.Class.Route Main.OlaMundo
                         -> Text.ParserCombinators.ReadP.P b1 ->
                 case Main.$wa @ b1 w1 of ww { (##) ww1 ->
                 Text.ParserCombinators.ReadP.Look @ b1 ww1 }) -}
30fd627d99dd38faf4db720806b84285
  $fReadRoute4 :: [GHC.Types.Char]
  {- Unfolding: (GHC.CString.unpackCString# "HomeR"#) -}
d081b443fa2131606923e6b73cdbd8ff
  $fReadRoute_$creadListPrec ::
    Text.ParserCombinators.ReadPrec.ReadPrec
      [Yesod.Routes.Class.Route Main.OlaMundo]
  {- Arity: 2, Strictness: <L,A><L,C(U)>,
     Unfolding: InlineRule (0, True, True)
                Main.$fReadRoute1
                  `cast`
                (Trans
                     (<Text.ParserCombinators.ReadPrec.Prec>_R
                      ->_R Sym (Text.ParserCombinators.ReadP.NTCo:ReadP[0]
                                    <[Yesod.Routes.Class.Route Main.OlaMundo]>_R))
                     (Sym (Text.ParserCombinators.ReadPrec.NTCo:ReadPrec[0]
                               <[Yesod.Routes.Class.Route Main.OlaMundo]>_R))) -}
d081b443fa2131606923e6b73cdbd8ff
  $fReadRoute_$creadPrec ::
    Text.ParserCombinators.ReadPrec.ReadPrec
      (Yesod.Routes.Class.Route Main.OlaMundo)
  {- Arity: 1,
     Unfolding: InlineRule (0, True, True)
                Main.$fReadRoute2
                  `cast`
                (Sym (Text.ParserCombinators.ReadPrec.NTCo:ReadPrec[0]
                          <Yesod.Routes.Class.Route Main.OlaMundo>_R)) -}
d081b443fa2131606923e6b73cdbd8ff
  $fReadRoute_$s$dmreadsPrec ::
    GHC.Types.Int
    -> Text.ParserCombinators.ReadP.ReadS
         (Yesod.Routes.Class.Route Main.OlaMundo)
  {- Arity: 1, Strictness: <L,U>,
     Unfolding: InlineRule (-1, True, False)
                (\ eta :: GHC.Types.Int ->
                 Text.ParserCombinators.ReadPrec.readPrec_to_S
                   @ (Yesod.Routes.Class.Route Main.OlaMundo)
                   Main.$fReadRoute_$creadPrec
                   eta) -}
d081b443fa2131606923e6b73cdbd8ff
  $fReadRoute_$sreadListDefault ::
    Text.ParserCombinators.ReadP.ReadS
      [Yesod.Routes.Class.Route Main.OlaMundo]
  {- Arity: 1,
     Unfolding: InlineRule (0, True, False)
                (Text.ParserCombinators.ReadP.run
                   @ [Yesod.Routes.Class.Route Main.OlaMundo]
                   ((Main.$fReadRoute_$creadListPrec
                       `cast`
                     (Text.ParserCombinators.ReadPrec.NTCo:ReadPrec[0]
                          <[Yesod.Routes.Class.Route Main.OlaMundo]>_R)
                       GHC.Read.$fRead(,)7)
                      `cast`
                    (Text.ParserCombinators.ReadP.NTCo:ReadP[0]
                         <[Yesod.Routes.Class.Route Main.OlaMundo]>_R)
                      @ [Yesod.Routes.Class.Route Main.OlaMundo]
                      (Text.ParserCombinators.ReadP.$fApplicativeP_$creturn
                         @ [Yesod.Routes.Class.Route Main.OlaMundo]))) -}
d081b443fa2131606923e6b73cdbd8ff
  $fRenderRouteOlaMundo ::
    Yesod.Routes.Class.RenderRoute Main.OlaMundo
  DFunId[0]
  {- HasNoCafRefs, Strictness: m, Inline: [ALWAYS] CONLIKE,
     Unfolding: DFun:.
                  @ Main.OlaMundo
                  Main.$fEqRoute
                  Main.$fRenderRouteOlaMundo_$crenderRoute -}
5c3a0ae98b6846f5ee04f6665923e15e
  $fRenderRouteOlaMundo1 ::
    ([Data.Text.Internal.Text],
     [(Data.Text.Internal.Text, Data.Text.Internal.Text)])
  {- HasNoCafRefs, Strictness: m,
     Unfolding: ((GHC.Types.[] @ Data.Text.Internal.Text,
                  GHC.Types.[]
                    @ (Data.Text.Internal.Text, Data.Text.Internal.Text))) -}
d081b443fa2131606923e6b73cdbd8ff
  $fRenderRouteOlaMundo_$crenderRoute ::
    Yesod.Routes.Class.Route Main.OlaMundo
    -> ([Data.Text.Internal.Text],
        [(Data.Text.Internal.Text, Data.Text.Internal.Text)])
  {- Arity: 1, HasNoCafRefs, Strictness: <S,1*U>m,
     Unfolding: InlineRule (1, True, False)
                (\ ds :: Yesod.Routes.Class.Route Main.OlaMundo ->
                 case ds of tpl { DEFAULT -> Main.$fRenderRouteOlaMundo1 }) -}
d081b443fa2131606923e6b73cdbd8ff
  $fRouteAttrsOlaMundo :: Yesod.Routes.Class.RouteAttrs Main.OlaMundo
  DFunId[0]
  {- Strictness: m, Inline: [ALWAYS] CONLIKE,
     Unfolding: DFun:.
                  @ Main.OlaMundo
                  Main.$fRenderRouteOlaMundo
                  Main.$fRouteAttrsOlaMundo_$crouteAttrs -}
18e415147019f7a6560bdb199011df26
  $fRouteAttrsOlaMundo1 :: Data.Set.Base.Set Data.Text.Internal.Text
  {- Unfolding: (Main.$fRouteAttrsOlaMundo_$sfromList
                   (GHC.Types.[] @ Data.Text.Internal.Text)) -}
d081b443fa2131606923e6b73cdbd8ff
  $fRouteAttrsOlaMundo_$crouteAttrs ::
    Yesod.Routes.Class.Route Main.OlaMundo
    -> Data.Set.Base.Set Data.Text.Internal.Text
  {- Arity: 1, Strictness: <S,1*U>,
     Unfolding: InlineRule (1, True, False)
                (\ ds :: Yesod.Routes.Class.Route Main.OlaMundo ->
                 case ds of tpl { DEFAULT -> Main.$fRouteAttrsOlaMundo1 }) -}
a85c848de7a629b44c92d8819eb0e44b
  $fRouteAttrsOlaMundo_$s$wgo5 ::
    GHC.Prim.Int#
    -> Data.Set.Base.Set Data.Text.Internal.Text
    -> GHC.Prim.ByteArray#
    -> GHC.Prim.Int#
    -> GHC.Prim.Int#
    -> [Data.Text.Internal.Text]
    -> Data.Set.Base.Set Data.Text.Internal.Text
  {- Arity: 6, Strictness: <L,U><S,1*U><L,U><L,U><L,U><L,U> -}
92c74c4a6f1f1773069841f41dcbff2d
  $fRouteAttrsOlaMundo_$sfromList ::
    [Data.Text.Internal.Text]
    -> Data.Set.Base.Set Data.Text.Internal.Text
  {- Arity: 1, Strictness: <S,1*U>,
     Unfolding: (\ ds :: [Data.Text.Internal.Text] ->
                 case ds of wild {
                   [] -> Data.Set.Base.Tip @ Data.Text.Internal.Text
                   : x1 ds1
                   -> case ds1 of wild1 {
                        []
                        -> case x1 of dt { Data.Text.Internal.Text ipv ipv1 ipv2 ->
                           Data.Set.Base.Bin
                             @ Data.Text.Internal.Text
                             1
                             dt
                             (Data.Set.Base.Tip @ Data.Text.Internal.Text)
                             (Data.Set.Base.Tip @ Data.Text.Internal.Text) }
                        : ipv ipv1
                        -> case x1 of ww { Data.Text.Internal.Text ww1 ww2 ww3 ->
                           case ipv of ww4 { Data.Text.Internal.Text ww5 ww6 ww7 ->
                           case Data.Text.$w$ccompare ww1 ww2 ww3 ww5 ww6 ww7 of wild2 {
                             DEFAULT
                             -> Main.$fRouteAttrsOlaMundo_$sgo5
                                  (Data.Set.Base.Bin
                                     @ Data.Text.Internal.Text
                                     1
                                     ww
                                     (Data.Set.Base.Tip @ Data.Text.Internal.Text)
                                     (Data.Set.Base.Tip @ Data.Text.Internal.Text))
                                  ww5
                                  ww6
                                  ww7
                                  ipv1
                             GHC.Types.LT
                             -> Main.$fRouteAttrsOlaMundo_$s$wgo5
                                  1
                                  (Data.Set.Base.Bin
                                     @ Data.Text.Internal.Text
                                     1
                                     ww
                                     (Data.Set.Base.Tip @ Data.Text.Internal.Text)
                                     (Data.Set.Base.Tip @ Data.Text.Internal.Text))
                                  ww5
                                  ww6
                                  ww7
                                  ipv1 } } } } }) -}
0c5706efdd4ebdbd9cec56f25ba60f2c
  $fRouteAttrsOlaMundo_$sgo5 ::
    Data.Set.Base.Set Data.Text.Internal.Text
    -> GHC.Prim.ByteArray#
    -> GHC.Prim.Int#
    -> GHC.Prim.Int#
    -> [Data.Text.Internal.Text]
    -> Data.Set.Base.Set Data.Text.Internal.Text
  {- Arity: 5, Strictness: <S,1*U><L,U><L,U><L,U><L,U> -}
d081b443fa2131606923e6b73cdbd8ff
  $fShowRoute ::
    GHC.Show.Show (Yesod.Routes.Class.Route Main.OlaMundo)
  DFunId[0]
  {- Strictness: m, Inline: [ALWAYS] CONLIKE,
     Unfolding: DFun:.
                  @ (Yesod.Routes.Class.Route Main.OlaMundo)
                  Main.$fShowRoute_$cshowsPrec
                  Main.$fShowRoute_$cshow
                  Main.$fShowRoute_$cshowList -}
d081b443fa2131606923e6b73cdbd8ff
  $fShowRoute1 ::
    Yesod.Routes.Class.Route Main.OlaMundo -> GHC.Show.ShowS
  {- Arity: 2, Strictness: <S,1*U><L,1*U>,
     Unfolding: InlineRule (2, True, False)
                (\ ds :: Yesod.Routes.Class.Route Main.OlaMundo
                   eta :: GHC.Base.String ->
                 case ds of tpl { DEFAULT ->
                 GHC.Base.augment
                   @ GHC.Types.Char
                   (\ @ b c :: GHC.Types.Char -> b -> b[OneShot] n :: b[OneShot] ->
                    GHC.Base.foldr @ GHC.Types.Char @ b c n Main.$fReadRoute4)
                   eta }) -}
d081b443fa2131606923e6b73cdbd8ff
  $fShowRoute_$cshow ::
    Yesod.Routes.Class.Route Main.OlaMundo -> GHC.Base.String
  {- Arity: 1, Strictness: <S,1*U>,
     Unfolding: InlineRule (1, True, False)
                (\ x1 :: Yesod.Routes.Class.Route Main.OlaMundo ->
                 case x1 of tpl { DEFAULT -> Main.$fReadRoute4 }) -}
d081b443fa2131606923e6b73cdbd8ff
  $fShowRoute_$cshowList ::
    [Yesod.Routes.Class.Route Main.OlaMundo] -> GHC.Show.ShowS
  {- Arity: 2,
     Unfolding: (GHC.Show.showList__
                   @ (Yesod.Routes.Class.Route Main.OlaMundo)
                   Main.$fShowRoute1) -}
d081b443fa2131606923e6b73cdbd8ff
  $fShowRoute_$cshowsPrec ::
    GHC.Types.Int
    -> Yesod.Routes.Class.Route Main.OlaMundo -> GHC.Show.ShowS
  {- Arity: 3, Strictness: <L,A><S,1*U><L,1*U>,
     Unfolding: InlineRule (3, True, False)
                (\ ds :: GHC.Types.Int
                   ds1 :: Yesod.Routes.Class.Route Main.OlaMundo
                   eta :: GHC.Base.String ->
                 case ds1 of tpl { DEFAULT ->
                 GHC.Base.augment
                   @ GHC.Types.Char
                   (\ @ b c :: GHC.Types.Char -> b -> b[OneShot] n :: b[OneShot] ->
                    GHC.Base.foldr @ GHC.Types.Char @ b c n Main.$fReadRoute4)
                   eta }) -}
d081b443fa2131606923e6b73cdbd8ff
  $fYesodDispatchOlaMundo ::
    Yesod.Core.Class.Dispatch.YesodDispatch Main.OlaMundo
  DFunId[0]
  {- Strictness: m, Inline: [ALWAYS] CONLIKE,
     Unfolding: DFun:.
                  @ Main.OlaMundo
                  Main.$fYesodOlaMundo
                  Main.$fYesodDispatchOlaMundo_$cyesodDispatch -}
d081b443fa2131606923e6b73cdbd8ff
  $fYesodDispatchOlaMundo_$cyesodDispatch ::
    Yesod.Core.Types.YesodRunnerEnv Main.OlaMundo
    -> Network.Wai.Application
  {- Arity: 2,
     Strictness: <L,U(U,U,U,U,C(U(U,1*U(U,U,U))))><S(LLLLLLLSLLLLLL),1*U(U(U,U,U,U),U,U,U,U,U,U,U,U,U,U,U,U,U)>,
     Inline: INLINE[0],
     Unfolding: InlineRule (2, True, False)
                (\ w :: Yesod.Core.Types.YesodRunnerEnv Main.OlaMundo
                   w1 :: Network.Wai.Internal.Request ->
                 case w1 of ww { Network.Wai.Internal.Request ww1 ww2 ww3 ww4 ww5 ww6 ww7 ww8 ww9 ww10 ww11 ww12 ww13 ww14 ->
                 Main.$w$cyesodDispatch
                   w
                   ww1
                   ww2
                   ww3
                   ww4
                   ww5
                   ww6
                   ww7
                   ww8
                   ww9
                   ww10
                   ww11
                   ww12
                   ww13
                   ww14 }) -}
d081b443fa2131606923e6b73cdbd8ff
  $fYesodOlaMundo :: Yesod.Core.Class.Yesod.Yesod Main.OlaMundo
  DFunId[0]
  {- Inline: [ALWAYS] CONLIKE,
     Unfolding: DFun:.
                  @ Main.OlaMundo
                  Main.$fRenderRouteOlaMundo
                  Main.$fYesodOlaMundo_$s$dmapproot
                  Main.$fYesodOlaMundo_$cerrorHandler
                  Main.$fYesodOlaMundo_$cdefaultLayout
                  Main.$fYesodOlaMundo_$s$dmurlRenderOverride
                  Main.$fYesodOlaMundo_$cisAuthorized
                  Main.$fYesodOlaMundo_$cisWriteRequest
                  Main.$fYesodOlaMundo_$s$dmauthRoute
                  Main.$fYesodOlaMundo_$ccleanPath
                  Main.$fYesodOlaMundo_$cjoinPath
                  Main.$fYesodOlaMundo_$caddStaticContent
                  Main.$fYesodOlaMundo_$s$dmmaximumContentLength
                  Main.$fYesodOlaMundo_$cmakeLogger
                  Main.$fYesodOlaMundo_$cmessageLoggerSource
                  Main.$fYesodOlaMundo_$s$dmjsLoader
                  Main.$fYesodOlaMundo_$cmakeSessionBackend
                  Main.$fYesodOlaMundo_$cfileUpload
                  Main.$fYesodOlaMundo_$s$dmshouldLog
                  Main.$fYesodOlaMundo_$cshouldLogIO
                  Main.$fYesodOlaMundo_$cyesodMiddleware
                  Main.$fYesodOlaMundo_$cyesodWithInternalState -}
d081b443fa2131606923e6b73cdbd8ff
  $fYesodOlaMundo1 ::
    Yesod.Core.Content.ToTypedContent res =>
    Yesod.Core.Types.HandlerT Main.OlaMundo GHC.Types.IO res
    -> Yesod.Core.Types.HandlerData
         Main.OlaMundo (Yesod.Core.Types.MonadRoute GHC.Types.IO)
    -> GHC.Prim.State# GHC.Prim.RealWorld
    -> (# GHC.Prim.State# GHC.Prim.RealWorld, res #)
  {- Arity: 4,
     Strictness: <L,A><L,1*C1(C1(U(U,U)))><S(SSLSL),1*U(U,U,U,U,U)><L,U>,
     Inline: INLINE[0],
     Unfolding: InlineRule (4, True, False)
                (\ @ res
                   w :: Yesod.Core.Content.ToTypedContent res
                   w1 :: Yesod.Core.Types.HandlerT Main.OlaMundo GHC.Types.IO res
                   w2 :: Yesod.Core.Types.HandlerData
                           Main.OlaMundo (Yesod.Core.Types.MonadRoute GHC.Types.IO)
                   w3 :: GHC.Prim.State# GHC.Prim.RealWorld[OneShot] ->
                 case w2 of ww { Yesod.Core.Types.HandlerData ww1 ww2 ww3 ww4 ww5 ->
                 Main.$wa1 @ res w1 ww1 ww2 ww3 ww4 ww5 w3 }) -}
d081b443fa2131606923e6b73cdbd8ff
  $fYesodOlaMundo10 ::
    Data.Text.Internal.Text
    -> Data.Text.Internal.Text
    -> Data.ByteString.Lazy.Internal.ByteString
    -> Yesod.Core.Types.HandlerData
         Main.OlaMundo (Yesod.Core.Types.MonadRoute GHC.Types.IO)
    -> GHC.Prim.State# GHC.Prim.RealWorld
    -> (# GHC.Prim.State# GHC.Prim.RealWorld,
          GHC.Base.Maybe
            (Data.Either.Either
               Data.Text.Internal.Text
               (Yesod.Routes.Class.Route Main.OlaMundo,
                [(Data.Text.Internal.Text, Data.Text.Internal.Text)])) #)
  {- Arity: 5, HasNoCafRefs, Strictness: <L,A><L,A><L,A><L,A><L,U>,
     Unfolding: InlineRule (5, True, True)
                (\ ds :: Data.Text.Internal.Text
                   ds1 :: Data.Text.Internal.Text
                   ds2 :: Data.ByteString.Lazy.Internal.ByteString
                   eta :: Yesod.Core.Types.HandlerData
                            Main.OlaMundo (Yesod.Core.Types.MonadRoute GHC.Types.IO)
                   eta1 :: GHC.Prim.State# GHC.Prim.RealWorld[OneShot] ->
                 (# eta1,
                    GHC.Base.Nothing
                      @ (Data.Either.Either
                           Data.Text.Internal.Text
                           (Yesod.Routes.Class.Route Main.OlaMundo,
                            [(Data.Text.Internal.Text, Data.Text.Internal.Text)])) #)) -}
c56fae08d40c5213dafe3b180ae8a94f
  $fYesodOlaMundo11 ::
    Data.Text.Internal.Text -> Data.Text.Internal.Text
  {- Arity: 1 -}
e23defabf29fec9c79ee7d4e2cea0b3e
  $fYesodOlaMundo12 :: [Data.Text.Internal.Text]
  {- Strictness: m2,
     Unfolding: (GHC.Types.:
                   @ Data.Text.Internal.Text
                   Data.Text.Internal.empty_
                   (GHC.Types.[] @ Data.Text.Internal.Text)) -}
db826c710b982f5a2a6aafc959b81a26
  $fYesodOlaMundo13 ::
    (Data.Text.Internal.Text, Data.Text.Internal.Text)
    -> (Data.ByteString.Internal.ByteString,
        GHC.Base.Maybe Data.ByteString.Internal.ByteString)
  {- Arity: 1,
     Unfolding: (\ ds :: (Data.Text.Internal.Text,
                          Data.Text.Internal.Text) ->
                 (case ds of wild { (,) x1 y -> Data.Text.Encoding.encodeUtf8 x1 },
                  case ds of wild { (,) x1 y ->
                  case y of wild1 { Data.Text.Internal.Text dt1 dt2 dt3 ->
                  case Data.Text.Internal.empty_ of wild2 { Data.Text.Internal.Text dt4 dt5 dt6 ->
                  case GHC.Prim.tagToEnum#
                         @ GHC.Types.Bool
                         (GHC.Prim.==# dt3 dt6) of wild3 {
                    GHC.Types.False
                    -> GHC.Base.Just
                         @ Data.ByteString.Internal.ByteString
                         (Data.Text.Encoding.$wencodeUtf8 dt1 dt2 dt3)
                    GHC.Types.True
                    -> case {__pkg_ccall text-1.2.1.3@text_1l1AN4I48k37RaQ6fm6CEh _hs_text_memcmp GHC.Prim.ByteArray#
                                                                                                  -> GHC.Prim.Word#
                                                                                                  -> GHC.Prim.ByteArray#
                                                                                                  -> GHC.Prim.Word#
                                                                                                  -> GHC.Prim.Word#
                                                                                                  -> GHC.Prim.State#
                                                                                                       GHC.Prim.RealWorld
                                                                                                  -> (# GHC.Prim.State#
                                                                                                          GHC.Prim.RealWorld,
                                                                                                        GHC.Prim.Int# #)}
                              dt1
                              (GHC.Prim.int2Word# dt2)
                              dt4
                              (GHC.Prim.int2Word# dt5)
                              (GHC.Prim.int2Word# dt3)
                              GHC.Prim.realWorld# of wild4 { (#,#) ds11 ds12 ->
                       case GHC.Prim.narrow32Int# ds12 of wild5 {
                         DEFAULT
                         -> GHC.Base.Just
                              @ Data.ByteString.Internal.ByteString
                              (Data.Text.Encoding.$wencodeUtf8 dt1 dt2 dt3)
                         0
                         -> GHC.Base.Nothing
                              @ Data.ByteString.Internal.ByteString } } } } } })) -}
dde29dce2982412642d2041bd91ad738
  $fYesodOlaMundo14 ::
    Data.Text.Internal.Text -> Data.Text.Internal.Text
  {- Arity: 1,
     Unfolding: (\ t :: Data.Text.Internal.Text ->
                 case t of wild { Data.Text.Internal.Text dt dt1 dt2 ->
                 let {
                   a53 :: GHC.Prim.Int# = GHC.Prim.+# dt1 dt2
                 } in
                 letrec {
                   $wloop_all :: GHC.Prim.Int# -> GHC.Types.Bool
                     {- Arity: 1, Strictness: <L,U>, Inline: [0] -}
                   = \ ww :: GHC.Prim.Int# ->
                     case GHC.Prim.tagToEnum#
                            @ GHC.Types.Bool
                            (GHC.Prim.>=# ww a53) of wild1 {
                       GHC.Types.False
                       -> case GHC.Prim.indexWord16Array# dt ww of r# { DEFAULT ->
                          case GHC.Prim.tagToEnum#
                                 @ GHC.Types.Bool
                                 (GHC.Prim.geWord# r# __word 55296) of wild2 {
                            GHC.Types.False
                            -> case GHC.Prim.chr# (GHC.Prim.word2Int# r#) of wild4 {
                                 DEFAULT -> GHC.Types.False '-' -> $wloop_all (GHC.Prim.+# ww 1) }
                            GHC.Types.True
                            -> case GHC.Prim.tagToEnum#
                                      @ GHC.Types.Bool
                                      (GHC.Prim.leWord# r# __word 56319) of wild3 {
                                 GHC.Types.False
                                 -> case GHC.Prim.chr# (GHC.Prim.word2Int# r#) of wild4 {
                                      DEFAULT -> GHC.Types.False
                                      '-' -> $wloop_all (GHC.Prim.+# ww 1) }
                                 GHC.Types.True
                                 -> case GHC.Prim.indexWord16Array#
                                           dt
                                           (GHC.Prim.+# ww 1) of r#1 { DEFAULT ->
                                    case GHC.Prim.chr#
                                           (GHC.Prim.+#
                                              (GHC.Prim.+#
                                                 (GHC.Prim.uncheckedIShiftL#
                                                    (GHC.Prim.-# (GHC.Prim.word2Int# r#) 55296)
                                                    10)
                                                 (GHC.Prim.-# (GHC.Prim.word2Int# r#1) 56320))
                                              65536) of wild4 {
                                      DEFAULT -> GHC.Types.False
                                      '-' -> $wloop_all (GHC.Prim.+# ww 2) } } } } }
                       GHC.Types.True -> GHC.Types.True }
                 } in
                 case $wloop_all dt1 of wild1 {
                   GHC.Types.False -> wild
                   GHC.Types.True
                   -> case GHC.Prim.tagToEnum#
                             @ GHC.Types.Bool
                             (GHC.Prim.>=# 1 dt2) of wild3 {
                        GHC.Types.False
                        -> case Data.Text.$witerN
                                  Main.$fYesodOlaMundo15
                                  dt
                                  dt1
                                  dt2 of ww4 { DEFAULT ->
                           case GHC.Prim.-# dt2 ww4 of wild5 {
                             DEFAULT -> Data.Text.Internal.Text dt (GHC.Prim.+# dt1 ww4) wild5
                             0 -> Data.Text.Internal.empty } }
                        GHC.Types.True -> Data.Text.Internal.empty } } }) -}
325918bddbbdd00100ba354db52675f4
  $fYesodOlaMundo15 :: GHC.Types.Int
  {- HasNoCafRefs, Strictness: m, Unfolding: (GHC.Types.I# 1) -}
eedb0b50183bd9e30d006485e1e3f63f
  $fYesodOlaMundo16 :: Data.Text.Internal.Text -> GHC.Types.Bool
  {- Arity: 1, HasNoCafRefs, Strictness: <S,1*U(A,A,U)>,
     Unfolding: InlineRule (1, True, False)
                (\ x1 :: Data.Text.Internal.Text ->
                 case x1 of wild { Data.Text.Internal.Text dt dt1 dt2 ->
                 case GHC.Prim.tagToEnum#
                        @ GHC.Types.Bool
                        (GHC.Prim.<=# dt2 0) of wild1 {
                   GHC.Types.False -> GHC.Types.True
                   GHC.Types.True -> GHC.Types.False } }) -}
d081b443fa2131606923e6b73cdbd8ff
  $fYesodOlaMundo17 ::
    Yesod.Core.Types.HandlerData
      Main.OlaMundo (Yesod.Core.Types.MonadRoute GHC.Types.IO)
    -> GHC.Prim.State# GHC.Prim.RealWorld
    -> (# GHC.Prim.State# GHC.Prim.RealWorld, GHC.Types.Bool #)
  {- Arity: 2,
     Unfolding: (\ r :: Yesod.Core.Types.HandlerData
                          Main.OlaMundo (Yesod.Core.Types.MonadRoute GHC.Types.IO)
                   s :: GHC.Prim.State# GHC.Prim.RealWorld[OneShot] ->
                 case (Main.$fYesodOlaMundo26
                         `cast`
                       (Yesod.Core.Types.NTCo:HandlerT[0]
                            <Main.OlaMundo>_N
                            <GHC.Types.IO>_N
                            <Network.Wai.Internal.Request>_N)
                         r)
                        `cast`
                      (GHC.Types.NTCo:IO[0] <Network.Wai.Internal.Request>_R)
                        s of ds1 { (#,#) ipv ipv1 ->
                 (# ipv,
                    case GHC.List.elem
                           @ Network.HTTP.Types.Method.Method
                           Data.ByteString.Internal.$fEqByteString
                           (case ipv1 of wild { Network.Wai.Internal.Request ds2 ds3 ds4 ds5 ds6 ds7 ds8 ds9 ds10 ds11 ds12 ds13 ds14 ds15 ->
                            ds2 })
                           Main.$fYesodOlaMundo18 of wild {
                      GHC.Types.False -> GHC.Types.True
                      GHC.Types.True -> GHC.Types.False } #) }) -}
8ef19b8ee97a8e011e79f65725220a42
  $fYesodOlaMundo18 :: [Network.HTTP.Types.Method.Method]
  {- Unfolding: (GHC.Types.:
                   @ Network.HTTP.Types.Method.Method
                   Main.$fYesodOlaMundo25
                   Main.$fYesodOlaMundo19) -}
ba1543ea357a2bd6e28234a2232749d4
  $fYesodOlaMundo19 :: [Network.HTTP.Types.Method.Method]
  {- Unfolding: (GHC.Types.:
                   @ Network.HTTP.Types.Method.Method
                   Main.$fYesodOlaMundo24
                   Main.$fYesodOlaMundo20) -}
d081b443fa2131606923e6b73cdbd8ff
  $fYesodOlaMundo2 ::
    Main.OlaMundo
    -> Control.Monad.Logger.LogSource
    -> Control.Monad.Logger.LogLevel
    -> GHC.Prim.State# GHC.Prim.RealWorld
    -> (# GHC.Prim.State# GHC.Prim.RealWorld, GHC.Types.Bool #)
  {- Arity: 4, HasNoCafRefs, Strictness: <L,A><L,A><L,1*U><L,U>,
     Unfolding: InlineRule (4, True, False)
                (\ a123 :: Main.OlaMundo
                   b :: Control.Monad.Logger.LogSource
                   c :: Control.Monad.Logger.LogLevel
                   eta1 :: GHC.Prim.State# GHC.Prim.RealWorld[OneShot] ->
                 (# eta1, Yesod.Core.Class.Yesod.defaultShouldLog b c #)) -}
397af88aa183506a0f7560de8cdade16
  $fYesodOlaMundo20 :: [Network.HTTP.Types.Method.Method]
  {- Unfolding: (GHC.Types.:
                   @ Network.HTTP.Types.Method.Method
                   Main.$fYesodOlaMundo23
                   Main.$fYesodOlaMundo21) -}
bacd37ffb4fb66253d8b28d77a89f691
  $fYesodOlaMundo21 :: [Network.HTTP.Types.Method.Method]
  {- Unfolding: (GHC.Types.:
                   @ Network.HTTP.Types.Method.Method
                   Main.$fYesodOlaMundo22
                   (GHC.Types.[] @ Network.HTTP.Types.Method.Method)) -}
1afbc49c0fb7a33d84c9a4a2a89e96f5
  $fYesodOlaMundo22 :: Network.HTTP.Types.Method.Method
  {- Unfolding: (case GHC.Prim.newMutVar#
                        @ GHC.ForeignPtr.Finalizers
                        @ GHC.Prim.RealWorld
                        GHC.ForeignPtr.NoFinalizers
                        GHC.Prim.realWorld# of ds1 { (#,#) ipv ipv1 ->
                 let {
                   s :: GHC.Prim.Addr# = "TRACE"#
                 } in
                 case {__pkg_ccall bytestring-0.10.6.0@bytes_6elQVSg5cWdFrvRnfxTUrH strlen GHC.Prim.Addr#
                                                                                           -> GHC.Prim.State#
                                                                                                GHC.Prim.RealWorld
                                                                                           -> (# GHC.Prim.State#
                                                                                                   GHC.Prim.RealWorld,
                                                                                                 GHC.Prim.Word# #)}
                        s
                        ipv of wild { (#,#) ds3 ds4 ->
                 Data.ByteString.Internal.PS
                   s
                   (GHC.ForeignPtr.PlainForeignPtr ipv1)
                   0
                   (GHC.Prim.word2Int# ds4) } }) -}
4966aaeb1ebe249b1b29919b2f79aecb
  $fYesodOlaMundo23 :: Network.HTTP.Types.Method.Method
  {- Unfolding: (case GHC.Prim.newMutVar#
                        @ GHC.ForeignPtr.Finalizers
                        @ GHC.Prim.RealWorld
                        GHC.ForeignPtr.NoFinalizers
                        GHC.Prim.realWorld# of ds1 { (#,#) ipv ipv1 ->
                 let {
                   s :: GHC.Prim.Addr# = "OPTIONS"#
                 } in
                 case {__pkg_ccall bytestring-0.10.6.0@bytes_6elQVSg5cWdFrvRnfxTUrH strlen GHC.Prim.Addr#
                                                                                           -> GHC.Prim.State#
                                                                                                GHC.Prim.RealWorld
                                                                                           -> (# GHC.Prim.State#
                                                                                                   GHC.Prim.RealWorld,
                                                                                                 GHC.Prim.Word# #)}
                        s
                        ipv of wild { (#,#) ds3 ds4 ->
                 Data.ByteString.Internal.PS
                   s
                   (GHC.ForeignPtr.PlainForeignPtr ipv1)
                   0
                   (GHC.Prim.word2Int# ds4) } }) -}
7989ece5516bb29639876b4757936adb
  $fYesodOlaMundo24 :: Network.HTTP.Types.Method.Method
  {- Unfolding: (case GHC.Prim.newMutVar#
                        @ GHC.ForeignPtr.Finalizers
                        @ GHC.Prim.RealWorld
                        GHC.ForeignPtr.NoFinalizers
                        GHC.Prim.realWorld# of ds1 { (#,#) ipv ipv1 ->
                 let {
                   s :: GHC.Prim.Addr# = "HEAD"#
                 } in
                 case {__pkg_ccall bytestring-0.10.6.0@bytes_6elQVSg5cWdFrvRnfxTUrH strlen GHC.Prim.Addr#
                                                                                           -> GHC.Prim.State#
                                                                                                GHC.Prim.RealWorld
                                                                                           -> (# GHC.Prim.State#
                                                                                                   GHC.Prim.RealWorld,
                                                                                                 GHC.Prim.Word# #)}
                        s
                        ipv of wild { (#,#) ds3 ds4 ->
                 Data.ByteString.Internal.PS
                   s
                   (GHC.ForeignPtr.PlainForeignPtr ipv1)
                   0
                   (GHC.Prim.word2Int# ds4) } }) -}
46f7118734c4635905bcb4880fb9ab8f
  $fYesodOlaMundo25 :: Network.HTTP.Types.Method.Method
  {- Unfolding: (case GHC.Prim.newMutVar#
                        @ GHC.ForeignPtr.Finalizers
                        @ GHC.Prim.RealWorld
                        GHC.ForeignPtr.NoFinalizers
                        GHC.Prim.realWorld# of ds1 { (#,#) ipv ipv1 ->
                 let {
                   s :: GHC.Prim.Addr# = "GET"#
                 } in
                 case {__pkg_ccall bytestring-0.10.6.0@bytes_6elQVSg5cWdFrvRnfxTUrH strlen GHC.Prim.Addr#
                                                                                           -> GHC.Prim.State#
                                                                                                GHC.Prim.RealWorld
                                                                                           -> (# GHC.Prim.State#
                                                                                                   GHC.Prim.RealWorld,
                                                                                                 GHC.Prim.Word# #)}
                        s
                        ipv of wild { (#,#) ds3 ds4 ->
                 Data.ByteString.Internal.PS
                   s
                   (GHC.ForeignPtr.PlainForeignPtr ipv1)
                   0
                   (GHC.Prim.word2Int# ds4) } }) -}
d081b443fa2131606923e6b73cdbd8ff
  $fYesodOlaMundo26 ::
    Yesod.Core.Types.HandlerT
      Main.OlaMundo GHC.Types.IO Network.Wai.Internal.Request
  {- Unfolding: (Yesod.Core.Handler.waiRequest
                   @ (Yesod.Core.Types.HandlerT Main.OlaMundo GHC.Types.IO)
                   Main.$fYesodOlaMundo_$s$fMonadHandlerHandlerT) -}
4a22a2cceb64c95f80a66de57d0d061c
  $fYesodOlaMundo27 ::
    Control.Monad.Trans.Resource.MonadResourceBase GHC.Types.IO
  {- Strictness: m,
     Unfolding: ((Control.Monad.Trans.Control.$fMonadBaseControlIOIO,
                  Control.Monad.Catch.$fMonadThrowIO,
                  Control.Monad.Base.$fMonadBaseIOIO,
                  Control.Monad.IO.Class.$fMonadIOIO,
                  GHC.Base.$fApplicativeIO)) -}
d081b443fa2131606923e6b73cdbd8ff
  $fYesodOlaMundo28 ::
    Control.Monad.Trans.Resource.Internal.MonadResource
      (Yesod.Core.Types.HandlerT Main.OlaMundo GHC.Types.IO)
  {- Strictness: m,
     Unfolding: InlineRule (0, True, True)
                Main.$fYesodOlaMundo_$s$fMonadResourceHandlerT -}
d081b443fa2131606923e6b73cdbd8ff
  $fYesodOlaMundo29 ::
    Control.Monad.Base.MonadBase
      GHC.Types.IO (Yesod.Core.Types.HandlerT Main.OlaMundo GHC.Types.IO)
  {- Strictness: m,
     Unfolding: InlineRule (0, True, True)
                Main.$fYesodOlaMundo_$s$fMonadBasebHandlerT -}
97b8eb255445201bf6dc0b3dacd37e5f
  $fYesodOlaMundo3 :: Yesod.Core.Types.FileUpload
  {- Strictness: m1,
     Unfolding: (Yesod.Core.Types.FileUploadMemory
                   Main.$fYesodOlaMundo4) -}
d081b443fa2131606923e6b73cdbd8ff
  $fYesodOlaMundo30 ::
    GHC.Base.Monad
      (Yesod.Core.Types.HandlerT Main.OlaMundo GHC.Types.IO)
  {- Strictness: m,
     Unfolding: InlineRule (0, True, True)
                Main.$fYesodOlaMundo_$s$fMonadHandlerT -}
d081b443fa2131606923e6b73cdbd8ff
  $fYesodOlaMundo31 ::
    GHC.Base.String
    -> Yesod.Core.Types.HandlerT Main.OlaMundo GHC.Types.IO a
  {- Arity: 1, Strictness: <B,U>b,
     Unfolding: InlineRule (1, True, True)
                (\ @ a53 eta :: [GHC.Types.Char] ->
                 GHC.Err.error
                   @ (Yesod.Core.Types.HandlerT Main.OlaMundo GHC.Types.IO a53)
                   eta) -}
d081b443fa2131606923e6b73cdbd8ff
  $fYesodOlaMundo32 ::
    GHC.Base.Applicative
      (Yesod.Core.Types.HandlerT Main.OlaMundo GHC.Types.IO)
  {- Strictness: m,
     Unfolding: InlineRule (0, True, True)
                Main.$fYesodOlaMundo_$s$fApplicativeHandlerT -}
d081b443fa2131606923e6b73cdbd8ff
  $fYesodOlaMundo33 ::
    GHC.Base.Functor
      (Yesod.Core.Types.HandlerT Main.OlaMundo GHC.Types.IO)
  {- Strictness: m,
     Unfolding: InlineRule (0, True, True)
                (Yesod.Core.Handler.$s$fFunctorHandlerT @ Main.OlaMundo) -}
d081b443fa2131606923e6b73cdbd8ff
  $fYesodOlaMundo34 ::
    Control.Monad.IO.Class.MonadIO
      (Yesod.Core.Types.HandlerT Main.OlaMundo GHC.Types.IO)
  {- Strictness: m,
     Unfolding: InlineRule (0, True, True)
                Main.$fYesodOlaMundo_$s$fMonadIOHandlerT -}
d081b443fa2131606923e6b73cdbd8ff
  $fYesodOlaMundo35 ::
    Control.Monad.Catch.MonadThrow
      (Yesod.Core.Types.HandlerT Main.OlaMundo GHC.Types.IO)
  {- Strictness: m,
     Unfolding: InlineRule (0, True, True)
                Main.$fYesodOlaMundo_$s$fMonadThrowHandlerT -}
d081b443fa2131606923e6b73cdbd8ff
  $fYesodOlaMundo36 ::
    Yesod.Routes.Class.Route Main.OlaMundo
    -> GHC.Types.Bool
    -> Yesod.Core.Types.HandlerData
         Main.OlaMundo (Yesod.Core.Types.MonadRoute GHC.Types.IO)
    -> GHC.Prim.State# GHC.Prim.RealWorld
    -> (# GHC.Prim.State# GHC.Prim.RealWorld,
          Yesod.Core.Types.AuthResult #)
  {- Arity: 4, HasNoCafRefs, Strictness: <L,A><L,A><L,A><L,U>,
     Unfolding: InlineRule (4, True, True)
                (\ ds :: Yesod.Routes.Class.Route Main.OlaMundo
                   ds1 :: GHC.Types.Bool
                   eta :: Yesod.Core.Types.HandlerData
                            Main.OlaMundo (Yesod.Core.Types.MonadRoute GHC.Types.IO)
                   eta1 :: GHC.Prim.State# GHC.Prim.RealWorld[OneShot] ->
                 (# eta1, Yesod.Core.Types.Authorized #)) -}
02bfeaf18b9267d96fc7a6d50f2e584b
  $fYesodOlaMundo4 ::
    Data.ByteString.Internal.ByteString
    -> Network.Wai.Parse.FileInfo ()
    -> GHC.Types.IO Data.ByteString.Internal.ByteString
    -> GHC.Types.IO Data.ByteString.Lazy.Internal.ByteString
  {- Arity: 3, Strictness: <L,A><L,A><L,U>,
     Unfolding: InlineRule (3, True, True)
                (\ w1 :: Data.ByteString.Internal.ByteString
                   w2 :: Network.Wai.Parse.FileInfo ()
                   w3 :: GHC.Types.IO Data.ByteString.Internal.ByteString ->
                 Network.Wai.Parse.$wlbsBackEnd
                   @ Data.ByteString.Internal.ByteString
                   @ (Network.Wai.Parse.FileInfo ())
                   @ GHC.Types.IO
                   GHC.Base.$fMonadIO
                   w3) -}
45cab75d14e8f23a83b50341fbc4783a
  $fYesodOlaMundo5 :: Yesod.Core.Types.FileUpload
  {- Strictness: m2,
     Unfolding: (Yesod.Core.Types.FileUploadDisk
                   (Network.Wai.Parse.tempFileBackEnd1
                      @ Data.ByteString.Internal.ByteString
                      @ (Network.Wai.Parse.FileInfo ()))
                     `cast`
                   (<Control.Monad.Trans.Resource.InternalState>_R
                    ->_R <Data.ByteString.Internal.ByteString>_R
                    ->_R <Network.Wai.Parse.FileInfo ()>_R
                    ->_R <GHC.Types.IO Data.ByteString.Internal.ByteString>_R
                    ->_R Sym (GHC.Types.NTCo:IO[0] <GHC.IO.FilePath>_R))) -}
d081b443fa2131606923e6b73cdbd8ff
  $fYesodOlaMundo6 ::
    Main.OlaMundo
    -> GHC.Prim.State# GHC.Prim.RealWorld
    -> (# GHC.Prim.State# GHC.Prim.RealWorld,
          GHC.Base.Maybe Yesod.Core.Types.SessionBackend #)
  {- Arity: 2, Strictness: <L,A><L,U>, Inline: INLINE[0],
     Unfolding: InlineRule (2, True, True)
                (\ w :: Main.OlaMundo
                   w1 :: GHC.Prim.State# GHC.Prim.RealWorld[OneShot] ->
                 Main.$wa2 w1) -}
bc7f83ae64960f2d651a3f5e2da20e30
  $fYesodOlaMundo7 :: GHC.Integer.Type.Integer
  {- HasNoCafRefs, Unfolding: (__integer 7200000000000000) -}
d081b443fa2131606923e6b73cdbd8ff
  $fYesodOlaMundo8 ::
    Main.OlaMundo
    -> Yesod.Core.Types.Logger
    -> Language.Haskell.TH.Syntax.Loc
    -> Control.Monad.Logger.LogSource
    -> Control.Monad.Logger.LogLevel
    -> System.Log.FastLogger.LogStr.LogStr
    -> GHC.Prim.State# GHC.Prim.RealWorld
    -> (# GHC.Prim.State# GHC.Prim.RealWorld, () #)
  {- Arity: 7,
     Strictness: <L,A><L,U(U(A,1*U(U),1*U(U(U),U(U),A,U),1*C1(U(U,U))),U)><L,1*U(1*U,U,1*U,1*U(1*U(U),1*U(U)),A)><L,1*U(U,U,U)><S,U><L,1*U(U,C(U))><L,U>,
     Inline: INLINE[0],
     Unfolding: InlineRule (7, True, True)
                (\ w :: Main.OlaMundo
                   w1 :: Yesod.Core.Types.Logger
                   w2 :: Language.Haskell.TH.Syntax.Loc
                   w3 :: Control.Monad.Logger.LogSource
                   w4 :: Control.Monad.Logger.LogLevel
                   w5 :: System.Log.FastLogger.LogStr.LogStr
                   w6 :: GHC.Prim.State# GHC.Prim.RealWorld[OneShot] ->
                 Main.$wa3 w1 w2 w3 w4 w5 w6) -}
d081b443fa2131606923e6b73cdbd8ff
  $fYesodOlaMundo9 ::
    Main.OlaMundo
    -> GHC.Prim.State# GHC.Prim.RealWorld
    -> (# GHC.Prim.State# GHC.Prim.RealWorld,
          Yesod.Core.Types.Logger #)
  {- Arity: 2, Strictness: <L,A>,
     Unfolding: InlineRule (1, True, True)
                (\ ds :: Main.OlaMundo
                   eta :: GHC.Prim.State# GHC.Prim.RealWorld[OneShot] ->
                 Yesod.Core.Class.Yesod.defaultMakeLogger1 eta) -}
d081b443fa2131606923e6b73cdbd8ff
  $fYesodOlaMundo_$caddStaticContent ::
    Data.Text.Internal.Text
    -> Data.Text.Internal.Text
    -> Data.ByteString.Lazy.Internal.ByteString
    -> Yesod.Core.Types.HandlerT
         Main.OlaMundo
         GHC.Types.IO
         (GHC.Base.Maybe
            (Data.Either.Either
               Data.Text.Internal.Text
               (Yesod.Routes.Class.Route Main.OlaMundo,
                [(Data.Text.Internal.Text, Data.Text.Internal.Text)])))
  {- Arity: 5, HasNoCafRefs, Strictness: <L,A><L,A><L,A><L,A><L,U>,
     Unfolding: InlineRule (0, True, True)
                Main.$fYesodOlaMundo10
                  `cast`
                (<Data.Text.Internal.Text>_R
                 ->_R <Data.Text.Internal.Text>_R
                 ->_R <Data.ByteString.Lazy.Internal.ByteString>_R
                 ->_R Trans
                          (<Yesod.Core.Types.HandlerData
                              Main.OlaMundo (Yesod.Core.Types.MonadRoute GHC.Types.IO)>_R
                           ->_R Sym (GHC.Types.NTCo:IO[0]
                                         <GHC.Base.Maybe
                                            (Data.Either.Either
                                               Data.Text.Internal.Text
                                               (Yesod.Routes.Class.Route Main.OlaMundo,
                                                [(Data.Text.Internal.Text,
                                                  Data.Text.Internal.Text)]))>_R))
                          (Sym (Yesod.Core.Types.NTCo:HandlerT[0]
                                    <Main.OlaMundo>_N
                                    <GHC.Types.IO>_N
                                    <GHC.Base.Maybe
                                       (Data.Either.Either
                                          Data.Text.Internal.Text
                                          (Yesod.Routes.Class.Route Main.OlaMundo,
                                           [(Data.Text.Internal.Text,
                                             Data.Text.Internal.Text)]))>_N))) -}
d081b443fa2131606923e6b73cdbd8ff
  $fYesodOlaMundo_$ccleanPath ::
    Main.OlaMundo
    -> [Data.Text.Internal.Text]
    -> Data.Either.Either
         [Data.Text.Internal.Text] [Data.Text.Internal.Text]
  {- Arity: 2, Strictness: <L,A><S,U>, Inline: INLINE[0],
     Unfolding: InlineRule (2, True, True)
                (\ w :: Main.OlaMundo w1 :: [Data.Text.Internal.Text] ->
                 Main.$w$ccleanPath w1) -}
d081b443fa2131606923e6b73cdbd8ff
  $fYesodOlaMundo_$cdefaultLayout ::
    Yesod.Core.Types.WidgetT Main.OlaMundo GHC.Types.IO ()
    -> Yesod.Core.Types.HandlerT
         Main.OlaMundo GHC.Types.IO Text.Blaze.Html.Html
  {- Arity: 1, Strictness: <L,U> -}
d081b443fa2131606923e6b73cdbd8ff
  $fYesodOlaMundo_$cerrorHandler ::
    Yesod.Core.Types.ErrorResponse
    -> Yesod.Core.Types.HandlerT
         Main.OlaMundo GHC.Types.IO Yesod.Core.Types.TypedContent
d081b443fa2131606923e6b73cdbd8ff
  $fYesodOlaMundo_$cfileUpload ::
    Main.OlaMundo
    -> Network.Wai.Internal.RequestBodyLength
    -> Yesod.Core.Types.FileUpload
  {- Arity: 2, Strictness: <L,A><S,1*U>, Inline: INLINE[0],
     Unfolding: InlineRule (2, True, True)
                (\ w :: Main.OlaMundo
                   w1 :: Network.Wai.Internal.RequestBodyLength ->
                 Main.$w$cfileUpload w1) -}
d081b443fa2131606923e6b73cdbd8ff
  $fYesodOlaMundo_$cisAuthorized ::
    Yesod.Routes.Class.Route Main.OlaMundo
    -> GHC.Types.Bool
    -> Yesod.Core.Types.HandlerT
         Main.OlaMundo GHC.Types.IO Yesod.Core.Types.AuthResult
  {- Arity: 4, HasNoCafRefs, Strictness: <L,A><L,A><L,A><L,U>,
     Unfolding: InlineRule (0, True, True)
                Main.$fYesodOlaMundo36
                  `cast`
                (<Yesod.Routes.Class.Route Main.OlaMundo>_R
                 ->_R <GHC.Types.Bool>_R
                 ->_R Trans
                          (<Yesod.Core.Types.HandlerData
                              Main.OlaMundo (Yesod.Core.Types.MonadRoute GHC.Types.IO)>_R
                           ->_R Sym (GHC.Types.NTCo:IO[0] <Yesod.Core.Types.AuthResult>_R))
                          (Sym (Yesod.Core.Types.NTCo:HandlerT[0]
                                    <Main.OlaMundo>_N
                                    <GHC.Types.IO>_N
                                    <Yesod.Core.Types.AuthResult>_N))) -}
d081b443fa2131606923e6b73cdbd8ff
  $fYesodOlaMundo_$cisWriteRequest ::
    Yesod.Routes.Class.Route Main.OlaMundo
    -> Yesod.Core.Types.HandlerT
         Main.OlaMundo GHC.Types.IO GHC.Types.Bool
  {- Arity: 3, Strictness: <L,A>, Inline: INLINE[0],
     Unfolding: InlineRule (1, True, True)
                (\ w :: Yesod.Routes.Class.Route Main.OlaMundo
                   eta :: Yesod.Core.Types.HandlerData
                            Main.OlaMundo (Yesod.Core.Types.MonadRoute GHC.Types.IO)
                   eta1 :: GHC.Prim.State# GHC.Prim.RealWorld[OneShot] ->
                 Main.$fYesodOlaMundo17 eta eta1)
                  `cast`
                (<Yesod.Routes.Class.Route Main.OlaMundo>_R
                 ->_R Trans
                          (<Yesod.Core.Types.HandlerData
                              Main.OlaMundo (Yesod.Core.Types.MonadRoute GHC.Types.IO)>_R
                           ->_R Sym (GHC.Types.NTCo:IO[0] <GHC.Types.Bool>_R))
                          (Sym (Yesod.Core.Types.NTCo:HandlerT[0]
                                    <Main.OlaMundo>_N <GHC.Types.IO>_N <GHC.Types.Bool>_N))) -}
d081b443fa2131606923e6b73cdbd8ff
  $fYesodOlaMundo_$cjoinPath ::
    Main.OlaMundo
    -> Data.Text.Internal.Text
    -> [Data.Text.Internal.Text]
    -> [(Data.Text.Internal.Text, Data.Text.Internal.Text)]
    -> Data.ByteString.Builder.Internal.Builder
  {- Arity: 4, Strictness: <L,A><L,1*U(U,U,U)><L,1*U><L,1*U>,
     Inline: INLINE[0],
     Unfolding: InlineRule (4, True, True)
                (\ w :: Main.OlaMundo
                   w1 :: Data.Text.Internal.Text
                   w2 :: [Data.Text.Internal.Text]
                   w3 :: [(Data.Text.Internal.Text, Data.Text.Internal.Text)] ->
                 Main.$w$cjoinPath w1 w2 w3) -}
d081b443fa2131606923e6b73cdbd8ff
  $fYesodOlaMundo_$cmakeLogger ::
    Main.OlaMundo -> GHC.Types.IO Yesod.Core.Types.Logger
  {- Arity: 2, Strictness: <L,A>,
     Unfolding: InlineRule (0, True, True)
                Main.$fYesodOlaMundo9
                  `cast`
                (<Main.OlaMundo>_R
                 ->_R Sym (GHC.Types.NTCo:IO[0] <Yesod.Core.Types.Logger>_R)) -}
d081b443fa2131606923e6b73cdbd8ff
  $fYesodOlaMundo_$cmakeSessionBackend ::
    Main.OlaMundo
    -> GHC.Types.IO (GHC.Base.Maybe Yesod.Core.Types.SessionBackend)
  {- Arity: 2, Strictness: <L,A><L,U>,
     Unfolding: InlineRule (0, True, True)
                Main.$fYesodOlaMundo6
                  `cast`
                (<Main.OlaMundo>_R
                 ->_R Sym (GHC.Types.NTCo:IO[0]
                               <GHC.Base.Maybe Yesod.Core.Types.SessionBackend>_R)) -}
d081b443fa2131606923e6b73cdbd8ff
  $fYesodOlaMundo_$cmessageLoggerSource ::
    Main.OlaMundo
    -> Yesod.Core.Types.Logger
    -> Language.Haskell.TH.Syntax.Loc
    -> Control.Monad.Logger.LogSource
    -> Control.Monad.Logger.LogLevel
    -> System.Log.FastLogger.LogStr.LogStr
    -> GHC.Types.IO ()
  {- Arity: 7,
     Strictness: <L,A><L,U(U(A,1*U(U),1*U(U(U),U(U),A,U),1*C1(U(U,U))),U)><L,1*U(1*U,U,1*U,1*U(1*U(U),1*U(U)),A)><L,1*U(U,U,U)><S,U><L,1*U(U,C(U))><L,U>,
     Unfolding: InlineRule (0, True, True)
                Main.$fYesodOlaMundo8
                  `cast`
                (<Main.OlaMundo>_R
                 ->_R <Yesod.Core.Types.Logger>_R
                 ->_R <Language.Haskell.TH.Syntax.Loc>_R
                 ->_R <Control.Monad.Logger.LogSource>_R
                 ->_R <Control.Monad.Logger.LogLevel>_R
                 ->_R <System.Log.FastLogger.LogStr.LogStr>_R
                 ->_R Sym (GHC.Types.NTCo:IO[0] <()>_R)) -}
d081b443fa2131606923e6b73cdbd8ff
  $fYesodOlaMundo_$cshouldLogIO ::
    Main.OlaMundo
    -> Control.Monad.Logger.LogSource
    -> Control.Monad.Logger.LogLevel
    -> GHC.Types.IO GHC.Types.Bool
  {- Arity: 4, HasNoCafRefs, Strictness: <L,A><L,A><L,1*U><L,U>,
     Unfolding: InlineRule (0, True, True)
                Main.$fYesodOlaMundo2
                  `cast`
                (<Main.OlaMundo>_R
                 ->_R <Control.Monad.Logger.LogSource>_R
                 ->_R <Control.Monad.Logger.LogLevel>_R
                 ->_R Sym (GHC.Types.NTCo:IO[0] <GHC.Types.Bool>_R)) -}
d081b443fa2131606923e6b73cdbd8ff
  $fYesodOlaMundo_$cyesodMiddleware ::
    Yesod.Core.Content.ToTypedContent res =>
    Yesod.Core.Types.HandlerT Main.OlaMundo GHC.Types.IO res
    -> Yesod.Core.Types.HandlerT Main.OlaMundo GHC.Types.IO res
  {- Arity: 4,
     Strictness: <L,A><L,1*C1(C1(U(U,U)))><S(SSLSL),1*U(U,U,U,U,U)><L,U>,
     Unfolding: InlineRule (0, True, True)
                Main.$fYesodOlaMundo1
                  `cast`
                (forall res.
                 <Yesod.Core.Content.ToTypedContent res>_R
                 ->_R <Yesod.Core.Types.HandlerT Main.OlaMundo GHC.Types.IO res>_R
                 ->_R Trans
                          (<Yesod.Core.Types.HandlerData
                              Main.OlaMundo (Yesod.Core.Types.MonadRoute GHC.Types.IO)>_R
                           ->_R Sym (GHC.Types.NTCo:IO[0] <res>_R))
                          (Sym (Yesod.Core.Types.NTCo:HandlerT[0]
                                    <Main.OlaMundo>_N <GHC.Types.IO>_N <res>_N))) -}
d081b443fa2131606923e6b73cdbd8ff
  $fYesodOlaMundo_$cyesodWithInternalState ::
    Main.OlaMundo
    -> GHC.Base.Maybe (Yesod.Routes.Class.Route Main.OlaMundo)
    -> (Control.Monad.Trans.Resource.InternalState -> GHC.Types.IO a)
    -> GHC.Types.IO a
  {- Arity: 4, Strictness: <L,A><L,A><L,1*C1(C1(U))><L,U>,
     Inline: INLINE (sat-args=2),
     Unfolding: InlineRule (2, False, True)
                (\ @ a123
                   ds :: Main.OlaMundo
                   ds1 :: GHC.Base.Maybe (Yesod.Routes.Class.Route Main.OlaMundo)
                   eta1 :: Control.Monad.Trans.Resource.InternalState
                           -> GHC.Types.IO a123
                   eta2 :: GHC.Prim.State# GHC.Prim.RealWorld[OneShot] ->
                 (Control.Exception.Base.bracket
                    @ Control.Monad.Trans.Resource.InternalState
                    @ ()
                    @ a123
                    Yesod.Core.Class.Yesod.$dmyesodWithInternalState_$screateInternalState
                    Yesod.Core.Class.Yesod.$dmyesodWithInternalState_$scloseInternalState
                    eta1)
                   `cast`
                 (GHC.Types.NTCo:IO[0] <a123>_R)
                   eta2)
                  `cast`
                (forall a123.
                 <Main.OlaMundo>_R
                 ->_R <GHC.Base.Maybe (Yesod.Routes.Class.Route Main.OlaMundo)>_R
                 ->_R <Control.Monad.Trans.Resource.InternalState
                       -> GHC.Types.IO a123>_R
                 ->_R Sym (GHC.Types.NTCo:IO[0] <a123>_R)) -}
d081b443fa2131606923e6b73cdbd8ff
  $fYesodOlaMundo_$s$dmapproot ::
    Yesod.Core.Types.Approot Main.OlaMundo
  {- HasNoCafRefs,
     Unfolding: InlineRule (-1, True, True)
                (Yesod.Core.Types.ApprootRelative @ Main.OlaMundo) -}
d081b443fa2131606923e6b73cdbd8ff
  $fYesodOlaMundo_$s$dmauthRoute ::
    Main.OlaMundo
    -> GHC.Base.Maybe (Yesod.Routes.Class.Route Main.OlaMundo)
  {- Arity: 1, HasNoCafRefs, Strictness: <L,A>,
     Unfolding: InlineRule (-1, True, True)
                (\ ds :: Main.OlaMundo ->
                 GHC.Base.Nothing @ (Yesod.Routes.Class.Route Main.OlaMundo)) -}
d081b443fa2131606923e6b73cdbd8ff
  $fYesodOlaMundo_$s$dmjsLoader ::
    Main.OlaMundo -> Yesod.Core.Types.ScriptLoadPosition Main.OlaMundo
  {- Arity: 1, HasNoCafRefs, Strictness: <L,A>,
     Unfolding: InlineRule (-1, True, True)
                (\ ds :: Main.OlaMundo ->
                 Yesod.Core.Types.BottomOfBody @ Main.OlaMundo) -}
d081b443fa2131606923e6b73cdbd8ff
  $fYesodOlaMundo_$s$dmmaximumContentLength ::
    Main.OlaMundo
    -> GHC.Base.Maybe (Yesod.Routes.Class.Route Main.OlaMundo)
    -> GHC.Base.Maybe GHC.Word.Word64
  {- Arity: 2, HasNoCafRefs, Strictness: <L,A><L,A>m2,
     Unfolding: InlineRule (-1, True, False)
                (\ ds :: Main.OlaMundo
                   ds1 :: GHC.Base.Maybe (Yesod.Routes.Class.Route Main.OlaMundo) ->
                 GHC.Base.$
                   @ GHC.Word.Word64
                   @ (GHC.Base.Maybe GHC.Word.Word64)
                   (GHC.Base.Just @ GHC.Word.Word64)
                   (GHC.Word.$fNumWord64_$c*
                      (GHC.Word.$fNumWord64_$c*
                         (GHC.Word.$cfromInteger3 __integer 2)
                         (GHC.Word.$cfromInteger3 __integer 1024))
                      (GHC.Word.$cfromInteger3 __integer 1024))) -}
d081b443fa2131606923e6b73cdbd8ff
  $fYesodOlaMundo_$s$dmshouldLog ::
    Main.OlaMundo
    -> Control.Monad.Logger.LogSource
    -> Control.Monad.Logger.LogLevel
    -> GHC.Types.Bool
  {- Arity: 3, HasNoCafRefs, Strictness: <L,A><L,A><S,1*U>,
     Unfolding: InlineRule (-1, True, True)
                (\ ds :: Main.OlaMundo
                   eta1 :: Control.Monad.Logger.LogSource
                   eta2 :: Control.Monad.Logger.LogLevel ->
                 Yesod.Core.Class.Yesod.defaultShouldLog eta1 eta2) -}
d081b443fa2131606923e6b73cdbd8ff
  $fYesodOlaMundo_$s$dmurlRenderOverride ::
    Main.OlaMundo
    -> Yesod.Routes.Class.Route Main.OlaMundo
    -> GHC.Base.Maybe Data.ByteString.Builder.Internal.Builder
  {- Arity: 2, HasNoCafRefs, Strictness: <L,A><L,A>,
     Unfolding: InlineRule (-1, True, True)
                (\ ds :: Main.OlaMundo
                   ds1 :: Yesod.Routes.Class.Route Main.OlaMundo ->
                 GHC.Base.Nothing @ Data.ByteString.Builder.Internal.Builder) -}
d081b443fa2131606923e6b73cdbd8ff
  $fYesodOlaMundo_$s$fApplicativeHandlerT ::
    GHC.Base.Applicative
      (Yesod.Core.Types.HandlerT Main.OlaMundo GHC.Types.IO)
  {- HasNoCafRefs, Strictness: m, Inline: [ALWAYS] CONLIKE,
     Unfolding: DFun:.
                  @ (Yesod.Core.Types.HandlerT Main.OlaMundo GHC.Types.IO)
                  Main.$fYesodOlaMundo33
                  Main.$fYesodOlaMundo_$s$fApplicativeHandlerT_$cpure
                  (Yesod.Core.Types.$fApplicativeHandlerT_$c<*>
                     @ Main.OlaMundo
                     @ GHC.Types.IO
                     Main.$fYesodOlaMundo33
                     GHC.Base.$fMonadIO)
                  (Yesod.Core.Types.$fApplicativeHandlerT_$c*>
                     @ Main.OlaMundo
                     @ GHC.Types.IO
                     Main.$fYesodOlaMundo33
                     GHC.Base.$fMonadIO)
                  (Yesod.Core.Types.$fApplicativeHandlerT_$c<*
                     @ Main.OlaMundo
                     @ GHC.Types.IO
                     Main.$fYesodOlaMundo33
                     GHC.Base.$fMonadIO) -}
d081b443fa2131606923e6b73cdbd8ff
  $fYesodOlaMundo_$s$fApplicativeHandlerT_$cpure ::
    a -> Yesod.Core.Types.HandlerT Main.OlaMundo GHC.Types.IO a
  {- Arity: 3, HasNoCafRefs, Strictness: <L,U><L,A><L,U>,
     Unfolding: InlineRule (1, True, True)
                (\ @ a53
                   eta :: a53
                   eta1 :: Yesod.Core.Types.HandlerData
                             Main.OlaMundo (Yesod.Core.Types.MonadRoute GHC.Types.IO)
                   eta2 :: GHC.Prim.State# GHC.Prim.RealWorld[OneShot] ->
                 (GHC.Base.returnIO @ a53 eta) `cast` (GHC.Types.NTCo:IO[0] <a53>_R)
                   eta2)
                  `cast`
                (forall a53.
                 <a53>_R
                 ->_R Trans
                          (<Yesod.Core.Types.HandlerData
                              Main.OlaMundo (Yesod.Core.Types.MonadRoute GHC.Types.IO)>_R
                           ->_R Sym (GHC.Types.NTCo:IO[0] <a53>_R))
                          (Sym (Yesod.Core.Types.NTCo:HandlerT[0]
                                    <Main.OlaMundo>_N <GHC.Types.IO>_N <a53>_N))) -}
d081b443fa2131606923e6b73cdbd8ff
  $fYesodOlaMundo_$s$fMonadBasebHandlerT ::
    Control.Monad.Base.MonadBase
      GHC.Types.IO (Yesod.Core.Types.HandlerT Main.OlaMundo GHC.Types.IO)
  {- Strictness: m, Inline: [ALWAYS] CONLIKE,
     Unfolding: DFun:.
                  @ GHC.Types.IO
                  @ (Yesod.Core.Types.HandlerT Main.OlaMundo GHC.Types.IO)
                  GHC.Base.$fApplicativeIO
                  Main.$fYesodOlaMundo32
                  GHC.Base.$fMonadIO
                  Main.$fYesodOlaMundo30
                  Main.$fYesodOlaMundo_$s$fMonadBasebHandlerT_$cliftBase -}
d081b443fa2131606923e6b73cdbd8ff
  $fYesodOlaMundo_$s$fMonadBasebHandlerT_$cliftBase ::
    GHC.Types.IO α
    -> Yesod.Core.Types.HandlerT Main.OlaMundo GHC.Types.IO α
  {- Arity: 2, HasNoCafRefs, Strictness: <S,1*U><L,A>,
     Unfolding: InlineRule (1, True, False)
                (\ @ α eta :: GHC.Types.IO α ->
                 let {
                   eta1 :: GHC.Types.IO α = GHC.Base.id @ (GHC.Types.IO α) eta
                 } in
                 (\ ds :: Yesod.Core.Types.HandlerData
                            Main.OlaMundo (Yesod.Core.Types.MonadRoute GHC.Types.IO) ->
                  eta1)
                   `cast`
                 (Sym (Yesod.Core.Types.NTCo:HandlerT[0]
                           <Main.OlaMundo>_N <GHC.Types.IO>_N <α>_N))) -}
d081b443fa2131606923e6b73cdbd8ff
  $fYesodOlaMundo_$s$fMonadHandlerHandlerT ::
    Yesod.Core.Class.Handler.MonadHandler
      (Yesod.Core.Types.HandlerT Main.OlaMundo GHC.Types.IO)
  {- Strictness: m, Inline: [ALWAYS] CONLIKE,
     Unfolding: DFun:.
                  @ (Yesod.Core.Types.HandlerT Main.OlaMundo GHC.Types.IO)
                  Main.$fYesodOlaMundo28
                  (Yesod.Core.Class.Handler.$fMonadHandlerHandlerT_$cliftHandlerT
                     @ Main.OlaMundo
                     @ GHC.Types.IO
                     Main.$fYesodOlaMundo28
                     Main.$fYesodOlaMundo27) -}
d081b443fa2131606923e6b73cdbd8ff
  $fYesodOlaMundo_$s$fMonadHandlerT ::
    GHC.Base.Monad
      (Yesod.Core.Types.HandlerT Main.OlaMundo GHC.Types.IO)
  {- Strictness: m, Inline: [ALWAYS] CONLIKE,
     Unfolding: DFun:.
                  @ (Yesod.Core.Types.HandlerT Main.OlaMundo GHC.Types.IO)
                  Main.$fYesodOlaMundo32
                  (Yesod.Core.Types.$fMonadHandlerT_$c>>=
                     @ Main.OlaMundo
                     @ GHC.Types.IO
                     Main.$fYesodOlaMundo32
                     GHC.Base.$fMonadIO)
                  (Yesod.Core.Types.$fMonadHandlerT_$c>>
                     @ Main.OlaMundo
                     @ GHC.Types.IO
                     Main.$fYesodOlaMundo32
                     GHC.Base.$fMonadIO)
                  Main.$fYesodOlaMundo_$s$fApplicativeHandlerT_$cpure
                  Main.$fYesodOlaMundo31 -}
d081b443fa2131606923e6b73cdbd8ff
  $fYesodOlaMundo_$s$fMonadIOHandlerT ::
    Control.Monad.IO.Class.MonadIO
      (Yesod.Core.Types.HandlerT Main.OlaMundo GHC.Types.IO)
  {- Strictness: m, Inline: [ALWAYS] CONLIKE,
     Unfolding: DFun:.
                  @ (Yesod.Core.Types.HandlerT Main.OlaMundo GHC.Types.IO)
                  Main.$fYesodOlaMundo30
                  Main.$fYesodOlaMundo_$s$fMonadBasebHandlerT_$cliftBase -}
d081b443fa2131606923e6b73cdbd8ff
  $fYesodOlaMundo_$s$fMonadResourceHandlerT ::
    Control.Monad.Trans.Resource.Internal.MonadResource
      (Yesod.Core.Types.HandlerT Main.OlaMundo GHC.Types.IO)
  {- Strictness: m, Inline: [ALWAYS] CONLIKE,
     Unfolding: DFun:.
                  @ (Yesod.Core.Types.HandlerT Main.OlaMundo GHC.Types.IO)
                  Main.$fYesodOlaMundo35
                  Main.$fYesodOlaMundo34
                  Main.$fYesodOlaMundo32
                  Main.$fYesodOlaMundo29
                  (Yesod.Core.Types.$fMonadResourceHandlerT_$cliftResourceT
                     @ Main.OlaMundo
                     @ GHC.Types.IO
                     Main.$fYesodOlaMundo35
                     Main.$fYesodOlaMundo34
                     Main.$fYesodOlaMundo32
                     Main.$fYesodOlaMundo29
                     Control.Monad.IO.Class.$fMonadIOIO
                     Control.Monad.Base.$fMonadBaseIOIO
                     Control.Monad.Catch.$fMonadThrowIO) -}
d081b443fa2131606923e6b73cdbd8ff
  $fYesodOlaMundo_$s$fMonadThrowHandlerT ::
    Control.Monad.Catch.MonadThrow
      (Yesod.Core.Types.HandlerT Main.OlaMundo GHC.Types.IO)
  {- Strictness: m, Inline: [ALWAYS] CONLIKE,
     Unfolding: DFun:.
                  @ (Yesod.Core.Types.HandlerT Main.OlaMundo GHC.Types.IO)
                  Main.$fYesodOlaMundo30
                  Main.$fYesodOlaMundo_$s$fMonadThrowHandlerT_$cthrowM -}
d081b443fa2131606923e6b73cdbd8ff
  $fYesodOlaMundo_$s$fMonadThrowHandlerT_$cthrowM ::
    GHC.Exception.Exception e =>
    e -> Yesod.Core.Types.HandlerT Main.OlaMundo GHC.Types.IO a
  {- Arity: 4, HasNoCafRefs,
     Strictness: <B,1*U(A,A,1*C1(U),A,A)><B,U><B,A><B,U>b,
     Unfolding: InlineRule (1, True, True)
                (\ @ e
                   @ a53
                   eta :: GHC.Exception.Exception e
                   x1 :: e
                   eta1 :: Yesod.Core.Types.HandlerData
                             Main.OlaMundo (Yesod.Core.Types.MonadRoute GHC.Types.IO)
                   eta2 :: GHC.Prim.State# GHC.Prim.RealWorld[OneShot] ->
                 (GHC.IO.throwIO @ e @ a53 eta x1)
                   `cast`
                 (GHC.Types.NTCo:IO[0] <a53>_R)
                   eta2)
                  `cast`
                (forall e a53.
                 <GHC.Exception.Exception e>_R
                 ->_R <e>_R
                 ->_R Trans
                          (<Yesod.Core.Types.HandlerData
                              Main.OlaMundo (Yesod.Core.Types.MonadRoute GHC.Types.IO)>_R
                           ->_R Sym (GHC.Types.NTCo:IO[0] <a53>_R))
                          (Sym (Yesod.Core.Types.NTCo:HandlerT[0]
                                    <Main.OlaMundo>_N <GHC.Types.IO>_N <a53>_N))) -}
238a8a19973147604a8d77b4da3aa0dc
  $w$ccleanPath ::
    [Data.Text.Internal.Text]
    -> Data.Either.Either
         [Data.Text.Internal.Text] [Data.Text.Internal.Text]
  {- Arity: 1, Strictness: <S,U>, Inline: [0],
     Unfolding: (\ w :: [Data.Text.Internal.Text] ->
                 let {
                   corrected :: [Data.Text.Internal.Text]
                   = GHC.List.filter
                       @ Data.Text.Internal.Text
                       Main.$fYesodOlaMundo16
                       w
                 } in
                 case GHC.Classes.$fEq[]_$c==
                        @ Data.Text.Internal.Text
                        Data.Text.$fEqText
                        corrected
                        w of wild {
                   GHC.Types.False
                   -> Data.Either.Left
                        @ [Data.Text.Internal.Text]
                        @ [Data.Text.Internal.Text]
                        corrected
                   GHC.Types.True
                   -> Data.Either.Right
                        @ [Data.Text.Internal.Text]
                        @ [Data.Text.Internal.Text]
                        (GHC.Base.map
                           @ Data.Text.Internal.Text
                           @ Data.Text.Internal.Text
                           Main.$fYesodOlaMundo14
                           w) }) -}
668b5c18d1b4b916655576368c1d8063
  $w$cfileUpload ::
    Network.Wai.Internal.RequestBodyLength
    -> Yesod.Core.Types.FileUpload
  {- Arity: 1, Strictness: <S,1*U>, Inline: [0],
     Unfolding: (\ w :: Network.Wai.Internal.RequestBodyLength ->
                 case w of wild {
                   Network.Wai.Internal.ChunkedBody -> Main.$fYesodOlaMundo5
                   Network.Wai.Internal.KnownLength size
                   -> case size of wild1 { GHC.Word.W64# a53 ->
                      case GHC.Prim.tagToEnum#
                             @ GHC.Types.Bool
                             (GHC.Prim.leWord# a53 __word 50000) of wild2 {
                        GHC.Types.False -> Main.$fYesodOlaMundo5
                        GHC.Types.True -> Main.$fYesodOlaMundo3 } } }) -}
8948a424b23ff2b89c3cae51c3e830e8
  $w$cjoinPath ::
    Data.Text.Internal.Text
    -> [Data.Text.Internal.Text]
    -> [(Data.Text.Internal.Text, Data.Text.Internal.Text)]
    -> Data.ByteString.Builder.Internal.Builder
  {- Arity: 3, Strictness: <L,1*U(U,U,U)><L,1*U><L,1*U>, Inline: [0],
     Unfolding: (\ w :: Data.Text.Internal.Text
                   w1 :: [Data.Text.Internal.Text]
                   w2 :: [(Data.Text.Internal.Text, Data.Text.Internal.Text)] ->
                 let {
                   a53 :: [GHC.Types.Char]
                   = case w of wild { Data.Text.Internal.Text dt dt1 dt2 ->
                     let {
                       a54 :: GHC.Prim.Int# = GHC.Prim.+# dt1 dt2
                     } in
                     letrec {
                       $wunfold :: GHC.Prim.Int# -> [GHC.Types.Char]
                         {- Arity: 1, Strictness: <L,U>, Inline: [0] -}
                       = \ ww :: GHC.Prim.Int# ->
                         case GHC.Prim.tagToEnum#
                                @ GHC.Types.Bool
                                (GHC.Prim.>=# ww a54) of wild1 {
                           GHC.Types.False
                           -> case GHC.Prim.indexWord16Array# dt ww of r# { DEFAULT ->
                              case GHC.Prim.tagToEnum#
                                     @ GHC.Types.Bool
                                     (GHC.Prim.geWord# r# __word 55296) of wild2 {
                                GHC.Types.False
                                -> GHC.Types.:
                                     @ GHC.Types.Char
                                     (GHC.Types.C# (GHC.Prim.chr# (GHC.Prim.word2Int# r#)))
                                     ($wunfold (GHC.Prim.+# ww 1))
                                GHC.Types.True
                                -> case GHC.Prim.tagToEnum#
                                          @ GHC.Types.Bool
                                          (GHC.Prim.leWord# r# __word 56319) of wild3 {
                                     GHC.Types.False
                                     -> GHC.Types.:
                                          @ GHC.Types.Char
                                          (GHC.Types.C# (GHC.Prim.chr# (GHC.Prim.word2Int# r#)))
                                          ($wunfold (GHC.Prim.+# ww 1))
                                     GHC.Types.True
                                     -> case GHC.Prim.indexWord16Array#
                                               dt
                                               (GHC.Prim.+# ww 1) of r#1 { DEFAULT ->
                                        GHC.Types.:
                                          @ GHC.Types.Char
                                          (GHC.Types.C#
                                             (GHC.Prim.chr#
                                                (GHC.Prim.+#
                                                   (GHC.Prim.+#
                                                      (GHC.Prim.uncheckedIShiftL#
                                                         (GHC.Prim.-# (GHC.Prim.word2Int# r#) 55296)
                                                         10)
                                                      (GHC.Prim.-# (GHC.Prim.word2Int# r#1) 56320))
                                                   65536)))
                                          ($wunfold (GHC.Prim.+# ww 2)) } } } }
                           GHC.Types.True -> GHC.Types.[] @ GHC.Types.Char }
                     } in
                     $wunfold dt1 }
                 } in
                 let {
                   ds1 :: Data.ByteString.Builder.Internal.Builder
                   = case GHC.Base.map
                            @ (Data.Text.Internal.Text, Data.Text.Internal.Text)
                            @ (Data.ByteString.Internal.ByteString,
                               GHC.Base.Maybe Data.ByteString.Internal.ByteString)
                            Main.$fYesodOlaMundo13
                            w2 of wild {
                       []
                       -> case w1 of wild1 {
                            []
                            -> Network.HTTP.Types.URI.encodePathSegments Main.$fYesodOlaMundo12
                            : ds2 ds3
                            -> Network.HTTP.Types.URI.encodePathSegments
                                 (GHC.Base.map
                                    @ Data.Text.Internal.Text
                                    @ Data.Text.Internal.Text
                                    Main.$fYesodOlaMundo11
                                    wild1) }
                       : ipv ipv1
                       -> let {
                            ds2 :: Data.ByteString.Builder.Internal.Builder
                            = case w1 of wild1 {
                                []
                                -> Network.HTTP.Types.URI.encodePathSegments Main.$fYesodOlaMundo12
                                : ds3 ds4
                                -> Network.HTTP.Types.URI.encodePathSegments
                                     (GHC.Base.map
                                        @ Data.Text.Internal.Text
                                        @ Data.Text.Internal.Text
                                        Main.$fYesodOlaMundo11
                                        wild1) }
                          } in
                          let {
                            ds3 :: Data.ByteString.Builder.Internal.Builder
                            = case ipv of ww { (,) ww1 ww2 ->
                              Network.HTTP.Types.URI.$wgo
                                Network.HTTP.Types.URI.encodePath1
                                  `cast`
                                (Sym (Data.ByteString.Builder.Internal.NTCo:Builder[0]))
                                ww1
                                ww2 }
                          } in
                          let {
                            ds4 :: Data.ByteString.Builder.Internal.Builder
                            = Network.HTTP.Types.URI.encodePath_go ipv1
                          } in
                          (\ @ r eta :: Data.ByteString.Builder.Internal.BuildStep r ->
                           ds2 `cast` (Data.ByteString.Builder.Internal.NTCo:Builder[0])
                             @ r
                             (ds3 `cast` (Data.ByteString.Builder.Internal.NTCo:Builder[0])
                                @ r
                                (ds4 `cast` (Data.ByteString.Builder.Internal.NTCo:Builder[0])
                                   @ r
                                   eta)))
                            `cast`
                          (Sym (Data.ByteString.Builder.Internal.NTCo:Builder[0])) }
                 } in
                 (\ @ r eta :: Data.ByteString.Builder.Internal.BuildStep r ->
                  let {
                    w3 :: Data.ByteString.Builder.Internal.BufferRange
                          -> GHC.Types.IO (Data.ByteString.Builder.Internal.BuildSignal r)
                    = ds1 `cast` (Data.ByteString.Builder.Internal.NTCo:Builder[0])
                        @ r
                        eta
                  } in
                  \ w4 :: Data.ByteString.Builder.Internal.BufferRange
                    w5 :: GHC.Prim.State# GHC.Prim.RealWorld[OneShot] ->
                  case w4 of ww { Data.ByteString.Builder.Internal.BufferRange ww1 ww2 ->
                  Main.$wa4 @ r a53 w3 ww1 ww2 w5 })
                   `cast`
                 (Trans
                      (forall r.
                       <Data.ByteString.Builder.Internal.BuildStep r>_R
                       ->_R <Data.ByteString.Builder.Internal.BufferRange>_R
                       ->_R Sym (GHC.Types.NTCo:IO[0]
                                     <Data.ByteString.Builder.Internal.BuildSignal r>_R))
                      (Sym (Data.ByteString.Builder.Internal.NTCo:Builder[0])))) -}
d081b443fa2131606923e6b73cdbd8ff
  $w$cyesodDispatch ::
    Yesod.Core.Types.YesodRunnerEnv Main.OlaMundo
    -> Network.HTTP.Types.Method.Method
    -> Network.HTTP.Types.Version.HttpVersion
    -> Data.ByteString.Internal.ByteString
    -> Data.ByteString.Internal.ByteString
    -> Network.HTTP.Types.Header.RequestHeaders
    -> GHC.Types.Bool
    -> Network.Socket.Types.SockAddr
    -> [Data.Text.Internal.Text]
    -> Network.HTTP.Types.URI.Query
    -> GHC.Types.IO Data.ByteString.Internal.ByteString
    -> Data.Vault.Lazy.Vault
    -> Network.Wai.Internal.RequestBodyLength
    -> GHC.Base.Maybe Data.ByteString.Internal.ByteString
    -> GHC.Base.Maybe Data.ByteString.Internal.ByteString
    -> (Network.Wai.Internal.Response
        -> GHC.Types.IO Network.Wai.Internal.ResponseReceived)
    -> GHC.Types.IO Network.Wai.Internal.ResponseReceived
  {- Arity: 15,
     Strictness: <L,U(U,U,U,U,C(U(U,1*U(U,U,U))))><L,U(U,U,U,U)><L,U><L,U><L,U><L,U><L,U><L,U><S,U><L,U><L,U><L,U><L,U><L,U><L,U>,
     Inline: [0] -}
d5f4fae27a3ad563dd26e5606b95ec25
  $w$sgo5 ::
    GHC.Prim.ByteArray#
    -> GHC.Prim.Int#
    -> GHC.Prim.Int#
    -> Data.Set.Base.Set Data.Text.Internal.Text
    -> Data.Set.Base.Set Data.Text.Internal.Text
  {- Arity: 4, Strictness: <L,U><L,U><L,U><S,1*U>, Inline: [0] -}
d081b443fa2131606923e6b73cdbd8ff
  $wa ::
    (Yesod.Routes.Class.Route Main.OlaMundo
     -> Text.ParserCombinators.ReadP.P b1)
    -> (# GHC.Base.String -> Text.ParserCombinators.ReadP.P b1 #)
  {- Arity: 1, Strictness: <L,1*C1(U)>, Inline: [0],
     Unfolding: (\ @ b1
                   w :: Yesod.Routes.Class.Route Main.OlaMundo
                        -> Text.ParserCombinators.ReadP.P b1 ->
                 let {
                   lvl78 :: Text.ParserCombinators.ReadP.P b1
                   = let {
                       lvl79 :: Text.ParserCombinators.ReadP.P b1
                       = w Main.HomeR `cast` (Sub (Sym (Main.TFCo:R:RouteOlaMundo[0])))
                     } in
                     Text.Read.Lex.expect2
                       @ b1
                       (\ a98 :: Text.Read.Lex.Lexeme ->
                        case a98 of wild {
                          DEFAULT -> Text.ParserCombinators.ReadP.Fail @ b1
                          Text.Read.Lex.Ident a53
                          -> case GHC.Base.eqString a53 Main.$fReadRoute4 of wild1 {
                               GHC.Types.False -> Text.ParserCombinators.ReadP.Fail @ b1
                               GHC.Types.True -> lvl79 } })
                 } in
                 let {
                   k :: () -> Text.ParserCombinators.ReadP.P b1
                     {- Arity: 1, Strictness: <L,A>, Inline: INLINE[0],
                        Unfolding: InlineRule (1, True, True) (\ w2 :: () -> lvl78) -}
                   = \ w2 :: () -> lvl78
                 } in
                 (# \ a98 :: GHC.Base.String ->
                    (Text.ParserCombinators.ReadP.skipSpaces_skip a98)
                      `cast`
                    (Text.ParserCombinators.ReadP.NTCo:ReadP[0] <()>_R)
                      @ b1
                      k #)) -}
d081b443fa2131606923e6b73cdbd8ff
  $wa1 ::
    Yesod.Core.Types.HandlerT Main.OlaMundo GHC.Types.IO res
    -> Yesod.Core.Types.YesodRequest
    -> Yesod.Core.Types.RunHandlerEnv Main.OlaMundo
    -> GHC.Prim.MutVar# GHC.Prim.RealWorld Yesod.Core.Types.GHState
    -> (Yesod.Routes.Class.Route Main.OlaMundo
        -> Yesod.Core.Types.MonadRoute GHC.Types.IO)
    -> GHC.Prim.MutVar#
         GHC.Prim.RealWorld Control.Monad.Trans.Resource.Internal.ReleaseMap
    -> GHC.Prim.State# GHC.Prim.RealWorld
    -> (# GHC.Prim.State# GHC.Prim.RealWorld, res #)
  {- Arity: 7,
     Strictness: <L,1*C1(C1(U(U,U)))><S,U><S,U><L,U><S,U><L,U><L,U>,
     Inline: [0] -}
d72481f20d8e9f1aeb52a2f17e3d7e13
  $wa2 ::
    GHC.Prim.State# GHC.Prim.RealWorld
    -> (# GHC.Prim.State# GHC.Prim.RealWorld,
          GHC.Base.Maybe Yesod.Core.Types.SessionBackend #)
  {- Arity: 1, Strictness: <L,U>, Inline: [0],
     Unfolding: (\ w :: GHC.Prim.State# GHC.Prim.RealWorld[OneShot] ->
                 case Web.ClientSession.getDefaultKey2
                        Web.ClientSession.defaultKeyFile
                        w of ds1 { (#,#) ipv ipv1 ->
                 case Yesod.Core.Internal.Session.clientSessionDateCacher1
                        Main.$fYesodOlaMundo7
                          `cast`
                        (Trans
                             (Sym (Data.Fixed.NTCo:Fixed[0] <Data.Fixed.E12>_P))
                             (Sym (Data.Time.Clock.UTC.NTCo:NominalDiffTime[0])))
                        ipv of ds2 { (#,#) ipv2 ipv3 ->
                 case ipv3 of wild { (,) getCachedDate _closeDateCacher ->
                 (# ipv2,
                    GHC.Base.Just
                      @ Yesod.Core.Types.SessionBackend
                      (Yesod.Core.Class.Yesod.defaultClientSessionBackend3
                         ipv1
                         getCachedDate
                         Yesod.Core.Class.Yesod.defaultClientSessionBackend2)
                        `cast`
                      (Trans
                           (<Network.Wai.Internal.Request>_R
                            ->_R Sym (GHC.Types.NTCo:IO[0]
                                          <(Data.Map.Base.Map
                                              Data.Text.Internal.Text
                                              Data.ByteString.Internal.ByteString,
                                            Yesod.Core.Types.SessionMap
                                            -> GHC.Types.IO [Yesod.Core.Types.Header])>_R))
                           (Sym (Yesod.Core.Types.NTCo:SessionBackend[0]))) #) } } }) -}
039f5defb3a2b824b1e509e56888c8ed
  $wa3 ::
    Yesod.Core.Types.Logger
    -> Language.Haskell.TH.Syntax.Loc
    -> Control.Monad.Logger.LogSource
    -> Control.Monad.Logger.LogLevel
    -> System.Log.FastLogger.LogStr.LogStr
    -> GHC.Prim.State# GHC.Prim.RealWorld
    -> (# GHC.Prim.State# GHC.Prim.RealWorld, () #)
  {- Arity: 6,
     Strictness: <L,U(U(A,1*U(U),1*U(U(U),U(U),A,U),1*C1(U(U,U))),U)><L,1*U(1*U,U,1*U,1*U(1*U(U),1*U(U)),A)><L,1*U(U,U,U)><S,U><L,1*U(U,C(U))><L,U>,
     Inline: [0],
     Unfolding: (\ w :: Yesod.Core.Types.Logger
                   w1 :: Language.Haskell.TH.Syntax.Loc
                   w2 :: Control.Monad.Logger.LogSource
                   w3 :: Control.Monad.Logger.LogLevel
                   w4 :: System.Log.FastLogger.LogStr.LogStr
                   w5 :: GHC.Prim.State# GHC.Prim.RealWorld[OneShot] ->
                 let {
                   $j :: GHC.Prim.Void#
                         -> (# GHC.Prim.State# GHC.Prim.RealWorld, () #)
                     {- Arity: 1, Strictness: <L,A> -}
                   = \ w6 :: GHC.Prim.Void#[OneShot] ->
                     case Yesod.Core.Class.Yesod.defaultMessageLoggerSource2
                            (Yesod.Core.Types.loggerDate w)
                            w1
                            w2
                            w3
                            w4
                            w5 of ds2 { (#,#) ipv2 ipv3 ->
                     Yesod.Core.Types.loggerPutStr1 w ipv3 ipv2 }
                 } in
                 case w3 of wild {
                   Control.Monad.Logger.LevelDebug -> (# w5, GHC.Tuple.() #)
                   Control.Monad.Logger.LevelInfo -> $j GHC.Prim.void#
                   Control.Monad.Logger.LevelWarn -> $j GHC.Prim.void#
                   Control.Monad.Logger.LevelError -> $j GHC.Prim.void#
                   Control.Monad.Logger.LevelOther a123 -> $j GHC.Prim.void# }) -}
38c80e1f604dc30ac69c61c2118bef50
  $wa4 ::
    [GHC.Types.Char]
    -> (Data.ByteString.Builder.Internal.BufferRange
        -> GHC.Types.IO (Data.ByteString.Builder.Internal.BuildSignal r))
    -> GHC.Prim.Addr#
    -> GHC.Prim.Addr#
    -> GHC.Prim.State# GHC.Prim.RealWorld
    -> (# GHC.Prim.State# GHC.Prim.RealWorld,
          Data.ByteString.Builder.Internal.BuildSignal r #)
  {- Arity: 5, HasNoCafRefs,
     Strictness: <S,1*U><L,C(C1(U(U,U)))><L,U><L,U><L,U>, Inline: [0] -}
b417cdc694db81d714a3f351cc5c05e4
  type Handler = Yesod.Core.Types.HandlerT Main.OlaMundo GHC.Types.IO
d081b443fa2131606923e6b73cdbd8ff
  data OlaMundo = OlaMundo
    Promotable
d081b443fa2131606923e6b73cdbd8ff
  data instance Yesod.Routes.Class.Route Main.OlaMundo = HomeR
    RecFlag: Recursive
d081b443fa2131606923e6b73cdbd8ff
  axiom TFCo:R:RouteOlaMundo::
      Yesod.Routes.Class.Route Main.OlaMundo = Main.R:RouteOlaMundo
b8d232bd117406686ba30c24b0b3aec5
  type Widget =
    Yesod.Core.Types.WidgetT Main.OlaMundo GHC.Types.IO ()
6c26ab71b20ea5a91f4ce0e8ca5b06bc
  main :: GHC.Types.IO ()
  {- Arity: 1,
     Unfolding: InlineRule (0, True, True)
                Main.main1 `cast` (Sym (GHC.Types.NTCo:IO[0] <()>_R)) -}
abaa3d3e04e7616cb51917f9db6cf731
  main1 ::
    GHC.Prim.State# GHC.Prim.RealWorld
    -> (# GHC.Prim.State# GHC.Prim.RealWorld, () #)
  {- Arity: 1,
     Unfolding: (Yesod.Core.Dispatch.warp1
                   @ Main.OlaMundo
                   Main.$fYesodDispatchOlaMundo
                   Main.main2
                   Main.OlaMundo) -}
c570853c265a1948cbf6d47b1d90bd6a
  main2 :: GHC.Types.Int
  {- HasNoCafRefs, Strictness: m, Unfolding: (GHC.Types.I# 3000) -}
006cadce673cf6bae7902f059bd3a68b
  main3 ::
    GHC.Prim.State# GHC.Prim.RealWorld
    -> (# GHC.Prim.State# GHC.Prim.RealWorld, () #)
  {- Arity: 1,
     Unfolding: (GHC.TopHandler.runMainIO1
                   @ ()
                   Main.main1 `cast` (Sym (GHC.Types.NTCo:IO[0] <()>_R))) -}
instance GHC.Classes.Eq [Yesod.Routes.Class.Route] = Main.$fEqRoute
instance Yesod.Routes.Class.ParseRoute [Main.OlaMundo]
  = Main.$fParseRouteOlaMundo
instance GHC.Read.Read [Yesod.Routes.Class.Route]
  = Main.$fReadRoute
instance Yesod.Routes.Class.RenderRoute [Main.OlaMundo]
  = Main.$fRenderRouteOlaMundo
instance Yesod.Routes.Class.RouteAttrs [Main.OlaMundo]
  = Main.$fRouteAttrsOlaMundo
instance GHC.Show.Show [Yesod.Routes.Class.Route]
  = Main.$fShowRoute
instance Yesod.Core.Class.Dispatch.YesodDispatch [Main.OlaMundo]
  = Main.$fYesodDispatchOlaMundo
instance Yesod.Core.Class.Yesod.Yesod [Main.OlaMundo]
  = Main.$fYesodOlaMundo
family instance Yesod.Routes.Class.Route [Main.OlaMundo]
  = Main.TFCo:R:RouteOlaMundo
"SPEC/Main $dmapproot @ OlaMundo" [ALWAYS] forall $dYesod :: Yesod.Core.Class.Yesod.Yesod
                                                               Main.OlaMundo
  Yesod.Core.Class.Yesod.$dmapproot @ Main.OlaMundo $dYesod
  = Main.$fYesodOlaMundo_$s$dmapproot
"SPEC/Main $dmauthRoute @ OlaMundo" [ALWAYS] forall $dYesod :: Yesod.Core.Class.Yesod.Yesod
                                                                 Main.OlaMundo
  Yesod.Core.Class.Yesod.$dmauthRoute @ Main.OlaMundo $dYesod
  = Main.$fYesodOlaMundo_$s$dmauthRoute
"SPEC/Main $dmjsLoader @ OlaMundo" [ALWAYS] forall $dYesod :: Yesod.Core.Class.Yesod.Yesod
                                                                Main.OlaMundo
  Yesod.Core.Class.Yesod.$dmjsLoader @ Main.OlaMundo $dYesod
  = Main.$fYesodOlaMundo_$s$dmjsLoader
"SPEC/Main $dmmaximumContentLength @ OlaMundo" [ALWAYS] forall $dYesod :: Yesod.Core.Class.Yesod.Yesod
                                                                            Main.OlaMundo
  Yesod.Core.Class.Yesod.$dmmaximumContentLength @ Main.OlaMundo
                                                 $dYesod
  = Main.$fYesodOlaMundo_$s$dmmaximumContentLength
"SPEC/Main $dmreadsPrec @ (Route OlaMundo)" [ALWAYS] forall $dRead :: GHC.Read.Read
                                                                        (Yesod.Routes.Class.Route
                                                                           Main.OlaMundo)
  GHC.Read.$dmreadsPrec @ (Yesod.Routes.Class.Route Main.OlaMundo)
                        $dRead
  = Main.$fReadRoute_$s$dmreadsPrec
"SPEC/Main $dmshouldLog @ OlaMundo" [ALWAYS] forall $dYesod :: Yesod.Core.Class.Yesod.Yesod
                                                                 Main.OlaMundo
  Yesod.Core.Class.Yesod.$dmshouldLog @ Main.OlaMundo $dYesod
  = Main.$fYesodOlaMundo_$s$dmshouldLog
"SPEC/Main $dmurlRenderOverride @ OlaMundo" [ALWAYS] forall $dYesod :: Yesod.Core.Class.Yesod.Yesod
                                                                         Main.OlaMundo
  Yesod.Core.Class.Yesod.$dmurlRenderOverride @ Main.OlaMundo $dYesod
  = Main.$fYesodOlaMundo_$s$dmurlRenderOverride
"SPEC/Main $fApplicativeHandlerT @ OlaMundo @ IO" [ALWAYS] forall $dFunctor :: GHC.Base.Functor
                                                                                 (Yesod.Core.Types.HandlerT
                                                                                    Main.OlaMundo
                                                                                    GHC.Types.IO)
                                                                  $dMonad :: GHC.Base.Monad
                                                                               GHC.Types.IO
  Yesod.Core.Types.$fApplicativeHandlerT @ Main.OlaMundo
                                         @ GHC.Types.IO
                                         $dFunctor
                                         $dMonad
  = Main.$fYesodOlaMundo_$s$fApplicativeHandlerT
"SPEC/Main $fApplicativeHandlerT_$cpure @ OlaMundo @ IO" [ALWAYS] forall $dFunctor :: GHC.Base.Functor
                                                                                        (Yesod.Core.Types.HandlerT
                                                                                           Main.OlaMundo
                                                                                           GHC.Types.IO)
                                                                         $dMonad :: GHC.Base.Monad
                                                                                      GHC.Types.IO
  Yesod.Core.Types.$fApplicativeHandlerT_$cpure @ Main.OlaMundo
                                                @ GHC.Types.IO
                                                $dFunctor
                                                $dMonad
  = Main.$fYesodOlaMundo_$s$fApplicativeHandlerT_$cpure
"SPEC/Main $fMonadBasebHandlerT @ IO @ OlaMundo @ IO" [ALWAYS] forall $dApplicative :: GHC.Base.Applicative
                                                                                         GHC.Types.IO
                                                                      $dApplicative1 :: GHC.Base.Applicative
                                                                                          (Yesod.Core.Types.HandlerT
                                                                                             Main.OlaMundo
                                                                                             GHC.Types.IO)
                                                                      $dMonad :: GHC.Base.Monad
                                                                                   GHC.Types.IO
                                                                      $dMonad1 :: GHC.Base.Monad
                                                                                    (Yesod.Core.Types.HandlerT
                                                                                       Main.OlaMundo
                                                                                       GHC.Types.IO)
                                                                      $dMonadBase :: Control.Monad.Base.MonadBase
                                                                                       GHC.Types.IO
                                                                                       GHC.Types.IO
  Yesod.Core.Types.$fMonadBasebHandlerT @ GHC.Types.IO
                                        @ Main.OlaMundo
                                        @ GHC.Types.IO
                                        $dApplicative
                                        $dApplicative1
                                        $dMonad
                                        $dMonad1
                                        $dMonadBase
  = Main.$fYesodOlaMundo_$s$fMonadBasebHandlerT
"SPEC/Main $fMonadBasebHandlerT_$cliftBase @ IO @ OlaMundo @ IO" [ALWAYS] forall $dApplicative :: GHC.Base.Applicative
                                                                                                    GHC.Types.IO
                                                                                 $dApplicative1 :: GHC.Base.Applicative
                                                                                                     (Yesod.Core.Types.HandlerT
                                                                                                        Main.OlaMundo
                                                                                                        GHC.Types.IO)
                                                                                 $dMonad :: GHC.Base.Monad
                                                                                              GHC.Types.IO
                                                                                 $dMonad1 :: GHC.Base.Monad
                                                                                               (Yesod.Core.Types.HandlerT
                                                                                                  Main.OlaMundo
                                                                                                  GHC.Types.IO)
                                                                                 $dMonadBase :: Control.Monad.Base.MonadBase
                                                                                                  GHC.Types.IO
                                                                                                  GHC.Types.IO
  Yesod.Core.Types.$fMonadBasebHandlerT_$cliftBase @ GHC.Types.IO
                                                   @ Main.OlaMundo
                                                   @ GHC.Types.IO
                                                   $dApplicative
                                                   $dApplicative1
                                                   $dMonad
                                                   $dMonad1
                                                   $dMonadBase
  = Main.$fYesodOlaMundo_$s$fMonadBasebHandlerT_$cliftBase
"SPEC/Main $fMonadHandlerHandlerT @ OlaMundo @ IO" [ALWAYS] forall $dMonadResource :: Control.Monad.Trans.Resource.Internal.MonadResource
                                                                                        (Yesod.Core.Types.HandlerT
                                                                                           Main.OlaMundo
                                                                                           GHC.Types.IO)
                                                                   tup :: Control.Monad.Trans.Resource.MonadResourceBase
                                                                            GHC.Types.IO
  Yesod.Core.Class.Handler.$fMonadHandlerHandlerT @ Main.OlaMundo
                                                  @ GHC.Types.IO
                                                  $dMonadResource
                                                  tup
  = Main.$fYesodOlaMundo_$s$fMonadHandlerHandlerT
"SPEC/Main $fMonadHandlerT @ OlaMundo @ IO" [ALWAYS] forall $dApplicative :: GHC.Base.Applicative
                                                                               (Yesod.Core.Types.HandlerT
                                                                                  Main.OlaMundo
                                                                                  GHC.Types.IO)
                                                            $dMonad :: GHC.Base.Monad GHC.Types.IO
  Yesod.Core.Types.$fMonadHandlerT @ Main.OlaMundo
                                   @ GHC.Types.IO
                                   $dApplicative
                                   $dMonad
  = Main.$fYesodOlaMundo_$s$fMonadHandlerT
"SPEC/Main $fMonadIOHandlerT @ OlaMundo @ IO" [ALWAYS] forall $dMonad :: GHC.Base.Monad
                                                                           (Yesod.Core.Types.HandlerT
                                                                              Main.OlaMundo
                                                                              GHC.Types.IO)
                                                              $dMonadIO :: Control.Monad.IO.Class.MonadIO
                                                                             GHC.Types.IO
  Yesod.Core.Types.$fMonadIOHandlerT @ Main.OlaMundo
                                     @ GHC.Types.IO
                                     $dMonad
                                     $dMonadIO
  = Main.$fYesodOlaMundo_$s$fMonadIOHandlerT
"SPEC/Main $fMonadResourceHandlerT @ OlaMundo @ IO" [ALWAYS] forall $dMonadThrow :: Control.Monad.Catch.MonadThrow
                                                                                      (Yesod.Core.Types.HandlerT
                                                                                         Main.OlaMundo
                                                                                         GHC.Types.IO)
                                                                    $dMonadIO :: Control.Monad.IO.Class.MonadIO
                                                                                   (Yesod.Core.Types.HandlerT
                                                                                      Main.OlaMundo
                                                                                      GHC.Types.IO)
                                                                    $dApplicative :: GHC.Base.Applicative
                                                                                       (Yesod.Core.Types.HandlerT
                                                                                          Main.OlaMundo
                                                                                          GHC.Types.IO)
                                                                    $dMonadBase :: Control.Monad.Base.MonadBase
                                                                                     GHC.Types.IO
                                                                                     (Yesod.Core.Types.HandlerT
                                                                                        Main.OlaMundo
                                                                                        GHC.Types.IO)
                                                                    $dMonadIO1 :: Control.Monad.IO.Class.MonadIO
                                                                                    GHC.Types.IO
                                                                    $dMonadBase1 :: Control.Monad.Base.MonadBase
                                                                                      GHC.Types.IO
                                                                                      GHC.Types.IO
                                                                    $dMonadThrow1 :: Control.Monad.Catch.MonadThrow
                                                                                       GHC.Types.IO
  Yesod.Core.Types.$fMonadResourceHandlerT @ Main.OlaMundo
                                           @ GHC.Types.IO
                                           $dMonadThrow
                                           $dMonadIO
                                           $dApplicative
                                           $dMonadBase
                                           $dMonadIO1
                                           $dMonadBase1
                                           $dMonadThrow1
  = Main.$fYesodOlaMundo_$s$fMonadResourceHandlerT
"SPEC/Main $fMonadThrowHandlerT @ OlaMundo @ IO" [ALWAYS] forall $dMonad :: GHC.Base.Monad
                                                                              (Yesod.Core.Types.HandlerT
                                                                                 Main.OlaMundo
                                                                                 GHC.Types.IO)
                                                                 $dMonadThrow :: Control.Monad.Catch.MonadThrow
                                                                                   GHC.Types.IO
  Yesod.Core.Types.$fMonadThrowHandlerT @ Main.OlaMundo
                                        @ GHC.Types.IO
                                        $dMonad
                                        $dMonadThrow
  = Main.$fYesodOlaMundo_$s$fMonadThrowHandlerT
"SPEC/Main $fMonadThrowHandlerT_$cthrowM @ OlaMundo @ IO" [ALWAYS] forall $dMonad :: GHC.Base.Monad
                                                                                       (Yesod.Core.Types.HandlerT
                                                                                          Main.OlaMundo
                                                                                          GHC.Types.IO)
                                                                          $dMonadThrow :: Control.Monad.Catch.MonadThrow
                                                                                            GHC.Types.IO
  Yesod.Core.Types.$fMonadThrowHandlerT_$cthrowM @ Main.OlaMundo
                                                 @ GHC.Types.IO
                                                 $dMonad
                                                 $dMonadThrow
  = Main.$fYesodOlaMundo_$s$fMonadThrowHandlerT_$cthrowM
"SPEC/Main fromList @ Text" [ALWAYS] forall $dOrd :: GHC.Classes.Ord
                                                       Data.Text.Internal.Text
  Data.Set.Base.fromList @ Data.Text.Internal.Text $dOrd
  = Main.$fRouteAttrsOlaMundo_$sfromList
"SPEC/Main readListDefault @ (Route OlaMundo)" [ALWAYS] forall $dRead :: GHC.Read.Read
                                                                           (Yesod.Routes.Class.Route
                                                                              Main.OlaMundo)
  GHC.Read.readListDefault @ (Yesod.Routes.Class.Route Main.OlaMundo)
                           $dRead
  = Main.$fReadRoute_$sreadListDefault
"SPEC/Main toWidget @ OlaMundo @ Markup" [ALWAYS] forall tpl :: Yesod.Core.Widget.ToWidget
                                                                  Main.OlaMundo
                                                                  Text.Blaze.Internal.Markup
  Yesod.Core.Widget.toWidget @ Main.OlaMundo
                             @ (Text.Blaze.Internal.MarkupM ())
                             tpl
  = Yesod.Core.Widget.$fToWidgetBodysiteMarkupM_$ctoWidget
      @ Main.OlaMundo
vectorised variables:
vectorised tycons:
vectorised reused tycons:
parallel variables:
parallel tycons:
trusted: none
require own pkg trusted: False

