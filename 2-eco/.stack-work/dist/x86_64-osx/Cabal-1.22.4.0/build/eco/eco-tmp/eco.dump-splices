eco.hs:(13,15)-(18,2): Splicing expression
    "\n\
    \/                   HomeR                   GET\n\
    \/mensagem/#Text     MensagemR         GET\n\
    \!/mensagem          MensagemVazia     GET\n\
    \\n"
  ======>
    [Yesod.Routes.TH.Types.ResourceLeaf
       (Yesod.Routes.TH.Types.Resource
          "HomeR"
          []
          (Yesod.Routes.TH.Types.Methods Nothing ["GET"])
          []
          True),
     Yesod.Routes.TH.Types.ResourceLeaf
       (Yesod.Routes.TH.Types.Resource
          "MensagemR"
          [Yesod.Routes.TH.Types.Static "mensagem",
           Yesod.Routes.TH.Types.Dynamic "Text"]
          (Yesod.Routes.TH.Types.Methods Nothing ["GET"])
          []
          True),
     Yesod.Routes.TH.Types.ResourceLeaf
       (Yesod.Routes.TH.Types.Resource
          "MensagemVazia"
          [Yesod.Routes.TH.Types.Static "mensagem"]
          (Yesod.Routes.TH.Types.Methods Nothing ["GET"])
          []
          False)]
eco.hs:(13,1)-(18,2): Splicing declarations
    mkYesod
      "Eco"
      ([Yesod.Routes.TH.Types.ResourceLeaf
          (Yesod.Routes.TH.Types.Resource
             "HomeR"
             []
             (Yesod.Routes.TH.Types.Methods Nothing ["GET"])
             []
             True),
        Yesod.Routes.TH.Types.ResourceLeaf
          (Yesod.Routes.TH.Types.Resource
             "MensagemR"
             [Yesod.Routes.TH.Types.Static "mensagem",
              Yesod.Routes.TH.Types.Dynamic "Text"]
             (Yesod.Routes.TH.Types.Methods Nothing ["GET"])
             []
             True),
        Yesod.Routes.TH.Types.ResourceLeaf
          (Yesod.Routes.TH.Types.Resource
             "MensagemVazia"
             [Yesod.Routes.TH.Types.Static "mensagem"]
             (Yesod.Routes.TH.Types.Methods Nothing ["GET"])
             []
             False)])
  ======>
    instance ParseRoute Eco where
      parseRoute
        = \ f_a8cy x_a8cz -> f_a8cy ghc-prim-0.4.0.0:GHC.Tuple.() x_a8cz ::
            forall a_a8cA.
            (() -> ([Text], [(Text, Text)]) -> Maybe (Route a_a8cA))
            -> ([Text], [(Text, Text)]) -> Maybe (Route a_a8cA)
          helper_a8cx
        where
            helper_a8cx env5759_a8cp req5759_a8cq
              = helper5759_a8cr (fst req5759_a8cq)
              where
                  helper5759_a8cr ghc-prim-0.4.0.0:GHC.Types.[]
                    = \ _ _ x_a8ct _ -> x_a8ct
                        (error "mdsGetHandler") env5759_a8cp (Just HomeR) req5759_a8cq
                  helper5759_a8cr
                    ((ghc-prim-0.4.0.0:GHC.Types.:) "mensagem"
                                                    ((ghc-prim-0.4.0.0:GHC.Types.:) (fromPathPiece -> Just dyn_a8cu)
                                                                                    ghc-prim-0.4.0.0:GHC.Types.[]))
                    = \ _ _ x_a8cv _ -> x_a8cv
                        (error "mdsGetHandler" dyn_a8cu)
                        env5759_a8cp
                        (Just (MensagemR dyn_a8cu))
                        req5759_a8cq
                  helper5759_a8cr
                    ((ghc-prim-0.4.0.0:GHC.Types.:) "mensagem"
                                                    ghc-prim-0.4.0.0:GHC.Types.[])
                    = \ _ _ x_a8cw _ -> x_a8cw
                        (error "mdsGetHandler")
                        env5759_a8cp
                        (Just MensagemVazia)
                        req5759_a8cq
                  helper5759_a8cr _
                    = \ _ _ x_a8cs _ -> x_a8cs
                        (error "mds404") env5759_a8cp Nothing req5759_a8cq
    instance RenderRoute Eco where
      data Route Eco
        = HomeR | MensagemR Text | MensagemVazia
        deriving (Show, Eq, Read)
      renderRoute HomeR = ([], [])
      renderRoute (MensagemR dyn_a8ck)
        = (((pack "mensagem")
            ghc-prim-0.4.0.0:GHC.Types.:
              ((toPathPiece dyn_a8ck) ghc-prim-0.4.0.0:GHC.Types.: [])), 
           [])
      renderRoute MensagemVazia
        = (((pack "mensagem") ghc-prim-0.4.0.0:GHC.Types.: []), [])
    instance RouteAttrs Eco where
      routeAttrs (HomeR {})
        = containers-0.5.6.2:Data.Set.Base.fromList []
      routeAttrs (MensagemR {})
        = containers-0.5.6.2:Data.Set.Base.fromList []
      routeAttrs (MensagemVazia {})
        = containers-0.5.6.2:Data.Set.Base.fromList []
    resourcesEco :: [Yesod.Routes.TH.Types.ResourceTree String]
    resourcesEco
      = [Yesod.Routes.TH.Types.ResourceLeaf
           (Yesod.Routes.TH.Types.Resource
              "HomeR"
              []
              (Yesod.Routes.TH.Types.Methods Nothing ["GET"])
              []
              True),
         Yesod.Routes.TH.Types.ResourceLeaf
           (Yesod.Routes.TH.Types.Resource
              "MensagemR"
              [Yesod.Routes.TH.Types.Static "mensagem",
               Yesod.Routes.TH.Types.Dynamic "Text"]
              (Yesod.Routes.TH.Types.Methods Nothing ["GET"])
              []
              True),
         Yesod.Routes.TH.Types.ResourceLeaf
           (Yesod.Routes.TH.Types.Resource
              "MensagemVazia"
              [Yesod.Routes.TH.Types.Static "mensagem"]
              (Yesod.Routes.TH.Types.Methods Nothing ["GET"])
              []
              False)]
    type Handler = HandlerT Eco IO
    type Widget = WidgetT Eco IO ghc-prim-0.4.0.0:GHC.Tuple.()
    instance YesodDispatch Eco where
      yesodDispatch env3722_a8cl req3722_a8cm
        = helper3722_a8cn
            (wai-3.0.4.0:Network.Wai.Internal.pathInfo req3722_a8cm)
        where
            helper3722_a8cn ghc-prim-0.4.0.0:GHC.Types.[]
              = case
                    wai-3.0.4.0:Network.Wai.Internal.requestMethod req3722_a8cm
                of {
                  "GET"
                    -> yesodRunner getHomeR env3722_a8cl (Just HomeR) req3722_a8cm
                  _ -> yesodRunner
                         (badMethod >> (return ghc-prim-0.4.0.0:GHC.Tuple.()))
                         env3722_a8cl
                         (Just HomeR)
                         req3722_a8cm }
            helper3722_a8cn
              ((ghc-prim-0.4.0.0:GHC.Types.:) "mensagem"
                                              ((ghc-prim-0.4.0.0:GHC.Types.:) (fromPathPiece -> Just dyn_a8co)
                                                                              ghc-prim-0.4.0.0:GHC.Types.[]))
              = case
                    wai-3.0.4.0:Network.Wai.Internal.requestMethod req3722_a8cm
                of {
                  "GET"
                    -> yesodRunner
                         (getMensagemR dyn_a8co)
                         env3722_a8cl
                         (Just (MensagemR dyn_a8co))
                         req3722_a8cm
                  _ -> yesodRunner
                         (badMethod >> (return ghc-prim-0.4.0.0:GHC.Tuple.()))
                         env3722_a8cl
                         (Just (MensagemR dyn_a8co))
                         req3722_a8cm }
            helper3722_a8cn
              ((ghc-prim-0.4.0.0:GHC.Types.:) "mensagem"
                                              ghc-prim-0.4.0.0:GHC.Types.[])
              = case
                    wai-3.0.4.0:Network.Wai.Internal.requestMethod req3722_a8cm
                of {
                  "GET"
                    -> yesodRunner
                         getMensagemVazia env3722_a8cl (Just MensagemVazia) req3722_a8cm
                  _ -> yesodRunner
                         (badMethod >> (return ghc-prim-0.4.0.0:GHC.Tuple.()))
                         env3722_a8cl
                         (Just MensagemVazia)
                         req3722_a8cm }
            helper3722_a8cn _
              = yesodRunner
                  (notFound >> (return ghc-prim-0.4.0.0:GHC.Tuple.()))
                  env3722_a8cl
                  Nothing
                  req3722_a8cm
eco.hs:26:17-41: Splicing expression
    " Erro --> #{x} "
  ======>
    \ _render_a8Sw
      -> do { id
                ((blaze-markup-0.7.0.3:Text.Blaze.Internal.preEscapedText . pack)
                   "Erro --> ");
              id (toHtml x);
              id
                ((blaze-markup-0.7.0.3:Text.Blaze.Internal.preEscapedText . pack)
                   " ") }
eco.hs:(29,26)-(32,6): Splicing expression
    "\n\
    \    <h1>Ol\225 Mundo!\n\
    \    <p> Lorem ipsum dolor sit amet, consectetur adipisicing elit.\n\
    \    "
  ======>
    (asWidgetT . toWidget)
      ((blaze-markup-0.7.0.3:Text.Blaze.Internal.preEscapedText . pack)
         "<h1>Ol\225 Mundo!</h1>\n\
         \<p> Lorem ipsum dolor sit amet, consectetur adipisicing elit.</p>\n")
eco.hs:44:47-78: Splicing expression
    " <p> Mensagem: #{ t } "
  ======>
    \ _render_a8T8
      -> do { id
                ((blaze-markup-0.7.0.3:Text.Blaze.Internal.preEscapedText . pack)
                   "<p> Mensagem: ");
              id (toHtml t);
              id
                ((blaze-markup-0.7.0.3:Text.Blaze.Internal.preEscapedText . pack)
                   " </p>\n") }
