
==================== FINAL INTERFACE ====================
2016-01-25 02:05:27.010076 UTC

interface main@main:Main [family instance module] 7102
  interface hash: 8780b96beb27470b28f3eb7dc9e9ba13
  ABI hash: 61cdf5b896cf8bbe070754e1db9f86b5
  export-list hash: 0ef92d164fd9015d973d01e78de8e35f
  orphan hash: 2b85e3350bf97c4d5c5e95779d4f9c44
  flag hash: 298cbcc0449e7ff25857858b78739f88
  sig of: Nothing
  used TH splices: True
  where
exports:
  Main.main
module dependencies:
package dependencies: aeson-extra-0.2.1.0@aeson_00CInI6mf4E0IaIIvTXCtY
                      aeson-0.8.0.2@aeson_EuKT6VLihZ5IOeoLWhB2pn
                      ansi-terminal-0.6.2.3@ansit_KW0LUY2zB7JCYzE4ZYrwBg
                      appar-0.1.4@appar_3CaAIJvwfNLEy6bEqQYYYc
                      array-0.5.1.0@array_E0sTtauuKsGDLZoT7lTbgZ
                      attoparsec-0.12.1.6@attop_DspwQCeZhqd768dqqECCEZ
                      auto-update-0.1.2.2@autou_2DkwjWlXXrh60SbDElbu3f base-4.8.1.0
                      base64-bytestring-1.0.0.1@base6_5ombtuUXex39dVe2nth8cH
                      binary-0.7.5.0@binar_IvYoLp9H6Xy3zEH13MmZwd
                      blaze-html-0.8.1.1@blaze_1zXVsYxJvNk7KmCYUCIuBj
                      blaze-builder-0.4.0.1@blaze_6BKEupqZliOD9r4rLG9ckJ
                      blaze-markup-0.7.0.3@blaze_FhrnjaI7C1I5CvgGhchX3R
                      byteable-0.1.1@bytea_F2pcQljAfpbDG2panTEyo8
                      byteorder-1.0.4@byteo_7FRRspR69KU9KubkPZfm74
                      bytestring-0.10.6.0@bytes_6elQVSg5cWdFrvRnfxTUrH
                      case-insensitive-1.2.0.5@casei_9NseolisKnP80bb65s7rJ9
                      cereal-0.4.1.1@cerea_LMaR4P6lFvNJtmY00msKYH
                      cipher-aes-0.2.11@ciphe_2ERQ1dIZixg9tWYPK06AUH
                      clientsession-0.9.1.1@clien_5kRtaeg6cgn8JeDlqKk4C7
                      conduit-1.2.5@condu_9wHaNJrxyyq9dFXfK2u9W6
                      conduit-extra-1.1.9.1@condu_KwDFYvfqb3oCPEpqLs5RdA
                      containers-0.5.6.2@conta_LKCPrTJwOTOLk4OU37YmeN
                      cookie-0.4.1.6@cooki_FJHZaRHUUOJ8okSoq5Xh3V
                      cprng-aes-0.6.1@cprng_HBEG6jjDgoo5szNfzj66ME
                      crypto-cipher-types-0.0.9@crypt_7fh37Ly4VLPKhwwe0j0lXN
                      crypto-random-0.0.9@crypt_8HBxDhEOmiZBYlqNPLXEOa
                      crypto-api-0.13.2@crypt_A5WnkM78khp1E9HeFIfO7N
                      css-text-0.1.2.1@csste_AsOgpu0oUhUIxaI5X2qjxb
                      data-default-instances-containers-0.0.1@datad_2eq6fuwf8Tk14CtKGZXhB5
                      data-default-0.5.3@datad_5ESg1VNmkW3BMxo7EwKQrK
                      data-default-instances-base-0.0.1@datad_6bNp7ygtVUW3TbxeJU4Irf
                      data-default-class-0.0.1@datad_CgDdtafiXY68XlqDb5IqXw
                      data-default-instances-old-locale-0.0.1@datad_D3fIWe3ExBN6VISnKTEJV3
                      data-default-instances-dlist-0.0.1@datad_EXwD6nMCvj82LJzl8Xo6bb
                      deepseq-1.4.1.1@deeps_LbCWUlehDDeLxurARKDH5o
                      directory-1.2.2.0@direc_KowvXytSqazBcvN7MGpFtg
                      dlist-0.7.1.2@dlist_7AixcwRWCwX32HiPCcE7zz
                      easy-file-0.2.1@easyf_FJwrEwDWX67AIqrB5x3TwS
                      email-validate-2.1.3@email_KNOM4iwrKWXFb5Ec8otrSn
                      entropy-0.3.7@entro_BTeyFmIz5b6F1k5rgnvcgO
                      exceptions-0.8.0.2@excep_8GsEeHgaIks3pVGk6GaELJ
                      fast-logger-2.4.1@fastl_5obpil597KwB2V9Hv2ZA9d
                      filepath-1.4.0.0@filep_KsGE6pHE5eZHSN90ZVax6A ghc-prim-0.4.0.0
                      hashable-1.2.3.3@hasha_2GTZqecVp8NJZrNuKzGxfy
                      http2-1.0.4@http2_4sQuZ3WKGKmBNVNDFbJPRm
                      http-date-0.0.6.1@httpd_2tf3nTFlI2kLGHPgsNfz1u
                      http-types-0.8.6@httpt_C5IeULANR3XGcPcpozwQ7D integer-gmp-1.0.0.0
                      iproute-1.5.0@iprou_B0SP369TCng5d8Pd7LByY9
                      lifted-base-0.2.3.6@lifte_K3cQFA6mRg85rpDaA9numU
                      memory-0.7@memor_ByKf2PUnWbr6V2Z5gsXbfn
                      mmorph-1.0.4@mmorp_8dNpUU8QFPe77rrwKAb20b
                      monad-control-1.0.0.4@monad_3XCDr1mqlERGZgaxuwJF6b
                      monad-loops-0.4.3@monad_EQoySqNZ2bd85KCgzAOO4M
                      monad-logger-0.3.14@monad_LPwgDi9JpFEGNVRYbWvREh
                      mtl-2.2.1@mtl_KMpng31YRYc5JfMWFZ3FCU
                      mwc-random-0.13.3.2@mwcra_0iGmPos4Pta2ISXJLjBtd8
                      network-2.6.2.1@netwo_F6mK9sCIw3M5SbZMt2lUQE
                      network-uri-2.6.0.3@netwo_LFMzacKIfjmC6gRt5N3aSz
                      old-locale-1.0.0.7@oldlo_D6X1KPq5Sui5XjrHMwvFwK
                      old-time-1.1.0.3@oldti_FBWJJDS5FKr7UKFScBcUW2
                      parsec-3.1.9@parse_8fSmqig53hOL2SEu1k9Tv0
                      path-pieces-0.2.0@pathp_J0g0J8bkzER1Juj01TEf96
                      persistent-template-2.1.3.7@persi_BE4iTuqhVssDaBQ4Lj3JRN
                      persistent-2.2.1@persi_JtP9Zc16gv25fMrQ82pQ72
                      pretty-1.1.2.0@prett_7UQTOB05U7lIYPkFOVraeR
                      primitive-0.6.1.0@primi_5Jnw7oEuYtM9dmKXelGXVb
                      process-1.2.3.0@proce_FLTz0SLwyG6LJUpZ52HjkU
                      random-1.1@rando_1z8Ujelqc6aKgvPnbRUKkP
                      resource-pool-0.2.3.2@resou_07WWhNMBPs8Ihbjf6mIyPw
                      resourcet-1.1.6@resou_Ic1TzDDmqYbFNHpzRsDmfS
                      safe-0.3.9@safe_BXSoeRP9IFG6t9s3abNgVi
                      scientific-0.3.4.2@scien_4y53jPjKCJD6UICjmI9WaH
                      securemem-0.1.9@secur_IVsZrOqGXes1eaVFfLeM4x
                      semigroups-0.16.2.2@semig_509rjK42Yeb8JAwFst5KmO
                      shakespeare-2.0.6@shake_H6AYCzksHF8LdCuHfpTccR
                      silently-1.2.5@silen_8uJ39lhRp4MCX1bkpH7HLp
                      simple-sendfile-0.2.21@simpl_8JinxnD07KP3TRgmAVYt64
                      skein-1.0.9.3@skein_IvDavUTFfZ4JYOyVidCzES
                      stm-2.4.4@stm_C1kFMnPqFjvDhFjgMZGUpr
                      stm-chans-3.0.0.4@stmch_7j9sHjGqeHj8Gs1cUILhfw
                      streaming-commons-0.1.14.2@strea_6MWdbeujUEQEUDv55904UY
                      stringsearch-0.3.6.6@strin_LD3tXxltwdY99HXR2kj3px
                      tagged-0.8.1@tagge_6Tf46oJAk552xT73wGffBW
                      tagsoup-0.13.3@tagso_ImwiOxTXDQzEs0zEAu9cq0
                      template-haskell-2.10.0.0 text-1.2.1.3@text_1l1AN4I48k37RaQ6fm6CEh
                      time-1.5.0.1@time_AXTdBF9VRQoBOqJT6qtmVH
                      transformers-0.4.2.0@trans_3eG64VdP2vzGjP6wJiCp5X
                      transformers-base-0.4.4@trans_88TAFm21vtn2NrYUppy50c
                      unix-2.7.1.0@unix_A3WgcI5QiHK4PDo4jSYdwQ
                      unix-compat-0.4.1.4@unixc_DeAF5HEzYMu4CPLnbGbHUz
                      unix-time-0.3.5@unixt_AvHwgK1Y2i0DqLqnUno9kP
                      unordered-containers-0.2.5.1@unord_7E41cj9RvqSJeZ4jSnbs1a
                      utf8-string-1.0.1.1@utf8s_HWC8Qen5AZrArJxFQJuE72
                      vault-0.3.0.4@vault_0ClHfttEXGC8o1TYTuenH0
                      vector-0.10.12.3@vecto_JrQt7SYKOQF2foH4Ugm8MQ
                      wai-3.0.4.0@wai_IMYA1U3SnZGIWgxCNGPKnn
                      wai-extra-3.0.11.1@waiex_DRiEtVdiqX6GApgqFvzluj
                      wai-logger-2.2.4.1@wailo_KKSGrktapgYCYkxiEFCnmo
                      warp-3.1.3.1@warp_I7pHmGTMFaeLd7lvMlKc8E
                      word8-0.1.2@word8_JFinUbIMmjfAdy4qiZBFBe
                      xss-sanitize-0.3.5.6@xsssa_AIAsTAGdhaXAYbcEpBnab3
                      yesod-1.4.2@yesod_0krXskZHAATK3cepIsBazA
                      yesod-core-1.4.15.1@yesod_2xcmm3Dke2U0MaCJoF2RTB
                      yesod-persistent-1.4.0.3@yesod_6L7MY9qQZX4EEG9c1phr5X
                      yesod-form-1.4.4.1@yesod_B1lLuvFFBKK5hsUoEwFYh4
                      zlib-0.5.4.2@zlib_7EfFFsXSCF6JCVS3xlYBS8
orphans: aeson-0.8.0.2@aeson_EuKT6VLihZ5IOeoLWhB2pn:Data.Aeson.Types.Generic
         aeson-0.8.0.2@aeson_EuKT6VLihZ5IOeoLWhB2pn:Data.Aeson.Types.Instances
         attoparsec-0.12.1.6@attop_DspwQCeZhqd768dqqECCEZ:Data.Attoparsec.ByteString.Char8
         attoparsec-0.12.1.6@attop_DspwQCeZhqd768dqqECCEZ:Data.Attoparsec.Text.Internal
         base-4.8.1.0:GHC.Base base-4.8.1.0:GHC.Float
         binary-0.7.5.0@binar_IvYoLp9H6Xy3zEH13MmZwd:Data.Binary.Generic
         bytestring-0.10.6.0@bytes_6elQVSg5cWdFrvRnfxTUrH:Data.ByteString.Builder
         conduit-1.2.5@condu_9wHaNJrxyyq9dFXfK2u9W6:Data.Conduit.List
         crypto-api-0.13.2@crypt_A5WnkM78khp1E9HeFIfO7N:Crypto.Classes
         data-default-instances-containers-0.0.1@datad_2eq6fuwf8Tk14CtKGZXhB5:Data.Default.Instances.Containers
         data-default-instances-base-0.0.1@datad_6bNp7ygtVUW3TbxeJU4Irf:Data.Default.Instances.Base
         data-default-instances-old-locale-0.0.1@datad_D3fIWe3ExBN6VISnKTEJV3:Data.Default.Instances.OldLocale
         data-default-instances-dlist-0.0.1@datad_EXwD6nMCvj82LJzl8Xo6bb:Data.Default.Instances.DList
         hashable-1.2.3.3@hasha_2GTZqecVp8NJZrNuKzGxfy:Data.Hashable.Generic
         network-2.6.2.1@netwo_F6mK9sCIw3M5SbZMt2lUQE:Network.Socket
         network-2.6.2.1@netwo_F6mK9sCIw3M5SbZMt2lUQE:Network.Socket.Types
         persistent-template-2.1.3.7@persi_BE4iTuqhVssDaBQ4Lj3JRN:Database.Persist.TH
         persistent-2.2.1@persi_JtP9Zc16gv25fMrQ82pQ72:Database.Persist.Sql.Orphan.PersistQuery
         persistent-2.2.1@persi_JtP9Zc16gv25fMrQ82pQ72:Database.Persist.Sql.Orphan.PersistStore
         persistent-2.2.1@persi_JtP9Zc16gv25fMrQ82pQ72:Database.Persist.Sql.Orphan.PersistUnique
         stm-2.4.4@stm_C1kFMnPqFjvDhFjgMZGUpr:Control.Monad.STM
         text-1.2.1.3@text_1l1AN4I48k37RaQ6fm6CEh:Data.Text
         text-1.2.1.3@text_1l1AN4I48k37RaQ6fm6CEh:Data.Text.Lazy
         text-1.2.1.3@text_1l1AN4I48k37RaQ6fm6CEh:Data.Text.Show
         time-1.5.0.1@time_AXTdBF9VRQoBOqJT6qtmVH:Data.Time.Calendar.Gregorian
         time-1.5.0.1@time_AXTdBF9VRQoBOqJT6qtmVH:Data.Time.Format.Parse
         time-1.5.0.1@time_AXTdBF9VRQoBOqJT6qtmVH:Data.Time.LocalTime.LocalTime
         transformers-0.4.2.0@trans_3eG64VdP2vzGjP6wJiCp5X:Control.Monad.Trans.Error
         unix-time-0.3.5@unixt_AvHwgK1Y2i0DqLqnUno9kP:Data.UnixTime.Diff
         vector-0.10.12.3@vecto_JrQt7SYKOQF2foH4Ugm8MQ:Data.Vector.Fusion.Stream
         vector-0.10.12.3@vecto_JrQt7SYKOQF2foH4Ugm8MQ:Data.Vector.Unboxed
family instance modules: attoparsec-0.12.1.6@attop_DspwQCeZhqd768dqqECCEZ:Data.Attoparsec.Internal.Types
                         base-4.8.1.0:Control.Applicative base-4.8.1.0:Data.Either
                         base-4.8.1.0:Data.Functor.Identity base-4.8.1.0:Data.Monoid
                         base-4.8.1.0:Data.Type.Equality base-4.8.1.0:Data.Void
                         base-4.8.1.0:GHC.Exts base-4.8.1.0:GHC.Generics
                         containers-0.5.6.2@conta_LKCPrTJwOTOLk4OU37YmeN:Data.IntMap.Base
                         containers-0.5.6.2@conta_LKCPrTJwOTOLk4OU37YmeN:Data.IntSet.Base
                         containers-0.5.6.2@conta_LKCPrTJwOTOLk4OU37YmeN:Data.Map.Base
                         containers-0.5.6.2@conta_LKCPrTJwOTOLk4OU37YmeN:Data.Sequence
                         containers-0.5.6.2@conta_LKCPrTJwOTOLk4OU37YmeN:Data.Set.Base
                         dlist-0.7.1.2@dlist_7AixcwRWCwX32HiPCcE7zz:Data.DList
                         email-validate-2.1.3@email_KNOM4iwrKWXFb5Ec8otrSn:Text.Email.Parser
                         iproute-1.5.0@iprou_B0SP369TCng5d8Pd7LByY9:Data.IP.Addr
                         iproute-1.5.0@iprou_B0SP369TCng5d8Pd7LByY9:Data.IP.Range
                         monad-control-1.0.0.4@monad_3XCDr1mqlERGZgaxuwJF6b:Control.Monad.Trans.Control
                         monad-logger-0.3.14@monad_LPwgDi9JpFEGNVRYbWvREh:Control.Monad.Logger
                         mwc-random-0.13.3.2@mwcra_0iGmPos4Pta2ISXJLjBtd8:System.Random.MWC
                         network-uri-2.6.0.3@netwo_LFMzacKIfjmC6gRt5N3aSz:Network.URI
                         persistent-2.2.1@persi_JtP9Zc16gv25fMrQ82pQ72:Database.Persist.Class.PersistConfig
                         persistent-2.2.1@persi_JtP9Zc16gv25fMrQ82pQ72:Database.Persist.Sql.Orphan.PersistStore
                         pretty-1.1.2.0@prett_7UQTOB05U7lIYPkFOVraeR:Text.PrettyPrint.HughesPJ
                         primitive-0.6.1.0@primi_5Jnw7oEuYtM9dmKXelGXVb:Control.Monad.Primitive
                         resourcet-1.1.6@resou_Ic1TzDDmqYbFNHpzRsDmfS:Control.Monad.Trans.Resource.Internal
                         semigroups-0.16.2.2@semig_509rjK42Yeb8JAwFst5KmO:Data.List.NonEmpty
                         semigroups-0.16.2.2@semig_509rjK42Yeb8JAwFst5KmO:Data.Semigroup
                         shakespeare-2.0.6@shake_H6AYCzksHF8LdCuHfpTccR:Text.Css
                         shakespeare-2.0.6@shake_H6AYCzksHF8LdCuHfpTccR:Text.Shakespeare
                         tagged-0.8.1@tagge_6Tf46oJAk552xT73wGffBW:Data.Tagged
                         template-haskell-2.10.0.0:Language.Haskell.TH.Syntax
                         text-1.2.1.3@text_1l1AN4I48k37RaQ6fm6CEh:Data.Text
                         text-1.2.1.3@text_1l1AN4I48k37RaQ6fm6CEh:Data.Text.Lazy
                         unordered-containers-0.2.5.1@unord_7E41cj9RvqSJeZ4jSnbs1a:Data.HashMap.Base
                         unordered-containers-0.2.5.1@unord_7E41cj9RvqSJeZ4jSnbs1a:Data.HashSet
                         vector-0.10.12.3@vecto_JrQt7SYKOQF2foH4Ugm8MQ:Data.Vector
                         vector-0.10.12.3@vecto_JrQt7SYKOQF2foH4Ugm8MQ:Data.Vector.Primitive
                         vector-0.10.12.3@vecto_JrQt7SYKOQF2foH4Ugm8MQ:Data.Vector.Storable
                         vector-0.10.12.3@vecto_JrQt7SYKOQF2foH4Ugm8MQ:Data.Vector.Unboxed
                         vector-0.10.12.3@vecto_JrQt7SYKOQF2foH4Ugm8MQ:Data.Vector.Unboxed.Base
                         yesod-core-1.4.15.1@yesod_2xcmm3Dke2U0MaCJoF2RTB:Yesod.Core.Class.Handler
                         yesod-core-1.4.15.1@yesod_2xcmm3Dke2U0MaCJoF2RTB:Yesod.Core.Internal.LiteApp
                         yesod-core-1.4.15.1@yesod_2xcmm3Dke2U0MaCJoF2RTB:Yesod.Core.Types
import  -/  base-4.8.1.0:Data.Tuple 012ad951a59a9d85fe1de36a2f012986
import  -/  base-4.8.1.0:GHC.Base 1db77db5dae73d8c424c85b09fbadb89
import  -/  base-4.8.1.0:GHC.Read cfaa50b414b9b02ef6fe4fe5600d9b95
import  -/  base-4.8.1.0:GHC.Show b8c65ca3124f92a166c9f05120382442
import  -/  base-4.8.1.0:Prelude 518f762991bc287d78f21a73c974da1f
import  -/  base-4.8.1.0:Text.ParserCombinators.ReadPrec 1844ee1249db84f72bd233d7a9bbd968
import  -/  base-4.8.1.0:Text.Read.Lex 1ec4c08d49d1d5264b910cc76b6c6fde
import  -/  blaze-html-0.8.1.1@blaze_1zXVsYxJvNk7KmCYUCIuBj:Text.Blaze.Html 20338b6845796ca3cfb0923f118f214b
import  -/  blaze-markup-0.7.0.3@blaze_FhrnjaI7C1I5CvgGhchX3R:Text.Blaze.Internal 9b5aa510dbcc59fd42b33d76138a58d1
import  -/  containers-0.5.6.2@conta_LKCPrTJwOTOLk4OU37YmeN:Data.Set.Base c7b7d74b8d8362cfd63af801b9be5c84
import  -/  ghc-prim-0.4.0.0:GHC.Classes e1f4ff80f7b5262008a595d29986fb18
import  -/  ghc-prim-0.4.0.0:GHC.Types 6b27fb3fdbd0e3f0925a4496c66513bb
import  -/  path-pieces-0.2.0@pathp_J0g0J8bkzER1Juj01TEf96:Web.PathPieces 7f8cef419b3a6311c16d8b291cbfb11f
import  -/  text-1.2.1.3@text_1l1AN4I48k37RaQ6fm6CEh:Data.Text e74c40da976ee643cb7d3cc6a9b83643
import  -/  text-1.2.1.3@text_1l1AN4I48k37RaQ6fm6CEh:Data.Text.Internal 9aaf446b91649c416d85a19f08d51f8e
import  -/  wai-3.0.4.0@wai_IMYA1U3SnZGIWgxCNGPKnn:Network.Wai.Internal 7e3b9d08a481a59ed8105c7ca355603c
import  -/  yesod-1.4.2@yesod_0krXskZHAATK3cepIsBazA:Yesod d0392ef041d2283e6ce220a4044045b7
import  -/  yesod-core-1.4.15.1@yesod_2xcmm3Dke2U0MaCJoF2RTB:Yesod.Core.Class.Dispatch 8b208963eca3a091e1c15667605e7229
import  -/  yesod-core-1.4.15.1@yesod_2xcmm3Dke2U0MaCJoF2RTB:Yesod.Core.Class.Yesod 71eef9371db7db4d30686217c4737b61
import  -/  yesod-core-1.4.15.1@yesod_2xcmm3Dke2U0MaCJoF2RTB:Yesod.Core.Content 55e29eed01b646f70df196f46997c508
import  -/  yesod-core-1.4.15.1@yesod_2xcmm3Dke2U0MaCJoF2RTB:Yesod.Core.Dispatch 17e0a96e25021d9e42063511496acbf4
import  -/  yesod-core-1.4.15.1@yesod_2xcmm3Dke2U0MaCJoF2RTB:Yesod.Core.Handler bd4935b53d3496c14b67ee9c0fa08711
import  -/  yesod-core-1.4.15.1@yesod_2xcmm3Dke2U0MaCJoF2RTB:Yesod.Core.Internal.Run c38ecc4b2079c7934f303ed50aae4e6e
import  -/  yesod-core-1.4.15.1@yesod_2xcmm3Dke2U0MaCJoF2RTB:Yesod.Core.Internal.TH 73fb2c5559d4c738ee5a1eef6ee90c3d
import  -/  yesod-core-1.4.15.1@yesod_2xcmm3Dke2U0MaCJoF2RTB:Yesod.Core.Types 13c633dda1a712aa0394b9d7f4849bc5
import  -/  yesod-core-1.4.15.1@yesod_2xcmm3Dke2U0MaCJoF2RTB:Yesod.Core.Widget 65346ae2748ddb523109bca98c71dc5c
import  -/  yesod-core-1.4.15.1@yesod_2xcmm3Dke2U0MaCJoF2RTB:Yesod.Routes.Class ccd3450fc309ab0870ff9d72f473ec6b
import  -/  yesod-core-1.4.15.1@yesod_2xcmm3Dke2U0MaCJoF2RTB:Yesod.Routes.TH.Types cea4e821fb4df8fbf9cdd7085e9c4419
9ed68c590bfb4a360c17171a08409561
  $fEqRoute :: GHC.Classes.Eq (Yesod.Routes.Class.Route Main.Eco)
  DFunId[0]
  {- HasNoCafRefs, Strictness: m, Inline: [ALWAYS] CONLIKE,
     Unfolding: DFun:.
                  @ (Yesod.Routes.Class.Route Main.Eco)
                  Main.$fEqRoute_$c==
                  Main.$fEqRoute_$c/= -}
9ed68c590bfb4a360c17171a08409561
  $fEqRoute_$c/= ::
    Yesod.Routes.Class.Route Main.Eco
    -> Yesod.Routes.Class.Route Main.Eco -> GHC.Types.Bool
  {- Arity: 2, HasNoCafRefs, Strictness: <S,1*U><S,1*U>,
     Unfolding: (\ a66 :: Yesod.Routes.Class.Route Main.Eco
                   b :: Yesod.Routes.Class.Route Main.Eco ->
                 case a66 `cast` (Sub (Main.TFCo:R:RouteEco[0])) of wild {
                   Main.HomeR
                   -> case b `cast` (Sub (Main.TFCo:R:RouteEco[0])) of wild1 {
                        DEFAULT -> GHC.Types.True Main.HomeR -> GHC.Types.False }
                   Main.MensagemR a67
                   -> case b `cast` (Sub (Main.TFCo:R:RouteEco[0])) of wild1 {
                        DEFAULT -> GHC.Types.True
                        Main.MensagemR b1
                        -> case a67 of wild2 { Data.Text.Internal.Text dt dt1 dt2 ->
                           case b1 of wild3 { Data.Text.Internal.Text dt3 dt4 dt5 ->
                           case GHC.Prim.tagToEnum#
                                  @ GHC.Types.Bool
                                  (GHC.Prim.==# dt2 dt5) of wild4 {
                             GHC.Types.False -> GHC.Types.True
                             GHC.Types.True
                             -> case {__pkg_ccall text-1.2.1.3@text_1l1AN4I48k37RaQ6fm6CEh _hs_text_memcmp GHC.Prim.ByteArray#
                                                                                                           -> GHC.Prim.Word#
                                                                                                           -> GHC.Prim.ByteArray#
                                                                                                           -> GHC.Prim.Word#
                                                                                                           -> GHC.Prim.Word#
                                                                                                           -> GHC.Prim.State#
                                                                                                                GHC.Prim.RealWorld
                                                                                                           -> (# GHC.Prim.State#
                                                                                                                   GHC.Prim.RealWorld,
                                                                                                                 GHC.Prim.Int# #)}
                                       dt
                                       (GHC.Prim.int2Word# dt1)
                                       dt3
                                       (GHC.Prim.int2Word# dt4)
                                       (GHC.Prim.int2Word# dt2)
                                       GHC.Prim.realWorld# of wild5 { (#,#) ds11 ds12 ->
                                case GHC.Prim.narrow32Int# ds12 of wild6 {
                                  DEFAULT -> GHC.Types.True 0 -> GHC.Types.False } } } } } }
                   Main.MensagemVazia
                   -> case b `cast` (Sub (Main.TFCo:R:RouteEco[0])) of wild1 {
                        DEFAULT -> GHC.Types.True
                        Main.MensagemVazia -> GHC.Types.False } }) -}
9ed68c590bfb4a360c17171a08409561
  $fEqRoute_$c== ::
    Yesod.Routes.Class.Route Main.Eco
    -> Yesod.Routes.Class.Route Main.Eco -> GHC.Types.Bool
  {- Arity: 2, HasNoCafRefs, Strictness: <S,1*U><S,1*U>,
     Unfolding: (\ ds :: Yesod.Routes.Class.Route Main.Eco
                   ds1 :: Yesod.Routes.Class.Route Main.Eco ->
                 case ds `cast` (Sub (Main.TFCo:R:RouteEco[0])) of wild {
                   Main.HomeR
                   -> case ds1 `cast` (Sub (Main.TFCo:R:RouteEco[0])) of wild1 {
                        DEFAULT -> GHC.Types.False Main.HomeR -> GHC.Types.True }
                   Main.MensagemR a66
                   -> case ds1 `cast` (Sub (Main.TFCo:R:RouteEco[0])) of wild1 {
                        DEFAULT -> GHC.Types.False
                        Main.MensagemR b1 -> Data.Text.$c== a66 b1 }
                   Main.MensagemVazia
                   -> case ds1 `cast` (Sub (Main.TFCo:R:RouteEco[0])) of wild1 {
                        DEFAULT -> GHC.Types.False
                        Main.MensagemVazia -> GHC.Types.True } }) -}
9ed68c590bfb4a360c17171a08409561
  $fParseRouteEco :: Yesod.Routes.Class.ParseRoute Main.Eco
  DFunId[0]
  {- Strictness: m, Inline: [ALWAYS] CONLIKE,
     Unfolding: DFun:.
                  @ Main.Eco
                  Main.$fRenderRouteEco
                  Main.$fParseRouteEco_$cparseRoute -}
9ed68c590bfb4a360c17171a08409561
  $fParseRouteEco1 ::
    GHC.Base.Maybe (Yesod.Routes.Class.Route Main.Eco)
  {- HasNoCafRefs, Strictness: m2,
     Unfolding: (GHC.Base.Just
                   @ (Yesod.Routes.Class.Route Main.Eco)
                   Main.MensagemVazia `cast` (Sub (Sym (Main.TFCo:R:RouteEco[0])))) -}
5905cc0580b4b32fbd950c3f2c24634c
  $fParseRouteEco2 :: Data.Text.Internal.Text
  {- Unfolding: (Data.Text.Show.unpackCString# "mensagem"#) -}
9ed68c590bfb4a360c17171a08409561
  $fParseRouteEco3 ::
    GHC.Base.Maybe (Yesod.Routes.Class.Route Main.Eco)
  {- HasNoCafRefs, Strictness: m2,
     Unfolding: (GHC.Base.Just
                   @ (Yesod.Routes.Class.Route Main.Eco)
                   Main.HomeR `cast` (Sub (Sym (Main.TFCo:R:RouteEco[0])))) -}
9ed68c590bfb4a360c17171a08409561
  $fParseRouteEco_$cparseRoute ::
    ([Data.Text.Internal.Text],
     [(Data.Text.Internal.Text, Data.Text.Internal.Text)])
    -> GHC.Base.Maybe (Yesod.Routes.Class.Route Main.Eco)
  {- Arity: 1, Strictness: <S(SL),1*U(1*U,A)>, Inline: INLINE[0],
     Unfolding: InlineRule (1, True, False)
                (\ w :: ([Data.Text.Internal.Text],
                         [(Data.Text.Internal.Text, Data.Text.Internal.Text)]) ->
                 case w of ww { (,) ww1 ww2 -> Main.$w$cparseRoute ww1 }) -}
9ed68c590bfb4a360c17171a08409561
  $fReadRoute :: GHC.Read.Read (Yesod.Routes.Class.Route Main.Eco)
  DFunId[0]
  {- Strictness: m, Inline: [ALWAYS] CONLIKE,
     Unfolding: DFun:.
                  @ (Yesod.Routes.Class.Route Main.Eco)
                  Main.$fReadRoute_$s$dmreadsPrec
                  Main.$fReadRoute_$sreadListDefault
                  Main.$fReadRoute_$creadPrec
                  Main.$fReadRoute_$creadListPrec -}
9ed68c590bfb4a360c17171a08409561
  $fReadRoute1 ::
    Text.ParserCombinators.ReadPrec.Prec
    -> forall b.
       ([Yesod.Routes.Class.Route Main.Eco]
        -> Text.ParserCombinators.ReadP.P b)
       -> Text.ParserCombinators.ReadP.P b
  {- Arity: 2, Strictness: <L,A><L,C(U)>,
     Unfolding: InlineRule (2, True, True)
                (\ eta :: Text.ParserCombinators.ReadPrec.Prec
                   @ b
                   eta1 :: [Yesod.Routes.Class.Route Main.Eco]
                           -> Text.ParserCombinators.ReadP.P b ->
                 GHC.Read.$wa
                   @ (Yesod.Routes.Class.Route Main.Eco)
                   Main.$fReadRoute2
                     `cast`
                   (Sym (Text.ParserCombinators.ReadPrec.NTCo:ReadPrec[0]
                             <Yesod.Routes.Class.Route Main.Eco>_R))
                   @ b
                   eta1) -}
9ed68c590bfb4a360c17171a08409561
  $fReadRoute10 ::
    ([GHC.Types.Char],
     Text.ParserCombinators.ReadPrec.ReadPrec
       (Yesod.Routes.Class.Route Main.Eco))
  {- Strictness: m,
     Unfolding: ((Main.$fReadRoute12,
                  Main.$fReadRoute11
                    `cast`
                  (Trans
                       (<Text.ParserCombinators.ReadPrec.Prec>_R
                        ->_R Sym (Text.ParserCombinators.ReadP.NTCo:ReadP[0]
                                      <Yesod.Routes.Class.Route Main.Eco>_R))
                       (Sym (Text.ParserCombinators.ReadPrec.NTCo:ReadPrec[0]
                                 <Yesod.Routes.Class.Route Main.Eco>_R))))) -}
9ed68c590bfb4a360c17171a08409561
  $fReadRoute11 ::
    Text.ParserCombinators.ReadPrec.Prec
    -> forall b.
       (Yesod.Routes.Class.Route Main.Eco
        -> Text.ParserCombinators.ReadP.P b)
       -> Text.ParserCombinators.ReadP.P b
  {- Arity: 2, HasNoCafRefs, Strictness: <L,A><C(S),1*C1(U)>,
     Unfolding: InlineRule (2, True, True)
                (\ ds :: Text.ParserCombinators.ReadPrec.Prec
                   @ b
                   eta :: Yesod.Routes.Class.Route Main.Eco
                          -> Text.ParserCombinators.ReadP.P b ->
                 eta Main.HomeR `cast` (Sub (Sym (Main.TFCo:R:RouteEco[0])))) -}
af9a011b38c6571410a41a89eddadc7f
  $fReadRoute12 :: [GHC.Types.Char]
  {- Unfolding: (GHC.CString.unpackCString# "HomeR"#) -}
9ed68c590bfb4a360c17171a08409561
  $fReadRoute2 ::
    Text.ParserCombinators.ReadPrec.Prec
    -> Text.ParserCombinators.ReadP.ReadP
         (Yesod.Routes.Class.Route Main.Eco)
  {- Arity: 1,
     Unfolding: (GHC.Read.$fReadDouble10
                   @ (Yesod.Routes.Class.Route Main.Eco)
                   Main.$fReadRoute3
                     `cast`
                   (Trans
                        (<Text.ParserCombinators.ReadPrec.Prec>_R
                         ->_R Sym (Text.ParserCombinators.ReadP.NTCo:ReadP[0]
                                       <Yesod.Routes.Class.Route Main.Eco>_R))
                        (Sym (Text.ParserCombinators.ReadPrec.NTCo:ReadPrec[0]
                                  <Yesod.Routes.Class.Route Main.Eco>_R)))) -}
9ed68c590bfb4a360c17171a08409561
  $fReadRoute3 ::
    Text.ParserCombinators.ReadPrec.Prec
    -> forall b.
       (Yesod.Routes.Class.Route Main.Eco
        -> Text.ParserCombinators.ReadP.P b)
       -> Text.ParserCombinators.ReadP.P b
  {- Arity: 2, Strictness: <L,U(U)><L,U>,
     Unfolding: (\ n :: Text.ParserCombinators.ReadPrec.Prec
                   @ b
                   eta :: Yesod.Routes.Class.Route Main.Eco
                          -> Text.ParserCombinators.ReadP.P b ->
                 Text.ParserCombinators.ReadP.$fAlternativeP_$c<|>
                   @ b
                   (GHC.Read.choose2
                      @ (Yesod.Routes.Class.Route Main.Eco)
                      Main.$fReadRoute5
                      n
                      @ b
                      eta)
                   (case n of wild { GHC.Types.I# x1 ->
                    case GHC.Prim.tagToEnum#
                           @ GHC.Types.Bool
                           (GHC.Prim.<=# x1 10) of wild2 {
                      GHC.Types.False -> Text.ParserCombinators.ReadP.Fail @ b
                      GHC.Types.True
                      -> let {
                           lvl78 :: Text.ParserCombinators.ReadP.P b
                           = letrec {
                               go :: [(Data.Text.Internal.Text, GHC.Base.String)]
                                     -> [(b, GHC.Base.String)]
                                 {- Arity: 1, Strictness: <S,1*U> -}
                               = \ ds :: [(Data.Text.Internal.Text, GHC.Base.String)] ->
                                 case ds of wild1 {
                                   [] -> GHC.Types.[] @ (b, GHC.Base.String)
                                   : y ys
                                   -> case y of wild3 { (,) a66 s' ->
                                      GHC.Base.++
                                        @ (b, GHC.Base.String)
                                        (Text.ParserCombinators.ReadP.run
                                           @ b
                                           (eta
                                              (Main.MensagemR a66)
                                                `cast`
                                              (Sub (Sym (Main.TFCo:R:RouteEco[0]))))
                                           s')
                                        (go ys) } }
                             } in
                             let {
                               ww1 :: GHC.Base.String -> Text.ParserCombinators.ReadP.P b
                                 {- Arity: 1, Strictness: <L,U>,
                                    Unfolding: InlineRule (1, True, False)
                                               (\ s :: GHC.Base.String ->
                                                case go (Data.Text.$w$creadsPrec s) of wild1 {
                                                  [] -> Text.ParserCombinators.ReadP.Fail @ b
                                                  : ipv ipv1
                                                  -> Text.ParserCombinators.ReadP.Final
                                                       @ b
                                                       wild1 }) -}
                               = \ s :: GHC.Base.String ->
                                 case go (Data.Text.$w$creadsPrec s) of wild1 {
                                   [] -> Text.ParserCombinators.ReadP.Fail @ b
                                   : ipv ipv1 -> Text.ParserCombinators.ReadP.Final @ b wild1 }
                             } in
                             let {
                               lvl79 :: Text.ParserCombinators.ReadP.P b
                               = Text.ParserCombinators.ReadP.Look @ b ww1
                             } in
                             Text.Read.Lex.expect2
                               @ b
                               (\ a98 :: Text.Read.Lex.Lexeme ->
                                case a98 of wild1 {
                                  DEFAULT -> Text.ParserCombinators.ReadP.Fail @ b
                                  Text.Read.Lex.Ident a66
                                  -> case GHC.Base.eqString a66 Main.$fReadRoute4 of wild3 {
                                       GHC.Types.False -> Text.ParserCombinators.ReadP.Fail @ b
                                       GHC.Types.True -> lvl79 } })
                         } in
                         let {
                           k :: () -> Text.ParserCombinators.ReadP.P b
                             {- Arity: 1, Strictness: <L,A>, Inline: INLINE[0],
                                Unfolding: InlineRule (1, True, True) (\ w2 :: () -> lvl78) -}
                           = \ w2 :: () -> lvl78
                         } in
                         Text.ParserCombinators.ReadP.Look
                           @ b
                           (\ a98 :: GHC.Base.String ->
                            (Text.ParserCombinators.ReadP.skipSpaces_skip a98)
                              `cast`
                            (Text.ParserCombinators.ReadP.NTCo:ReadP[0] <()>_R)
                              @ b
                              k) } })) -}
fb81941c64e86c29b7fc6f9ca4111dfb
  $fReadRoute4 :: [GHC.Types.Char]
  {- Unfolding: (GHC.CString.unpackCString# "MensagemR"#) -}
9ed68c590bfb4a360c17171a08409561
  $fReadRoute5 ::
    [(GHC.Base.String,
      Text.ParserCombinators.ReadPrec.ReadPrec
        (Yesod.Routes.Class.Route Main.Eco))]
  {- Strictness: m2,
     Unfolding: (GHC.Types.:
                   @ (GHC.Base.String,
                      Text.ParserCombinators.ReadPrec.ReadPrec
                        (Yesod.Routes.Class.Route Main.Eco))
                   Main.$fReadRoute10
                   Main.$fReadRoute6) -}
9ed68c590bfb4a360c17171a08409561
  $fReadRoute6 ::
    [(GHC.Base.String,
      Text.ParserCombinators.ReadPrec.ReadPrec
        (Yesod.Routes.Class.Route Main.Eco))]
  {- Strictness: m2,
     Unfolding: (GHC.Types.:
                   @ (GHC.Base.String,
                      Text.ParserCombinators.ReadPrec.ReadPrec
                        (Yesod.Routes.Class.Route Main.Eco))
                   Main.$fReadRoute7
                   (GHC.Types.[]
                      @ (GHC.Base.String,
                         Text.ParserCombinators.ReadPrec.ReadPrec
                           (Yesod.Routes.Class.Route Main.Eco)))) -}
9ed68c590bfb4a360c17171a08409561
  $fReadRoute7 ::
    ([GHC.Types.Char],
     Text.ParserCombinators.ReadPrec.ReadPrec
       (Yesod.Routes.Class.Route Main.Eco))
  {- Strictness: m,
     Unfolding: ((Main.$fReadRoute9,
                  Main.$fReadRoute8
                    `cast`
                  (Trans
                       (<Text.ParserCombinators.ReadPrec.Prec>_R
                        ->_R Sym (Text.ParserCombinators.ReadP.NTCo:ReadP[0]
                                      <Yesod.Routes.Class.Route Main.Eco>_R))
                       (Sym (Text.ParserCombinators.ReadPrec.NTCo:ReadPrec[0]
                                 <Yesod.Routes.Class.Route Main.Eco>_R))))) -}
9ed68c590bfb4a360c17171a08409561
  $fReadRoute8 ::
    Text.ParserCombinators.ReadPrec.Prec
    -> forall b.
       (Yesod.Routes.Class.Route Main.Eco
        -> Text.ParserCombinators.ReadP.P b)
       -> Text.ParserCombinators.ReadP.P b
  {- Arity: 2, HasNoCafRefs, Strictness: <L,A><C(S),1*C1(U)>,
     Unfolding: InlineRule (2, True, True)
                (\ ds :: Text.ParserCombinators.ReadPrec.Prec
                   @ b
                   eta :: Yesod.Routes.Class.Route Main.Eco
                          -> Text.ParserCombinators.ReadP.P b ->
                 eta
                   Main.MensagemVazia `cast` (Sub (Sym (Main.TFCo:R:RouteEco[0])))) -}
59138307e257b4cefab2fe6a2b4eb9d5
  $fReadRoute9 :: [GHC.Types.Char]
  {- Unfolding: (GHC.CString.unpackCString# "MensagemVazia"#) -}
9ed68c590bfb4a360c17171a08409561
  $fReadRoute_$creadListPrec ::
    Text.ParserCombinators.ReadPrec.ReadPrec
      [Yesod.Routes.Class.Route Main.Eco]
  {- Arity: 2, Strictness: <L,A><L,C(U)>,
     Unfolding: InlineRule (0, True, True)
                Main.$fReadRoute1
                  `cast`
                (Trans
                     (<Text.ParserCombinators.ReadPrec.Prec>_R
                      ->_R Sym (Text.ParserCombinators.ReadP.NTCo:ReadP[0]
                                    <[Yesod.Routes.Class.Route Main.Eco]>_R))
                     (Sym (Text.ParserCombinators.ReadPrec.NTCo:ReadPrec[0]
                               <[Yesod.Routes.Class.Route Main.Eco]>_R))) -}
9ed68c590bfb4a360c17171a08409561
  $fReadRoute_$creadPrec ::
    Text.ParserCombinators.ReadPrec.ReadPrec
      (Yesod.Routes.Class.Route Main.Eco)
  {- Arity: 1,
     Unfolding: InlineRule (0, True, True)
                Main.$fReadRoute2
                  `cast`
                (Sym (Text.ParserCombinators.ReadPrec.NTCo:ReadPrec[0]
                          <Yesod.Routes.Class.Route Main.Eco>_R)) -}
9ed68c590bfb4a360c17171a08409561
  $fReadRoute_$s$dmreadsPrec ::
    GHC.Types.Int
    -> Text.ParserCombinators.ReadP.ReadS
         (Yesod.Routes.Class.Route Main.Eco)
  {- Arity: 1, Strictness: <L,U>,
     Unfolding: InlineRule (-1, True, False)
                (\ eta :: GHC.Types.Int ->
                 Text.ParserCombinators.ReadPrec.readPrec_to_S
                   @ (Yesod.Routes.Class.Route Main.Eco)
                   Main.$fReadRoute_$creadPrec
                   eta) -}
9ed68c590bfb4a360c17171a08409561
  $fReadRoute_$sreadListDefault ::
    Text.ParserCombinators.ReadP.ReadS
      [Yesod.Routes.Class.Route Main.Eco]
  {- Arity: 1,
     Unfolding: InlineRule (0, True, False)
                (Text.ParserCombinators.ReadP.run
                   @ [Yesod.Routes.Class.Route Main.Eco]
                   ((Main.$fReadRoute_$creadListPrec
                       `cast`
                     (Text.ParserCombinators.ReadPrec.NTCo:ReadPrec[0]
                          <[Yesod.Routes.Class.Route Main.Eco]>_R)
                       GHC.Read.$fRead(,)7)
                      `cast`
                    (Text.ParserCombinators.ReadP.NTCo:ReadP[0]
                         <[Yesod.Routes.Class.Route Main.Eco]>_R)
                      @ [Yesod.Routes.Class.Route Main.Eco]
                      (Text.ParserCombinators.ReadP.$fApplicativeP_$creturn
                         @ [Yesod.Routes.Class.Route Main.Eco]))) -}
9ed68c590bfb4a360c17171a08409561
  $fRenderRouteEco :: Yesod.Routes.Class.RenderRoute Main.Eco
  DFunId[0]
  {- Strictness: m, Inline: [ALWAYS] CONLIKE,
     Unfolding: DFun:.
                  @ Main.Eco Main.$fEqRoute Main.$fRenderRouteEco_$crenderRoute -}
12f4f4a2f02c33566eaa1622e8bd0dba
  $fRenderRouteEco1 ::
    ([Data.Text.Internal.Text],
     [(Data.Text.Internal.Text, Data.Text.Internal.Text)])
  {- Strictness: m,
     Unfolding: ((Main.$fRenderRouteEco2,
                  GHC.Types.[]
                    @ (Data.Text.Internal.Text, Data.Text.Internal.Text))) -}
2d5b4a2372bbbf30d6af10d3d442acad
  $fRenderRouteEco2 :: [Data.Text.Internal.Text]
  {- Strictness: m2,
     Unfolding: (GHC.Types.:
                   @ Data.Text.Internal.Text
                   Main.$fParseRouteEco2
                   (GHC.Types.[] @ Data.Text.Internal.Text)) -}
d6f8b11e6fe465c0420c677d538fa7d9
  $fRenderRouteEco3 ::
    ([Data.Text.Internal.Text],
     [(Data.Text.Internal.Text, Data.Text.Internal.Text)])
  {- HasNoCafRefs, Strictness: m,
     Unfolding: ((GHC.Types.[] @ Data.Text.Internal.Text,
                  GHC.Types.[]
                    @ (Data.Text.Internal.Text, Data.Text.Internal.Text))) -}
9ed68c590bfb4a360c17171a08409561
  $fRenderRouteEco_$crenderRoute ::
    Yesod.Routes.Class.Route Main.Eco
    -> ([Data.Text.Internal.Text],
        [(Data.Text.Internal.Text, Data.Text.Internal.Text)])
  {- Arity: 1, Strictness: <S,1*U>m,
     Unfolding: InlineRule (1, True, False)
                (\ ds :: Yesod.Routes.Class.Route Main.Eco ->
                 case ds `cast` (Sub (Main.TFCo:R:RouteEco[0])) of wild {
                   Main.HomeR -> Main.$fRenderRouteEco3
                   Main.MensagemR dyn
                   -> (GHC.Types.:
                         @ Data.Text.Internal.Text
                         Main.$fParseRouteEco2
                         (GHC.Types.:
                            @ Data.Text.Internal.Text
                            dyn
                            (GHC.Types.[] @ Data.Text.Internal.Text)),
                       GHC.Types.[] @ (Data.Text.Internal.Text, Data.Text.Internal.Text))
                   Main.MensagemVazia -> Main.$fRenderRouteEco1 }) -}
9ed68c590bfb4a360c17171a08409561
  $fRouteAttrsEco :: Yesod.Routes.Class.RouteAttrs Main.Eco
  DFunId[0]
  {- Strictness: m, Inline: [ALWAYS] CONLIKE,
     Unfolding: DFun:.
                  @ Main.Eco
                  Main.$fRenderRouteEco
                  Main.$fRouteAttrsEco_$crouteAttrs -}
1f458ef5514989a7bcdb953e713a24ce
  $fRouteAttrsEco1 :: Data.Set.Base.Set Data.Text.Internal.Text
  {- Unfolding: (Main.$fRouteAttrsEco_$sfromList
                   (GHC.Types.[] @ Data.Text.Internal.Text)) -}
9ed68c590bfb4a360c17171a08409561
  $fRouteAttrsEco_$crouteAttrs ::
    Yesod.Routes.Class.Route Main.Eco
    -> Data.Set.Base.Set Data.Text.Internal.Text
  {- Arity: 1, Strictness: <S,1*U>,
     Unfolding: InlineRule (1, True, False)
                (\ ds :: Yesod.Routes.Class.Route Main.Eco ->
                 case ds of tpl { DEFAULT -> Main.$fRouteAttrsEco1 }) -}
0105c1e8448eb3840e77572b076c4753
  $fRouteAttrsEco_$s$wgo5 ::
    GHC.Prim.Int#
    -> Data.Set.Base.Set Data.Text.Internal.Text
    -> GHC.Prim.ByteArray#
    -> GHC.Prim.Int#
    -> GHC.Prim.Int#
    -> [Data.Text.Internal.Text]
    -> Data.Set.Base.Set Data.Text.Internal.Text
  {- Arity: 6, Strictness: <L,U><S,1*U><L,U><L,U><L,U><L,U> -}
142c826cedec6606c9d39fdd56e912e6
  $fRouteAttrsEco_$sfromList ::
    [Data.Text.Internal.Text]
    -> Data.Set.Base.Set Data.Text.Internal.Text
  {- Arity: 1, Strictness: <S,1*U>,
     Unfolding: (\ ds :: [Data.Text.Internal.Text] ->
                 case ds of wild {
                   [] -> Data.Set.Base.Tip @ Data.Text.Internal.Text
                   : x1 ds1
                   -> case ds1 of wild1 {
                        []
                        -> case x1 of dt { Data.Text.Internal.Text ipv ipv1 ipv2 ->
                           Data.Set.Base.Bin
                             @ Data.Text.Internal.Text
                             1
                             dt
                             (Data.Set.Base.Tip @ Data.Text.Internal.Text)
                             (Data.Set.Base.Tip @ Data.Text.Internal.Text) }
                        : ipv ipv1
                        -> case x1 of ww { Data.Text.Internal.Text ww1 ww2 ww3 ->
                           case ipv of ww4 { Data.Text.Internal.Text ww5 ww6 ww7 ->
                           case Data.Text.$w$ccompare ww1 ww2 ww3 ww5 ww6 ww7 of wild2 {
                             DEFAULT
                             -> Main.$fRouteAttrsEco_$sgo5
                                  (Data.Set.Base.Bin
                                     @ Data.Text.Internal.Text
                                     1
                                     ww
                                     (Data.Set.Base.Tip @ Data.Text.Internal.Text)
                                     (Data.Set.Base.Tip @ Data.Text.Internal.Text))
                                  ww5
                                  ww6
                                  ww7
                                  ipv1
                             GHC.Types.LT
                             -> Main.$fRouteAttrsEco_$s$wgo5
                                  1
                                  (Data.Set.Base.Bin
                                     @ Data.Text.Internal.Text
                                     1
                                     ww
                                     (Data.Set.Base.Tip @ Data.Text.Internal.Text)
                                     (Data.Set.Base.Tip @ Data.Text.Internal.Text))
                                  ww5
                                  ww6
                                  ww7
                                  ipv1 } } } } }) -}
0e734dc857123d15cec5c3cf14c8086e
  $fRouteAttrsEco_$sgo5 ::
    Data.Set.Base.Set Data.Text.Internal.Text
    -> GHC.Prim.ByteArray#
    -> GHC.Prim.Int#
    -> GHC.Prim.Int#
    -> [Data.Text.Internal.Text]
    -> Data.Set.Base.Set Data.Text.Internal.Text
  {- Arity: 5, Strictness: <S,1*U><L,U><L,U><L,U><L,U> -}
bf7ba837cb81bd8e31281f1f62d2028d
  $fShowMensagem :: GHC.Show.Show Main.Mensagem
  DFunId[0]
  {- Strictness: m, Inline: [ALWAYS] CONLIKE,
     Unfolding: DFun:.
                  @ Main.Mensagem
                  Main.$fShowMensagem_$cshowsPrec
                  Main.$fShowMensagem_$cshow
                  Main.$fShowMensagem_$cshowList -}
bf7ba837cb81bd8e31281f1f62d2028d
  $fShowMensagem1 :: Main.Mensagem -> GHC.Show.ShowS
  {- Arity: 2,
     Unfolding: (\ w :: Main.Mensagem w1 :: GHC.Base.String ->
                 case w of ww { Main.Mensagem ww1 ->
                 Main.$w$cshowsPrec 0 ww1 w1 }) -}
46f9968325ea9633bcd2094335622a76
  $fShowMensagem2 :: [GHC.Types.Char]
  {- Unfolding: (GHC.CString.unpackCString# "Mensagem "#) -}
bf7ba837cb81bd8e31281f1f62d2028d
  $fShowMensagem_$cshow :: Main.Mensagem -> GHC.Base.String
  {- Arity: 1, Strictness: <S,1*U(1*U(U,U,U))>,
     Unfolding: InlineRule (1, True, False)
                (\ x1 :: Main.Mensagem ->
                 Main.$fShowMensagem_$cshowsPrec
                   GHC.Show.shows18
                   x1
                   (GHC.Types.[] @ GHC.Types.Char)) -}
bf7ba837cb81bd8e31281f1f62d2028d
  $fShowMensagem_$cshowList :: [Main.Mensagem] -> GHC.Show.ShowS
  {- Arity: 2,
     Unfolding: (GHC.Show.showList__
                   @ Main.Mensagem
                   Main.$fShowMensagem1) -}
bf7ba837cb81bd8e31281f1f62d2028d
  $fShowMensagem_$cshowsPrec ::
    GHC.Types.Int -> Main.Mensagem -> GHC.Show.ShowS
  {- Arity: 3, Strictness: <S,1*U(U)><S,1*U(1*U(U,U,U))><L,U>,
     Inline: INLINE[0],
     Unfolding: InlineRule (3, True, False)
                (\ w :: GHC.Types.Int w1 :: Main.Mensagem w2 :: GHC.Base.String ->
                 case w of ww { GHC.Types.I# ww1 ->
                 case w1 of ww2 { Main.Mensagem ww3 ->
                 Main.$w$cshowsPrec ww1 ww3 w2 } }) -}
9ed68c590bfb4a360c17171a08409561
  $fShowRoute :: GHC.Show.Show (Yesod.Routes.Class.Route Main.Eco)
  DFunId[0]
  {- Strictness: m, Inline: [ALWAYS] CONLIKE,
     Unfolding: DFun:.
                  @ (Yesod.Routes.Class.Route Main.Eco)
                  Main.$fShowRoute_$cshowsPrec
                  Main.$fShowRoute_$cshow
                  Main.$fShowRoute_$cshowList -}
9ed68c590bfb4a360c17171a08409561
  $fShowRoute1 :: Yesod.Routes.Class.Route Main.Eco -> GHC.Show.ShowS
  {- Arity: 2,
     Unfolding: (Main.$fShowRoute_$cshowsPrec Main.$fShowRoute2) -}
57dfc9350d7c6e91788cb15bddabd397
  $fShowRoute2 :: GHC.Types.Int
  {- HasNoCafRefs, Strictness: m, Unfolding: (GHC.Types.I# 0) -}
8fdda1900adfe049ea7caf9b43b2374a
  $fShowRoute3 :: [GHC.Types.Char]
  {- Unfolding: (GHC.CString.unpackCString# "MensagemR "#) -}
9ed68c590bfb4a360c17171a08409561
  $fShowRoute_$cshow ::
    Yesod.Routes.Class.Route Main.Eco -> GHC.Base.String
  {- Arity: 1, Strictness: <S,1*U>,
     Unfolding: InlineRule (1, True, False)
                (\ x1 :: Yesod.Routes.Class.Route Main.Eco ->
                 Main.$fShowRoute_$cshowsPrec
                   GHC.Show.shows18
                   x1
                   (GHC.Types.[] @ GHC.Types.Char)) -}
9ed68c590bfb4a360c17171a08409561
  $fShowRoute_$cshowList ::
    [Yesod.Routes.Class.Route Main.Eco] -> GHC.Show.ShowS
  {- Arity: 2,
     Unfolding: (GHC.Show.showList__
                   @ (Yesod.Routes.Class.Route Main.Eco)
                   Main.$fShowRoute1) -}
9ed68c590bfb4a360c17171a08409561
  $fShowRoute_$cshowsPrec ::
    GHC.Types.Int
    -> Yesod.Routes.Class.Route Main.Eco -> GHC.Show.ShowS
  {- Arity: 3, Strictness: <L,1*U(U)><S,1*U><L,U>,
     Unfolding: (\ ds :: GHC.Types.Int
                   ds1 :: Yesod.Routes.Class.Route Main.Eco
                   eta :: GHC.Base.String ->
                 case ds1 `cast` (Sub (Main.TFCo:R:RouteEco[0])) of wild {
                   Main.HomeR -> GHC.Base.++ @ GHC.Types.Char Main.$fReadRoute12 eta
                   Main.MensagemR b1
                   -> case ds of wild1 { GHC.Types.I# x1 ->
                      case GHC.Prim.tagToEnum#
                             @ GHC.Types.Bool
                             (GHC.Prim.>=# x1 11) of wild2 {
                        GHC.Types.False
                        -> GHC.Base.++
                             @ GHC.Types.Char
                             Main.$fShowRoute3
                             (case Data.Text.Show.$w$cshowsPrec b1 eta of ww { (#,#) ww1 ww2 ->
                              GHC.Types.: @ GHC.Types.Char ww1 ww2 })
                        GHC.Types.True
                        -> GHC.Types.:
                             @ GHC.Types.Char
                             GHC.Show.shows9
                             (GHC.Base.++
                                @ GHC.Types.Char
                                Main.$fShowRoute3
                                (case Data.Text.Show.$w$cshowsPrec
                                        b1
                                        (GHC.Types.:
                                           @ GHC.Types.Char
                                           GHC.Show.shows8
                                           eta) of ww { (#,#) ww1 ww2 ->
                                 GHC.Types.: @ GHC.Types.Char ww1 ww2 })) } }
                   Main.MensagemVazia
                   -> GHC.Base.++ @ GHC.Types.Char Main.$fReadRoute9 eta }) -}
9ed68c590bfb4a360c17171a08409561
  $fYesodDispatchEco ::
    Yesod.Core.Class.Dispatch.YesodDispatch Main.Eco
  DFunId[0]
  {- Strictness: m, Inline: [ALWAYS] CONLIKE,
     Unfolding: DFun:.
                  @ Main.Eco
                  Main.$fYesodEco
                  Main.$fYesodDispatchEco_$cyesodDispatch -}
9ed68c590bfb4a360c17171a08409561
  $fYesodDispatchEco_$cyesodDispatch ::
    Yesod.Core.Types.YesodRunnerEnv Main.Eco -> Network.Wai.Application
  {- Arity: 2,
     Strictness: <L,U(U,U,U,U,C(U(U,1*U(U,U,U))))><S(LLLLLLLSLLLLLL),1*U(U(U,U,U,U),U,U,U,U,U,U,U,U,U,U,U,U,U)>,
     Inline: INLINE[0],
     Unfolding: InlineRule (2, True, False)
                (\ w :: Yesod.Core.Types.YesodRunnerEnv Main.Eco
                   w1 :: Network.Wai.Internal.Request ->
                 case w1 of ww { Network.Wai.Internal.Request ww1 ww2 ww3 ww4 ww5 ww6 ww7 ww8 ww9 ww10 ww11 ww12 ww13 ww14 ->
                 Main.$w$cyesodDispatch
                   w
                   ww1
                   ww2
                   ww3
                   ww4
                   ww5
                   ww6
                   ww7
                   ww8
                   ww9
                   ww10
                   ww11
                   ww12
                   ww13
                   ww14 }) -}
9ed68c590bfb4a360c17171a08409561
  $fYesodEco :: Yesod.Core.Class.Yesod.Yesod Main.Eco
  DFunId[0]
  {- Inline: [ALWAYS] CONLIKE,
     Unfolding: DFun:.
                  @ Main.Eco
                  Main.$fRenderRouteEco
                  Main.$fYesodEco_$s$dmapproot
                  Main.$fYesodEco_$cerrorHandler
                  Main.$fYesodEco_$cdefaultLayout
                  Main.$fYesodEco_$s$dmurlRenderOverride
                  Main.$fYesodEco_$cisAuthorized
                  Main.$fYesodEco_$cisWriteRequest
                  Main.$fYesodEco_$s$dmauthRoute
                  Main.$fYesodEco_$ccleanPath
                  Main.$fYesodEco_$cjoinPath
                  Main.$fYesodEco_$caddStaticContent
                  Main.$fYesodEco_$s$dmmaximumContentLength
                  Main.$fYesodEco_$cmakeLogger
                  Main.$fYesodEco_$cmessageLoggerSource
                  Main.$fYesodEco_$s$dmjsLoader
                  Main.$fYesodEco_$cmakeSessionBackend
                  Main.$fYesodEco_$cfileUpload
                  Main.$fYesodEco_$s$dmshouldLog
                  Main.$fYesodEco_$cshouldLogIO
                  Main.$fYesodEco_$cyesodMiddleware
                  Main.$fYesodEco_$cyesodWithInternalState -}
9ed68c590bfb4a360c17171a08409561
  $fYesodEco1 ::
    Yesod.Core.Content.ToTypedContent res =>
    Yesod.Core.Types.HandlerT Main.Eco GHC.Types.IO res
    -> Yesod.Core.Types.HandlerData
         Main.Eco (Yesod.Core.Types.MonadRoute GHC.Types.IO)
    -> GHC.Prim.State# GHC.Prim.RealWorld
    -> (# GHC.Prim.State# GHC.Prim.RealWorld, res #)
  {- Arity: 4,
     Strictness: <L,A><L,1*C1(C1(U(U,U)))><S(SSLSL),1*U(U,U,U,U,U)><L,U>,
     Inline: INLINE[0],
     Unfolding: InlineRule (4, True, False)
                (\ @ res
                   w :: Yesod.Core.Content.ToTypedContent res
                   w1 :: Yesod.Core.Types.HandlerT Main.Eco GHC.Types.IO res
                   w2 :: Yesod.Core.Types.HandlerData
                           Main.Eco (Yesod.Core.Types.MonadRoute GHC.Types.IO)
                   w3 :: GHC.Prim.State# GHC.Prim.RealWorld[OneShot] ->
                 case w2 of ww { Yesod.Core.Types.HandlerData ww1 ww2 ww3 ww4 ww5 ->
                 Main.$wa @ res w1 ww1 ww2 ww3 ww4 ww5 w3 }) -}
9ed68c590bfb4a360c17171a08409561
  $fYesodEco10 ::
    Data.Text.Internal.Text
    -> Data.Text.Internal.Text
    -> Data.ByteString.Lazy.Internal.ByteString
    -> Yesod.Core.Types.HandlerData
         Main.Eco (Yesod.Core.Types.MonadRoute GHC.Types.IO)
    -> GHC.Prim.State# GHC.Prim.RealWorld
    -> (# GHC.Prim.State# GHC.Prim.RealWorld,
          GHC.Base.Maybe
            (Data.Either.Either
               Data.Text.Internal.Text
               (Yesod.Routes.Class.Route Main.Eco,
                [(Data.Text.Internal.Text, Data.Text.Internal.Text)])) #)
  {- Arity: 5, HasNoCafRefs, Strictness: <L,A><L,A><L,A><L,A><L,U>,
     Unfolding: InlineRule (5, True, True)
                (\ ds :: Data.Text.Internal.Text
                   ds1 :: Data.Text.Internal.Text
                   ds2 :: Data.ByteString.Lazy.Internal.ByteString
                   eta :: Yesod.Core.Types.HandlerData
                            Main.Eco (Yesod.Core.Types.MonadRoute GHC.Types.IO)
                   eta1 :: GHC.Prim.State# GHC.Prim.RealWorld[OneShot] ->
                 (# eta1,
                    GHC.Base.Nothing
                      @ (Data.Either.Either
                           Data.Text.Internal.Text
                           (Yesod.Routes.Class.Route Main.Eco,
                            [(Data.Text.Internal.Text, Data.Text.Internal.Text)])) #)) -}
d74d41c55c3dfebf49c82b15fb8ba7b4
  $fYesodEco11 :: Data.Text.Internal.Text -> Data.Text.Internal.Text
  {- Arity: 1 -}
0bcac27a6ca103e1d0ea58b4bf79b8e9
  $fYesodEco12 :: [Data.Text.Internal.Text]
  {- Strictness: m2,
     Unfolding: (GHC.Types.:
                   @ Data.Text.Internal.Text
                   Data.Text.Internal.empty_
                   (GHC.Types.[] @ Data.Text.Internal.Text)) -}
a6adf6a7f15f502a6c7b5857bd612df8
  $fYesodEco13 ::
    (Data.Text.Internal.Text, Data.Text.Internal.Text)
    -> (Data.ByteString.Internal.ByteString,
        GHC.Base.Maybe Data.ByteString.Internal.ByteString)
  {- Arity: 1,
     Unfolding: (\ ds :: (Data.Text.Internal.Text,
                          Data.Text.Internal.Text) ->
                 (case ds of wild { (,) x1 y -> Data.Text.Encoding.encodeUtf8 x1 },
                  case ds of wild { (,) x1 y ->
                  case y of wild1 { Data.Text.Internal.Text dt1 dt2 dt3 ->
                  case Data.Text.Internal.empty_ of wild2 { Data.Text.Internal.Text dt4 dt5 dt6 ->
                  case GHC.Prim.tagToEnum#
                         @ GHC.Types.Bool
                         (GHC.Prim.==# dt3 dt6) of wild3 {
                    GHC.Types.False
                    -> GHC.Base.Just
                         @ Data.ByteString.Internal.ByteString
                         (Data.Text.Encoding.$wencodeUtf8 dt1 dt2 dt3)
                    GHC.Types.True
                    -> case {__pkg_ccall text-1.2.1.3@text_1l1AN4I48k37RaQ6fm6CEh _hs_text_memcmp GHC.Prim.ByteArray#
                                                                                                  -> GHC.Prim.Word#
                                                                                                  -> GHC.Prim.ByteArray#
                                                                                                  -> GHC.Prim.Word#
                                                                                                  -> GHC.Prim.Word#
                                                                                                  -> GHC.Prim.State#
                                                                                                       GHC.Prim.RealWorld
                                                                                                  -> (# GHC.Prim.State#
                                                                                                          GHC.Prim.RealWorld,
                                                                                                        GHC.Prim.Int# #)}
                              dt1
                              (GHC.Prim.int2Word# dt2)
                              dt4
                              (GHC.Prim.int2Word# dt5)
                              (GHC.Prim.int2Word# dt3)
                              GHC.Prim.realWorld# of wild4 { (#,#) ds11 ds12 ->
                       case GHC.Prim.narrow32Int# ds12 of wild5 {
                         DEFAULT
                         -> GHC.Base.Just
                              @ Data.ByteString.Internal.ByteString
                              (Data.Text.Encoding.$wencodeUtf8 dt1 dt2 dt3)
                         0
                         -> GHC.Base.Nothing
                              @ Data.ByteString.Internal.ByteString } } } } } })) -}
4d7bf1aa5d3f0493f8bb1cd71341f189
  $fYesodEco14 :: Data.Text.Internal.Text -> Data.Text.Internal.Text
  {- Arity: 1,
     Unfolding: (\ t :: Data.Text.Internal.Text ->
                 case t of wild { Data.Text.Internal.Text dt dt1 dt2 ->
                 let {
                   a66 :: GHC.Prim.Int# = GHC.Prim.+# dt1 dt2
                 } in
                 letrec {
                   $wloop_all :: GHC.Prim.Int# -> GHC.Types.Bool
                     {- Arity: 1, Strictness: <L,U>, Inline: [0] -}
                   = \ ww :: GHC.Prim.Int# ->
                     case GHC.Prim.tagToEnum#
                            @ GHC.Types.Bool
                            (GHC.Prim.>=# ww a66) of wild1 {
                       GHC.Types.False
                       -> case GHC.Prim.indexWord16Array# dt ww of r# { DEFAULT ->
                          case GHC.Prim.tagToEnum#
                                 @ GHC.Types.Bool
                                 (GHC.Prim.geWord# r# __word 55296) of wild2 {
                            GHC.Types.False
                            -> case GHC.Prim.chr# (GHC.Prim.word2Int# r#) of wild4 {
                                 DEFAULT -> GHC.Types.False '-' -> $wloop_all (GHC.Prim.+# ww 1) }
                            GHC.Types.True
                            -> case GHC.Prim.tagToEnum#
                                      @ GHC.Types.Bool
                                      (GHC.Prim.leWord# r# __word 56319) of wild3 {
                                 GHC.Types.False
                                 -> case GHC.Prim.chr# (GHC.Prim.word2Int# r#) of wild4 {
                                      DEFAULT -> GHC.Types.False
                                      '-' -> $wloop_all (GHC.Prim.+# ww 1) }
                                 GHC.Types.True
                                 -> case GHC.Prim.indexWord16Array#
                                           dt
                                           (GHC.Prim.+# ww 1) of r#1 { DEFAULT ->
                                    case GHC.Prim.chr#
                                           (GHC.Prim.+#
                                              (GHC.Prim.+#
                                                 (GHC.Prim.uncheckedIShiftL#
                                                    (GHC.Prim.-# (GHC.Prim.word2Int# r#) 55296)
                                                    10)
                                                 (GHC.Prim.-# (GHC.Prim.word2Int# r#1) 56320))
                                              65536) of wild4 {
                                      DEFAULT -> GHC.Types.False
                                      '-' -> $wloop_all (GHC.Prim.+# ww 2) } } } } }
                       GHC.Types.True -> GHC.Types.True }
                 } in
                 case $wloop_all dt1 of wild1 {
                   GHC.Types.False -> wild
                   GHC.Types.True
                   -> case GHC.Prim.tagToEnum#
                             @ GHC.Types.Bool
                             (GHC.Prim.>=# 1 dt2) of wild3 {
                        GHC.Types.False
                        -> case Data.Text.$witerN
                                  Main.$fYesodEco15
                                  dt
                                  dt1
                                  dt2 of ww4 { DEFAULT ->
                           case GHC.Prim.-# dt2 ww4 of wild5 {
                             DEFAULT -> Data.Text.Internal.Text dt (GHC.Prim.+# dt1 ww4) wild5
                             0 -> Data.Text.Internal.empty } }
                        GHC.Types.True -> Data.Text.Internal.empty } } }) -}
6bfcdde2d7b82229ceecfb2edaa5319b
  $fYesodEco15 :: GHC.Types.Int
  {- HasNoCafRefs, Strictness: m, Unfolding: (GHC.Types.I# 1) -}
9d4e8c5147bb03d64f2d35058a7bc2d0
  $fYesodEco16 :: Data.Text.Internal.Text -> GHC.Types.Bool
  {- Arity: 1, HasNoCafRefs, Strictness: <S,1*U(A,A,U)>,
     Unfolding: InlineRule (1, True, False)
                (\ x1 :: Data.Text.Internal.Text ->
                 case x1 of wild { Data.Text.Internal.Text dt dt1 dt2 ->
                 case GHC.Prim.tagToEnum#
                        @ GHC.Types.Bool
                        (GHC.Prim.<=# dt2 0) of wild1 {
                   GHC.Types.False -> GHC.Types.True
                   GHC.Types.True -> GHC.Types.False } }) -}
9ed68c590bfb4a360c17171a08409561
  $fYesodEco17 ::
    Yesod.Core.Types.HandlerData
      Main.Eco (Yesod.Core.Types.MonadRoute GHC.Types.IO)
    -> GHC.Prim.State# GHC.Prim.RealWorld
    -> (# GHC.Prim.State# GHC.Prim.RealWorld, GHC.Types.Bool #)
  {- Arity: 2,
     Unfolding: (\ r :: Yesod.Core.Types.HandlerData
                          Main.Eco (Yesod.Core.Types.MonadRoute GHC.Types.IO)
                   s :: GHC.Prim.State# GHC.Prim.RealWorld[OneShot] ->
                 case (Main.$fYesodEco_ds
                         `cast`
                       (Yesod.Core.Types.NTCo:HandlerT[0]
                            <Main.Eco>_N <GHC.Types.IO>_N <Network.Wai.Internal.Request>_N)
                         r)
                        `cast`
                      (GHC.Types.NTCo:IO[0] <Network.Wai.Internal.Request>_R)
                        s of ds1 { (#,#) ipv ipv1 ->
                 (# ipv,
                    case GHC.List.elem
                           @ Network.HTTP.Types.Method.Method
                           Data.ByteString.Internal.$fEqByteString
                           (case ipv1 of wild { Network.Wai.Internal.Request ds2 ds3 ds4 ds5 ds6 ds7 ds8 ds9 ds10 ds11 ds12 ds13 ds14 ds15 ->
                            ds2 })
                           Main.$fYesodEco18 of wild {
                      GHC.Types.False -> GHC.Types.True
                      GHC.Types.True -> GHC.Types.False } #) }) -}
f1bec7b16ccfb16dada72998b9149aa6
  $fYesodEco18 :: [Network.HTTP.Types.Method.Method]
  {- Unfolding: (GHC.Types.:
                   @ Network.HTTP.Types.Method.Method
                   Main.$fYesodEco25
                   Main.$fYesodEco19) -}
44b4fc7e16b25818a539134bb7e14231
  $fYesodEco19 :: [Network.HTTP.Types.Method.Method]
  {- Unfolding: (GHC.Types.:
                   @ Network.HTTP.Types.Method.Method
                   Main.$fYesodEco24
                   Main.$fYesodEco20) -}
9ed68c590bfb4a360c17171a08409561
  $fYesodEco2 ::
    Main.Eco
    -> Control.Monad.Logger.LogSource
    -> Control.Monad.Logger.LogLevel
    -> GHC.Prim.State# GHC.Prim.RealWorld
    -> (# GHC.Prim.State# GHC.Prim.RealWorld, GHC.Types.Bool #)
  {- Arity: 4, HasNoCafRefs, Strictness: <L,A><L,A><L,1*U><L,U>,
     Unfolding: InlineRule (4, True, False)
                (\ a123 :: Main.Eco
                   b :: Control.Monad.Logger.LogSource
                   c :: Control.Monad.Logger.LogLevel
                   eta1 :: GHC.Prim.State# GHC.Prim.RealWorld[OneShot] ->
                 (# eta1, Yesod.Core.Class.Yesod.defaultShouldLog b c #)) -}
4ce92ebcd329bc05b3e544bc865c441e
  $fYesodEco20 :: [Network.HTTP.Types.Method.Method]
  {- Unfolding: (GHC.Types.:
                   @ Network.HTTP.Types.Method.Method
                   Main.$fYesodEco23
                   Main.$fYesodEco21) -}
58b551b1498a261c5bd8c02f5acf6f8e
  $fYesodEco21 :: [Network.HTTP.Types.Method.Method]
  {- Unfolding: (GHC.Types.:
                   @ Network.HTTP.Types.Method.Method
                   Main.$fYesodEco22
                   (GHC.Types.[] @ Network.HTTP.Types.Method.Method)) -}
ea33b4b477fb40121f41d2bea28154ee
  $fYesodEco22 :: Network.HTTP.Types.Method.Method
  {- Unfolding: (case GHC.Prim.newMutVar#
                        @ GHC.ForeignPtr.Finalizers
                        @ GHC.Prim.RealWorld
                        GHC.ForeignPtr.NoFinalizers
                        GHC.Prim.realWorld# of ds1 { (#,#) ipv ipv1 ->
                 let {
                   s :: GHC.Prim.Addr# = "TRACE"#
                 } in
                 case {__pkg_ccall bytestring-0.10.6.0@bytes_6elQVSg5cWdFrvRnfxTUrH strlen GHC.Prim.Addr#
                                                                                           -> GHC.Prim.State#
                                                                                                GHC.Prim.RealWorld
                                                                                           -> (# GHC.Prim.State#
                                                                                                   GHC.Prim.RealWorld,
                                                                                                 GHC.Prim.Word# #)}
                        s
                        ipv of wild { (#,#) ds3 ds4 ->
                 Data.ByteString.Internal.PS
                   s
                   (GHC.ForeignPtr.PlainForeignPtr ipv1)
                   0
                   (GHC.Prim.word2Int# ds4) } }) -}
2c28ae5f702f58e019e0fd03a68a7345
  $fYesodEco23 :: Network.HTTP.Types.Method.Method
  {- Unfolding: (case GHC.Prim.newMutVar#
                        @ GHC.ForeignPtr.Finalizers
                        @ GHC.Prim.RealWorld
                        GHC.ForeignPtr.NoFinalizers
                        GHC.Prim.realWorld# of ds1 { (#,#) ipv ipv1 ->
                 let {
                   s :: GHC.Prim.Addr# = "OPTIONS"#
                 } in
                 case {__pkg_ccall bytestring-0.10.6.0@bytes_6elQVSg5cWdFrvRnfxTUrH strlen GHC.Prim.Addr#
                                                                                           -> GHC.Prim.State#
                                                                                                GHC.Prim.RealWorld
                                                                                           -> (# GHC.Prim.State#
                                                                                                   GHC.Prim.RealWorld,
                                                                                                 GHC.Prim.Word# #)}
                        s
                        ipv of wild { (#,#) ds3 ds4 ->
                 Data.ByteString.Internal.PS
                   s
                   (GHC.ForeignPtr.PlainForeignPtr ipv1)
                   0
                   (GHC.Prim.word2Int# ds4) } }) -}
1886d460a05ed7aab2579cbafa5475f1
  $fYesodEco24 :: Network.HTTP.Types.Method.Method
  {- Unfolding: (case GHC.Prim.newMutVar#
                        @ GHC.ForeignPtr.Finalizers
                        @ GHC.Prim.RealWorld
                        GHC.ForeignPtr.NoFinalizers
                        GHC.Prim.realWorld# of ds1 { (#,#) ipv ipv1 ->
                 let {
                   s :: GHC.Prim.Addr# = "HEAD"#
                 } in
                 case {__pkg_ccall bytestring-0.10.6.0@bytes_6elQVSg5cWdFrvRnfxTUrH strlen GHC.Prim.Addr#
                                                                                           -> GHC.Prim.State#
                                                                                                GHC.Prim.RealWorld
                                                                                           -> (# GHC.Prim.State#
                                                                                                   GHC.Prim.RealWorld,
                                                                                                 GHC.Prim.Word# #)}
                        s
                        ipv of wild { (#,#) ds3 ds4 ->
                 Data.ByteString.Internal.PS
                   s
                   (GHC.ForeignPtr.PlainForeignPtr ipv1)
                   0
                   (GHC.Prim.word2Int# ds4) } }) -}
c49e94d53a8c76a9201aabc3647085b3
  $fYesodEco25 :: Network.HTTP.Types.Method.Method
  {- Unfolding: (case GHC.Prim.newMutVar#
                        @ GHC.ForeignPtr.Finalizers
                        @ GHC.Prim.RealWorld
                        GHC.ForeignPtr.NoFinalizers
                        GHC.Prim.realWorld# of ds1 { (#,#) ipv ipv1 ->
                 let {
                   s :: GHC.Prim.Addr# = "GET"#
                 } in
                 case {__pkg_ccall bytestring-0.10.6.0@bytes_6elQVSg5cWdFrvRnfxTUrH strlen GHC.Prim.Addr#
                                                                                           -> GHC.Prim.State#
                                                                                                GHC.Prim.RealWorld
                                                                                           -> (# GHC.Prim.State#
                                                                                                   GHC.Prim.RealWorld,
                                                                                                 GHC.Prim.Word# #)}
                        s
                        ipv of wild { (#,#) ds3 ds4 ->
                 Data.ByteString.Internal.PS
                   s
                   (GHC.ForeignPtr.PlainForeignPtr ipv1)
                   0
                   (GHC.Prim.word2Int# ds4) } }) -}
149cfc4bf0c3190d093b44f539b02a3e
  $fYesodEco26 ::
    Control.Monad.Trans.Resource.MonadResourceBase GHC.Types.IO
  {- Strictness: m,
     Unfolding: ((Control.Monad.Trans.Control.$fMonadBaseControlIOIO,
                  Control.Monad.Catch.$fMonadThrowIO,
                  Control.Monad.Base.$fMonadBaseIOIO,
                  Control.Monad.IO.Class.$fMonadIOIO,
                  GHC.Base.$fApplicativeIO)) -}
9ed68c590bfb4a360c17171a08409561
  $fYesodEco27 ::
    Control.Monad.Trans.Resource.Internal.MonadResource
      (Yesod.Core.Types.HandlerT Main.Eco GHC.Types.IO)
  {- Strictness: m,
     Unfolding: InlineRule (0, True, True)
                Main.$fYesodEco_$s$fMonadResourceHandlerT -}
9ed68c590bfb4a360c17171a08409561
  $fYesodEco28 ::
    Control.Monad.Base.MonadBase
      GHC.Types.IO (Yesod.Core.Types.HandlerT Main.Eco GHC.Types.IO)
  {- Strictness: m,
     Unfolding: InlineRule (0, True, True)
                Main.$fYesodEco_$s$fMonadBasebHandlerT -}
9ed68c590bfb4a360c17171a08409561
  $fYesodEco29 ::
    GHC.Base.Monad (Yesod.Core.Types.HandlerT Main.Eco GHC.Types.IO)
  {- Strictness: m,
     Unfolding: InlineRule (0, True, True)
                Main.$fYesodEco_$s$fMonadHandlerT -}
36cdceac08e582ccbae28112904394a4
  $fYesodEco3 :: Yesod.Core.Types.FileUpload
  {- Strictness: m1,
     Unfolding: (Yesod.Core.Types.FileUploadMemory Main.$fYesodEco4) -}
9ed68c590bfb4a360c17171a08409561
  $fYesodEco30 ::
    GHC.Base.String
    -> Yesod.Core.Types.HandlerT Main.Eco GHC.Types.IO a
  {- Arity: 1, Strictness: <B,U>b,
     Unfolding: InlineRule (1, True, True)
                (\ @ a66 eta :: [GHC.Types.Char] ->
                 GHC.Err.error
                   @ (Yesod.Core.Types.HandlerT Main.Eco GHC.Types.IO a66)
                   eta) -}
9ed68c590bfb4a360c17171a08409561
  $fYesodEco31 ::
    GHC.Base.Applicative
      (Yesod.Core.Types.HandlerT Main.Eco GHC.Types.IO)
  {- Strictness: m,
     Unfolding: InlineRule (0, True, True)
                Main.$fYesodEco_$s$fApplicativeHandlerT -}
9ed68c590bfb4a360c17171a08409561
  $fYesodEco32 ::
    GHC.Base.Functor (Yesod.Core.Types.HandlerT Main.Eco GHC.Types.IO)
  {- Strictness: m,
     Unfolding: InlineRule (0, True, True)
                (Yesod.Core.Handler.$s$fFunctorHandlerT @ Main.Eco) -}
9ed68c590bfb4a360c17171a08409561
  $fYesodEco33 ::
    Control.Monad.IO.Class.MonadIO
      (Yesod.Core.Types.HandlerT Main.Eco GHC.Types.IO)
  {- Strictness: m,
     Unfolding: InlineRule (0, True, True)
                Main.$fYesodEco_$s$fMonadIOHandlerT -}
9ed68c590bfb4a360c17171a08409561
  $fYesodEco34 ::
    Control.Monad.Catch.MonadThrow
      (Yesod.Core.Types.HandlerT Main.Eco GHC.Types.IO)
  {- Strictness: m,
     Unfolding: InlineRule (0, True, True)
                Main.$fYesodEco_$s$fMonadThrowHandlerT -}
9ed68c590bfb4a360c17171a08409561
  $fYesodEco35 ::
    Yesod.Routes.Class.Route Main.Eco
    -> GHC.Types.Bool
    -> Yesod.Core.Types.HandlerData
         Main.Eco (Yesod.Core.Types.MonadRoute GHC.Types.IO)
    -> GHC.Prim.State# GHC.Prim.RealWorld
    -> (# GHC.Prim.State# GHC.Prim.RealWorld,
          Yesod.Core.Types.AuthResult #)
  {- Arity: 4, HasNoCafRefs, Strictness: <L,A><L,A><L,A><L,U>,
     Unfolding: InlineRule (4, True, True)
                (\ ds :: Yesod.Routes.Class.Route Main.Eco
                   ds1 :: GHC.Types.Bool
                   eta :: Yesod.Core.Types.HandlerData
                            Main.Eco (Yesod.Core.Types.MonadRoute GHC.Types.IO)
                   eta1 :: GHC.Prim.State# GHC.Prim.RealWorld[OneShot] ->
                 (# eta1, Yesod.Core.Types.Authorized #)) -}
c24b9bba4750686c83baf0380c1fa641
  $fYesodEco4 ::
    Data.ByteString.Internal.ByteString
    -> Network.Wai.Parse.FileInfo ()
    -> GHC.Types.IO Data.ByteString.Internal.ByteString
    -> GHC.Types.IO Data.ByteString.Lazy.Internal.ByteString
  {- Arity: 3, Strictness: <L,A><L,A><L,U>,
     Unfolding: InlineRule (3, True, True)
                (\ w1 :: Data.ByteString.Internal.ByteString
                   w2 :: Network.Wai.Parse.FileInfo ()
                   w3 :: GHC.Types.IO Data.ByteString.Internal.ByteString ->
                 Network.Wai.Parse.$wlbsBackEnd
                   @ Data.ByteString.Internal.ByteString
                   @ (Network.Wai.Parse.FileInfo ())
                   @ GHC.Types.IO
                   GHC.Base.$fMonadIO
                   w3) -}
b0db434763f41c9d8447f11e4bfc5f0d
  $fYesodEco5 :: Yesod.Core.Types.FileUpload
  {- Strictness: m2,
     Unfolding: (Yesod.Core.Types.FileUploadDisk
                   (Network.Wai.Parse.tempFileBackEnd1
                      @ Data.ByteString.Internal.ByteString
                      @ (Network.Wai.Parse.FileInfo ()))
                     `cast`
                   (<Control.Monad.Trans.Resource.InternalState>_R
                    ->_R <Data.ByteString.Internal.ByteString>_R
                    ->_R <Network.Wai.Parse.FileInfo ()>_R
                    ->_R <GHC.Types.IO Data.ByteString.Internal.ByteString>_R
                    ->_R Sym (GHC.Types.NTCo:IO[0] <GHC.IO.FilePath>_R))) -}
9ed68c590bfb4a360c17171a08409561
  $fYesodEco6 ::
    Main.Eco
    -> GHC.Prim.State# GHC.Prim.RealWorld
    -> (# GHC.Prim.State# GHC.Prim.RealWorld,
          GHC.Base.Maybe Yesod.Core.Types.SessionBackend #)
  {- Arity: 2, Strictness: <L,A><L,U>, Inline: INLINE[0],
     Unfolding: InlineRule (2, True, True)
                (\ w :: Main.Eco
                   w1 :: GHC.Prim.State# GHC.Prim.RealWorld[OneShot] ->
                 Main.$wa1 w1) -}
51ecd7c25b6d3819b793893929c8daf9
  $fYesodEco7 :: GHC.Integer.Type.Integer
  {- HasNoCafRefs, Unfolding: (__integer 7200000000000000) -}
9ed68c590bfb4a360c17171a08409561
  $fYesodEco8 ::
    Main.Eco
    -> Yesod.Core.Types.Logger
    -> Language.Haskell.TH.Syntax.Loc
    -> Control.Monad.Logger.LogSource
    -> Control.Monad.Logger.LogLevel
    -> System.Log.FastLogger.LogStr.LogStr
    -> GHC.Prim.State# GHC.Prim.RealWorld
    -> (# GHC.Prim.State# GHC.Prim.RealWorld, () #)
  {- Arity: 7,
     Strictness: <L,A><L,U(U(A,1*U(U),1*U(U(U),U(U),A,U),1*C1(U(U,U))),U)><L,1*U(1*U,U,1*U,1*U(1*U(U),1*U(U)),A)><L,1*U(U,U,U)><S,U><L,1*U(U,C(U))><L,U>,
     Inline: INLINE[0],
     Unfolding: InlineRule (7, True, True)
                (\ w :: Main.Eco
                   w1 :: Yesod.Core.Types.Logger
                   w2 :: Language.Haskell.TH.Syntax.Loc
                   w3 :: Control.Monad.Logger.LogSource
                   w4 :: Control.Monad.Logger.LogLevel
                   w5 :: System.Log.FastLogger.LogStr.LogStr
                   w6 :: GHC.Prim.State# GHC.Prim.RealWorld[OneShot] ->
                 Main.$wa2 w1 w2 w3 w4 w5 w6) -}
9ed68c590bfb4a360c17171a08409561
  $fYesodEco9 ::
    Main.Eco
    -> GHC.Prim.State# GHC.Prim.RealWorld
    -> (# GHC.Prim.State# GHC.Prim.RealWorld,
          Yesod.Core.Types.Logger #)
  {- Arity: 2, Strictness: <L,A>,
     Unfolding: InlineRule (1, True, True)
                (\ ds :: Main.Eco
                   eta :: GHC.Prim.State# GHC.Prim.RealWorld[OneShot] ->
                 Yesod.Core.Class.Yesod.defaultMakeLogger1 eta) -}
9ed68c590bfb4a360c17171a08409561
  $fYesodEco_$caddStaticContent ::
    Data.Text.Internal.Text
    -> Data.Text.Internal.Text
    -> Data.ByteString.Lazy.Internal.ByteString
    -> Yesod.Core.Types.HandlerT
         Main.Eco
         GHC.Types.IO
         (GHC.Base.Maybe
            (Data.Either.Either
               Data.Text.Internal.Text
               (Yesod.Routes.Class.Route Main.Eco,
                [(Data.Text.Internal.Text, Data.Text.Internal.Text)])))
  {- Arity: 5, HasNoCafRefs, Strictness: <L,A><L,A><L,A><L,A><L,U>,
     Unfolding: InlineRule (0, True, True)
                Main.$fYesodEco10
                  `cast`
                (<Data.Text.Internal.Text>_R
                 ->_R <Data.Text.Internal.Text>_R
                 ->_R <Data.ByteString.Lazy.Internal.ByteString>_R
                 ->_R Trans
                          (<Yesod.Core.Types.HandlerData
                              Main.Eco (Yesod.Core.Types.MonadRoute GHC.Types.IO)>_R
                           ->_R Sym (GHC.Types.NTCo:IO[0]
                                         <GHC.Base.Maybe
                                            (Data.Either.Either
                                               Data.Text.Internal.Text
                                               (Yesod.Routes.Class.Route Main.Eco,
                                                [(Data.Text.Internal.Text,
                                                  Data.Text.Internal.Text)]))>_R))
                          (Sym (Yesod.Core.Types.NTCo:HandlerT[0]
                                    <Main.Eco>_N
                                    <GHC.Types.IO>_N
                                    <GHC.Base.Maybe
                                       (Data.Either.Either
                                          Data.Text.Internal.Text
                                          (Yesod.Routes.Class.Route Main.Eco,
                                           [(Data.Text.Internal.Text,
                                             Data.Text.Internal.Text)]))>_N))) -}
9ed68c590bfb4a360c17171a08409561
  $fYesodEco_$ccleanPath ::
    Main.Eco
    -> [Data.Text.Internal.Text]
    -> Data.Either.Either
         [Data.Text.Internal.Text] [Data.Text.Internal.Text]
  {- Arity: 2, Strictness: <L,A><S,U>, Inline: INLINE[0],
     Unfolding: InlineRule (2, True, True)
                (\ w :: Main.Eco w1 :: [Data.Text.Internal.Text] ->
                 Main.$w$ccleanPath w1) -}
9ed68c590bfb4a360c17171a08409561
  $fYesodEco_$cdefaultLayout ::
    Yesod.Core.Types.WidgetT Main.Eco GHC.Types.IO ()
    -> Yesod.Core.Types.HandlerT
         Main.Eco GHC.Types.IO Text.Blaze.Html.Html
  {- Arity: 1, Strictness: <L,U> -}
9ed68c590bfb4a360c17171a08409561
  $fYesodEco_$cerrorHandler ::
    Yesod.Core.Types.ErrorResponse
    -> Yesod.Core.Types.HandlerT
         Main.Eco GHC.Types.IO Yesod.Core.Types.TypedContent
  {- Arity: 1, Strictness: <S,1*U> -}
9ed68c590bfb4a360c17171a08409561
  $fYesodEco_$cfileUpload ::
    Main.Eco
    -> Network.Wai.Internal.RequestBodyLength
    -> Yesod.Core.Types.FileUpload
  {- Arity: 2, Strictness: <L,A><S,1*U>, Inline: INLINE[0],
     Unfolding: InlineRule (2, True, True)
                (\ w :: Main.Eco w1 :: Network.Wai.Internal.RequestBodyLength ->
                 Main.$w$cfileUpload w1) -}
9ed68c590bfb4a360c17171a08409561
  $fYesodEco_$cisAuthorized ::
    Yesod.Routes.Class.Route Main.Eco
    -> GHC.Types.Bool
    -> Yesod.Core.Types.HandlerT
         Main.Eco GHC.Types.IO Yesod.Core.Types.AuthResult
  {- Arity: 4, HasNoCafRefs, Strictness: <L,A><L,A><L,A><L,U>,
     Unfolding: InlineRule (0, True, True)
                Main.$fYesodEco35
                  `cast`
                (<Yesod.Routes.Class.Route Main.Eco>_R
                 ->_R <GHC.Types.Bool>_R
                 ->_R Trans
                          (<Yesod.Core.Types.HandlerData
                              Main.Eco (Yesod.Core.Types.MonadRoute GHC.Types.IO)>_R
                           ->_R Sym (GHC.Types.NTCo:IO[0] <Yesod.Core.Types.AuthResult>_R))
                          (Sym (Yesod.Core.Types.NTCo:HandlerT[0]
                                    <Main.Eco>_N
                                    <GHC.Types.IO>_N
                                    <Yesod.Core.Types.AuthResult>_N))) -}
9ed68c590bfb4a360c17171a08409561
  $fYesodEco_$cisWriteRequest ::
    Yesod.Routes.Class.Route Main.Eco
    -> Yesod.Core.Types.HandlerT Main.Eco GHC.Types.IO GHC.Types.Bool
  {- Arity: 3, Strictness: <L,A>, Inline: INLINE[0],
     Unfolding: InlineRule (1, True, True)
                (\ w :: Yesod.Routes.Class.Route Main.Eco
                   eta :: Yesod.Core.Types.HandlerData
                            Main.Eco (Yesod.Core.Types.MonadRoute GHC.Types.IO)
                   eta1 :: GHC.Prim.State# GHC.Prim.RealWorld[OneShot] ->
                 Main.$fYesodEco17 eta eta1)
                  `cast`
                (<Yesod.Routes.Class.Route Main.Eco>_R
                 ->_R Trans
                          (<Yesod.Core.Types.HandlerData
                              Main.Eco (Yesod.Core.Types.MonadRoute GHC.Types.IO)>_R
                           ->_R Sym (GHC.Types.NTCo:IO[0] <GHC.Types.Bool>_R))
                          (Sym (Yesod.Core.Types.NTCo:HandlerT[0]
                                    <Main.Eco>_N <GHC.Types.IO>_N <GHC.Types.Bool>_N))) -}
9ed68c590bfb4a360c17171a08409561
  $fYesodEco_$cjoinPath ::
    Main.Eco
    -> Data.Text.Internal.Text
    -> [Data.Text.Internal.Text]
    -> [(Data.Text.Internal.Text, Data.Text.Internal.Text)]
    -> Data.ByteString.Builder.Internal.Builder
  {- Arity: 4, Strictness: <L,A><L,1*U(U,U,U)><L,1*U><L,1*U>,
     Inline: INLINE[0],
     Unfolding: InlineRule (4, True, True)
                (\ w :: Main.Eco
                   w1 :: Data.Text.Internal.Text
                   w2 :: [Data.Text.Internal.Text]
                   w3 :: [(Data.Text.Internal.Text, Data.Text.Internal.Text)] ->
                 Main.$w$cjoinPath w1 w2 w3) -}
9ed68c590bfb4a360c17171a08409561
  $fYesodEco_$cmakeLogger ::
    Main.Eco -> GHC.Types.IO Yesod.Core.Types.Logger
  {- Arity: 2, Strictness: <L,A>,
     Unfolding: InlineRule (0, True, True)
                Main.$fYesodEco9
                  `cast`
                (<Main.Eco>_R
                 ->_R Sym (GHC.Types.NTCo:IO[0] <Yesod.Core.Types.Logger>_R)) -}
9ed68c590bfb4a360c17171a08409561
  $fYesodEco_$cmakeSessionBackend ::
    Main.Eco
    -> GHC.Types.IO (GHC.Base.Maybe Yesod.Core.Types.SessionBackend)
  {- Arity: 2, Strictness: <L,A><L,U>,
     Unfolding: InlineRule (0, True, True)
                Main.$fYesodEco6
                  `cast`
                (<Main.Eco>_R
                 ->_R Sym (GHC.Types.NTCo:IO[0]
                               <GHC.Base.Maybe Yesod.Core.Types.SessionBackend>_R)) -}
9ed68c590bfb4a360c17171a08409561
  $fYesodEco_$cmessageLoggerSource ::
    Main.Eco
    -> Yesod.Core.Types.Logger
    -> Language.Haskell.TH.Syntax.Loc
    -> Control.Monad.Logger.LogSource
    -> Control.Monad.Logger.LogLevel
    -> System.Log.FastLogger.LogStr.LogStr
    -> GHC.Types.IO ()
  {- Arity: 7,
     Strictness: <L,A><L,U(U(A,1*U(U),1*U(U(U),U(U),A,U),1*C1(U(U,U))),U)><L,1*U(1*U,U,1*U,1*U(1*U(U),1*U(U)),A)><L,1*U(U,U,U)><S,U><L,1*U(U,C(U))><L,U>,
     Unfolding: InlineRule (0, True, True)
                Main.$fYesodEco8
                  `cast`
                (<Main.Eco>_R
                 ->_R <Yesod.Core.Types.Logger>_R
                 ->_R <Language.Haskell.TH.Syntax.Loc>_R
                 ->_R <Control.Monad.Logger.LogSource>_R
                 ->_R <Control.Monad.Logger.LogLevel>_R
                 ->_R <System.Log.FastLogger.LogStr.LogStr>_R
                 ->_R Sym (GHC.Types.NTCo:IO[0] <()>_R)) -}
9ed68c590bfb4a360c17171a08409561
  $fYesodEco_$cshouldLogIO ::
    Main.Eco
    -> Control.Monad.Logger.LogSource
    -> Control.Monad.Logger.LogLevel
    -> GHC.Types.IO GHC.Types.Bool
  {- Arity: 4, HasNoCafRefs, Strictness: <L,A><L,A><L,1*U><L,U>,
     Unfolding: InlineRule (0, True, True)
                Main.$fYesodEco2
                  `cast`
                (<Main.Eco>_R
                 ->_R <Control.Monad.Logger.LogSource>_R
                 ->_R <Control.Monad.Logger.LogLevel>_R
                 ->_R Sym (GHC.Types.NTCo:IO[0] <GHC.Types.Bool>_R)) -}
9ed68c590bfb4a360c17171a08409561
  $fYesodEco_$cyesodMiddleware ::
    Yesod.Core.Content.ToTypedContent res =>
    Yesod.Core.Types.HandlerT Main.Eco GHC.Types.IO res
    -> Yesod.Core.Types.HandlerT Main.Eco GHC.Types.IO res
  {- Arity: 4,
     Strictness: <L,A><L,1*C1(C1(U(U,U)))><S(SSLSL),1*U(U,U,U,U,U)><L,U>,
     Unfolding: InlineRule (0, True, True)
                Main.$fYesodEco1
                  `cast`
                (forall res.
                 <Yesod.Core.Content.ToTypedContent res>_R
                 ->_R <Yesod.Core.Types.HandlerT Main.Eco GHC.Types.IO res>_R
                 ->_R Trans
                          (<Yesod.Core.Types.HandlerData
                              Main.Eco (Yesod.Core.Types.MonadRoute GHC.Types.IO)>_R
                           ->_R Sym (GHC.Types.NTCo:IO[0] <res>_R))
                          (Sym (Yesod.Core.Types.NTCo:HandlerT[0]
                                    <Main.Eco>_N <GHC.Types.IO>_N <res>_N))) -}
9ed68c590bfb4a360c17171a08409561
  $fYesodEco_$cyesodWithInternalState ::
    Main.Eco
    -> GHC.Base.Maybe (Yesod.Routes.Class.Route Main.Eco)
    -> (Control.Monad.Trans.Resource.InternalState -> GHC.Types.IO a)
    -> GHC.Types.IO a
  {- Arity: 4, Strictness: <L,A><L,A><L,1*C1(C1(U))><L,U>,
     Inline: INLINE (sat-args=2),
     Unfolding: InlineRule (2, False, True)
                (\ @ a123
                   ds :: Main.Eco
                   ds1 :: GHC.Base.Maybe (Yesod.Routes.Class.Route Main.Eco)
                   eta1 :: Control.Monad.Trans.Resource.InternalState
                           -> GHC.Types.IO a123
                   eta2 :: GHC.Prim.State# GHC.Prim.RealWorld[OneShot] ->
                 (Control.Exception.Base.bracket
                    @ Control.Monad.Trans.Resource.InternalState
                    @ ()
                    @ a123
                    Yesod.Core.Class.Yesod.$dmyesodWithInternalState_$screateInternalState
                    Yesod.Core.Class.Yesod.$dmyesodWithInternalState_$scloseInternalState
                    eta1)
                   `cast`
                 (GHC.Types.NTCo:IO[0] <a123>_R)
                   eta2)
                  `cast`
                (forall a123.
                 <Main.Eco>_R
                 ->_R <GHC.Base.Maybe (Yesod.Routes.Class.Route Main.Eco)>_R
                 ->_R <Control.Monad.Trans.Resource.InternalState
                       -> GHC.Types.IO a123>_R
                 ->_R Sym (GHC.Types.NTCo:IO[0] <a123>_R)) -}
9ed68c590bfb4a360c17171a08409561
  $fYesodEco_$s$dmapproot :: Yesod.Core.Types.Approot Main.Eco
  {- HasNoCafRefs,
     Unfolding: InlineRule (-1, True, True)
                (Yesod.Core.Types.ApprootRelative @ Main.Eco) -}
9ed68c590bfb4a360c17171a08409561
  $fYesodEco_$s$dmauthRoute ::
    Main.Eco -> GHC.Base.Maybe (Yesod.Routes.Class.Route Main.Eco)
  {- Arity: 1, HasNoCafRefs, Strictness: <L,A>,
     Unfolding: InlineRule (-1, True, True)
                (\ ds :: Main.Eco ->
                 GHC.Base.Nothing @ (Yesod.Routes.Class.Route Main.Eco)) -}
9ed68c590bfb4a360c17171a08409561
  $fYesodEco_$s$dmjsLoader ::
    Main.Eco -> Yesod.Core.Types.ScriptLoadPosition Main.Eco
  {- Arity: 1, HasNoCafRefs, Strictness: <L,A>,
     Unfolding: InlineRule (-1, True, True)
                (\ ds :: Main.Eco -> Yesod.Core.Types.BottomOfBody @ Main.Eco) -}
9ed68c590bfb4a360c17171a08409561
  $fYesodEco_$s$dmmaximumContentLength ::
    Main.Eco
    -> GHC.Base.Maybe (Yesod.Routes.Class.Route Main.Eco)
    -> GHC.Base.Maybe GHC.Word.Word64
  {- Arity: 2, HasNoCafRefs, Strictness: <L,A><L,A>m2,
     Unfolding: InlineRule (-1, True, False)
                (\ ds :: Main.Eco
                   ds1 :: GHC.Base.Maybe (Yesod.Routes.Class.Route Main.Eco) ->
                 GHC.Base.$
                   @ GHC.Word.Word64
                   @ (GHC.Base.Maybe GHC.Word.Word64)
                   (GHC.Base.Just @ GHC.Word.Word64)
                   (GHC.Word.$fNumWord64_$c*
                      (GHC.Word.$fNumWord64_$c*
                         (GHC.Word.$cfromInteger3 __integer 2)
                         (GHC.Word.$cfromInteger3 __integer 1024))
                      (GHC.Word.$cfromInteger3 __integer 1024))) -}
9ed68c590bfb4a360c17171a08409561
  $fYesodEco_$s$dmshouldLog ::
    Main.Eco
    -> Control.Monad.Logger.LogSource
    -> Control.Monad.Logger.LogLevel
    -> GHC.Types.Bool
  {- Arity: 3, HasNoCafRefs, Strictness: <L,A><L,A><S,1*U>,
     Unfolding: InlineRule (-1, True, True)
                (\ ds :: Main.Eco
                   eta1 :: Control.Monad.Logger.LogSource
                   eta2 :: Control.Monad.Logger.LogLevel ->
                 Yesod.Core.Class.Yesod.defaultShouldLog eta1 eta2) -}
9ed68c590bfb4a360c17171a08409561
  $fYesodEco_$s$dmurlRenderOverride ::
    Main.Eco
    -> Yesod.Routes.Class.Route Main.Eco
    -> GHC.Base.Maybe Data.ByteString.Builder.Internal.Builder
  {- Arity: 2, HasNoCafRefs, Strictness: <L,A><L,A>,
     Unfolding: InlineRule (-1, True, True)
                (\ ds :: Main.Eco ds1 :: Yesod.Routes.Class.Route Main.Eco ->
                 GHC.Base.Nothing @ Data.ByteString.Builder.Internal.Builder) -}
9ed68c590bfb4a360c17171a08409561
  $fYesodEco_$s$fApplicativeHandlerT ::
    GHC.Base.Applicative
      (Yesod.Core.Types.HandlerT Main.Eco GHC.Types.IO)
  {- HasNoCafRefs, Strictness: m, Inline: [ALWAYS] CONLIKE,
     Unfolding: DFun:.
                  @ (Yesod.Core.Types.HandlerT Main.Eco GHC.Types.IO)
                  Main.$fYesodEco32
                  Main.$fYesodEco_$s$fApplicativeHandlerT_$cpure
                  (Yesod.Core.Types.$fApplicativeHandlerT_$c<*>
                     @ Main.Eco
                     @ GHC.Types.IO
                     Main.$fYesodEco32
                     GHC.Base.$fMonadIO)
                  (Yesod.Core.Types.$fApplicativeHandlerT_$c*>
                     @ Main.Eco
                     @ GHC.Types.IO
                     Main.$fYesodEco32
                     GHC.Base.$fMonadIO)
                  (Yesod.Core.Types.$fApplicativeHandlerT_$c<*
                     @ Main.Eco
                     @ GHC.Types.IO
                     Main.$fYesodEco32
                     GHC.Base.$fMonadIO) -}
9ed68c590bfb4a360c17171a08409561
  $fYesodEco_$s$fApplicativeHandlerT_$cpure ::
    a -> Yesod.Core.Types.HandlerT Main.Eco GHC.Types.IO a
  {- Arity: 3, HasNoCafRefs, Strictness: <L,U><L,A><L,U>,
     Unfolding: InlineRule (1, True, True)
                (\ @ a66
                   eta :: a66
                   eta1 :: Yesod.Core.Types.HandlerData
                             Main.Eco (Yesod.Core.Types.MonadRoute GHC.Types.IO)
                   eta2 :: GHC.Prim.State# GHC.Prim.RealWorld[OneShot] ->
                 (GHC.Base.returnIO @ a66 eta) `cast` (GHC.Types.NTCo:IO[0] <a66>_R)
                   eta2)
                  `cast`
                (forall a66.
                 <a66>_R
                 ->_R Trans
                          (<Yesod.Core.Types.HandlerData
                              Main.Eco (Yesod.Core.Types.MonadRoute GHC.Types.IO)>_R
                           ->_R Sym (GHC.Types.NTCo:IO[0] <a66>_R))
                          (Sym (Yesod.Core.Types.NTCo:HandlerT[0]
                                    <Main.Eco>_N <GHC.Types.IO>_N <a66>_N))) -}
9ed68c590bfb4a360c17171a08409561
  $fYesodEco_$s$fMonadBasebHandlerT ::
    Control.Monad.Base.MonadBase
      GHC.Types.IO (Yesod.Core.Types.HandlerT Main.Eco GHC.Types.IO)
  {- Strictness: m, Inline: [ALWAYS] CONLIKE,
     Unfolding: DFun:.
                  @ GHC.Types.IO
                  @ (Yesod.Core.Types.HandlerT Main.Eco GHC.Types.IO)
                  GHC.Base.$fApplicativeIO
                  Main.$fYesodEco31
                  GHC.Base.$fMonadIO
                  Main.$fYesodEco29
                  Main.$fYesodEco_$s$fMonadBasebHandlerT_$cliftBase -}
9ed68c590bfb4a360c17171a08409561
  $fYesodEco_$s$fMonadBasebHandlerT_$cliftBase ::
    GHC.Types.IO α -> Yesod.Core.Types.HandlerT Main.Eco GHC.Types.IO α
  {- Arity: 2, HasNoCafRefs, Strictness: <S,1*U><L,A>,
     Unfolding: InlineRule (1, True, False)
                (\ @ α eta :: GHC.Types.IO α ->
                 let {
                   eta1 :: GHC.Types.IO α = GHC.Base.id @ (GHC.Types.IO α) eta
                 } in
                 (\ ds :: Yesod.Core.Types.HandlerData
                            Main.Eco (Yesod.Core.Types.MonadRoute GHC.Types.IO) ->
                  eta1)
                   `cast`
                 (Sym (Yesod.Core.Types.NTCo:HandlerT[0]
                           <Main.Eco>_N <GHC.Types.IO>_N <α>_N))) -}
9ed68c590bfb4a360c17171a08409561
  $fYesodEco_$s$fMonadHandlerHandlerT ::
    Yesod.Core.Class.Handler.MonadHandler
      (Yesod.Core.Types.HandlerT Main.Eco GHC.Types.IO)
  {- Strictness: m, Inline: [ALWAYS] CONLIKE,
     Unfolding: DFun:.
                  @ (Yesod.Core.Types.HandlerT Main.Eco GHC.Types.IO)
                  Main.$fYesodEco27
                  (Yesod.Core.Class.Handler.$fMonadHandlerHandlerT_$cliftHandlerT
                     @ Main.Eco
                     @ GHC.Types.IO
                     Main.$fYesodEco27
                     Main.$fYesodEco26) -}
9ed68c590bfb4a360c17171a08409561
  $fYesodEco_$s$fMonadHandlerT ::
    GHC.Base.Monad (Yesod.Core.Types.HandlerT Main.Eco GHC.Types.IO)
  {- Strictness: m, Inline: [ALWAYS] CONLIKE,
     Unfolding: DFun:.
                  @ (Yesod.Core.Types.HandlerT Main.Eco GHC.Types.IO)
                  Main.$fYesodEco31
                  (Yesod.Core.Types.$fMonadHandlerT_$c>>=
                     @ Main.Eco
                     @ GHC.Types.IO
                     Main.$fYesodEco31
                     GHC.Base.$fMonadIO)
                  (Yesod.Core.Types.$fMonadHandlerT_$c>>
                     @ Main.Eco
                     @ GHC.Types.IO
                     Main.$fYesodEco31
                     GHC.Base.$fMonadIO)
                  Main.$fYesodEco_$s$fApplicativeHandlerT_$cpure
                  Main.$fYesodEco30 -}
9ed68c590bfb4a360c17171a08409561
  $fYesodEco_$s$fMonadIOHandlerT ::
    Control.Monad.IO.Class.MonadIO
      (Yesod.Core.Types.HandlerT Main.Eco GHC.Types.IO)
  {- Strictness: m, Inline: [ALWAYS] CONLIKE,
     Unfolding: DFun:.
                  @ (Yesod.Core.Types.HandlerT Main.Eco GHC.Types.IO)
                  Main.$fYesodEco29
                  Main.$fYesodEco_$s$fMonadBasebHandlerT_$cliftBase -}
9ed68c590bfb4a360c17171a08409561
  $fYesodEco_$s$fMonadResourceHandlerT ::
    Control.Monad.Trans.Resource.Internal.MonadResource
      (Yesod.Core.Types.HandlerT Main.Eco GHC.Types.IO)
  {- Strictness: m, Inline: [ALWAYS] CONLIKE,
     Unfolding: DFun:.
                  @ (Yesod.Core.Types.HandlerT Main.Eco GHC.Types.IO)
                  Main.$fYesodEco34
                  Main.$fYesodEco33
                  Main.$fYesodEco31
                  Main.$fYesodEco28
                  (Yesod.Core.Types.$fMonadResourceHandlerT_$cliftResourceT
                     @ Main.Eco
                     @ GHC.Types.IO
                     Main.$fYesodEco34
                     Main.$fYesodEco33
                     Main.$fYesodEco31
                     Main.$fYesodEco28
                     Control.Monad.IO.Class.$fMonadIOIO
                     Control.Monad.Base.$fMonadBaseIOIO
                     Control.Monad.Catch.$fMonadThrowIO) -}
9ed68c590bfb4a360c17171a08409561
  $fYesodEco_$s$fMonadThrowHandlerT ::
    Control.Monad.Catch.MonadThrow
      (Yesod.Core.Types.HandlerT Main.Eco GHC.Types.IO)
  {- Strictness: m, Inline: [ALWAYS] CONLIKE,
     Unfolding: DFun:.
                  @ (Yesod.Core.Types.HandlerT Main.Eco GHC.Types.IO)
                  Main.$fYesodEco29
                  Main.$fYesodEco_$s$fMonadThrowHandlerT_$cthrowM -}
9ed68c590bfb4a360c17171a08409561
  $fYesodEco_$s$fMonadThrowHandlerT_$cthrowM ::
    GHC.Exception.Exception e =>
    e -> Yesod.Core.Types.HandlerT Main.Eco GHC.Types.IO a
  {- Arity: 4, HasNoCafRefs,
     Strictness: <B,1*U(A,A,1*C1(U),A,A)><B,U><B,A><B,U>b,
     Unfolding: InlineRule (1, True, True)
                (\ @ e
                   @ a66
                   eta :: GHC.Exception.Exception e
                   x1 :: e
                   eta1 :: Yesod.Core.Types.HandlerData
                             Main.Eco (Yesod.Core.Types.MonadRoute GHC.Types.IO)
                   eta2 :: GHC.Prim.State# GHC.Prim.RealWorld[OneShot] ->
                 (GHC.IO.throwIO @ e @ a66 eta x1)
                   `cast`
                 (GHC.Types.NTCo:IO[0] <a66>_R)
                   eta2)
                  `cast`
                (forall e a66.
                 <GHC.Exception.Exception e>_R
                 ->_R <e>_R
                 ->_R Trans
                          (<Yesod.Core.Types.HandlerData
                              Main.Eco (Yesod.Core.Types.MonadRoute GHC.Types.IO)>_R
                           ->_R Sym (GHC.Types.NTCo:IO[0] <a66>_R))
                          (Sym (Yesod.Core.Types.NTCo:HandlerT[0]
                                    <Main.Eco>_N <GHC.Types.IO>_N <a66>_N))) -}
9ed68c590bfb4a360c17171a08409561
  $fYesodEco_ds ::
    Yesod.Core.Types.HandlerT
      Main.Eco GHC.Types.IO Network.Wai.Internal.Request
  {- Unfolding: (Yesod.Core.Handler.waiRequest
                   @ (Yesod.Core.Types.HandlerT Main.Eco GHC.Types.IO)
                   Main.$fYesodEco_$s$fMonadHandlerHandlerT) -}
e01c99a94ec49083d62b6331c55ae3ad
  $w$ccleanPath ::
    [Data.Text.Internal.Text]
    -> Data.Either.Either
         [Data.Text.Internal.Text] [Data.Text.Internal.Text]
  {- Arity: 1, Strictness: <S,U>, Inline: [0],
     Unfolding: (\ w :: [Data.Text.Internal.Text] ->
                 let {
                   corrected :: [Data.Text.Internal.Text]
                   = GHC.List.filter @ Data.Text.Internal.Text Main.$fYesodEco16 w
                 } in
                 case GHC.Classes.$fEq[]_$c==
                        @ Data.Text.Internal.Text
                        Data.Text.$fEqText
                        corrected
                        w of wild {
                   GHC.Types.False
                   -> Data.Either.Left
                        @ [Data.Text.Internal.Text]
                        @ [Data.Text.Internal.Text]
                        corrected
                   GHC.Types.True
                   -> Data.Either.Right
                        @ [Data.Text.Internal.Text]
                        @ [Data.Text.Internal.Text]
                        (GHC.Base.map
                           @ Data.Text.Internal.Text
                           @ Data.Text.Internal.Text
                           Main.$fYesodEco14
                           w) }) -}
422d78bd74d9ed01d79a0416a660c71b
  $w$cfileUpload ::
    Network.Wai.Internal.RequestBodyLength
    -> Yesod.Core.Types.FileUpload
  {- Arity: 1, Strictness: <S,1*U>, Inline: [0],
     Unfolding: (\ w :: Network.Wai.Internal.RequestBodyLength ->
                 case w of wild {
                   Network.Wai.Internal.ChunkedBody -> Main.$fYesodEco5
                   Network.Wai.Internal.KnownLength size
                   -> case size of wild1 { GHC.Word.W64# a66 ->
                      case GHC.Prim.tagToEnum#
                             @ GHC.Types.Bool
                             (GHC.Prim.leWord# a66 __word 50000) of wild2 {
                        GHC.Types.False -> Main.$fYesodEco5
                        GHC.Types.True -> Main.$fYesodEco3 } } }) -}
2bd5d5ee1c9ff4519b97e62cbd0ed0eb
  $w$cjoinPath ::
    Data.Text.Internal.Text
    -> [Data.Text.Internal.Text]
    -> [(Data.Text.Internal.Text, Data.Text.Internal.Text)]
    -> Data.ByteString.Builder.Internal.Builder
  {- Arity: 3, Strictness: <L,1*U(U,U,U)><L,1*U><L,1*U>, Inline: [0],
     Unfolding: (\ w :: Data.Text.Internal.Text
                   w1 :: [Data.Text.Internal.Text]
                   w2 :: [(Data.Text.Internal.Text, Data.Text.Internal.Text)] ->
                 let {
                   a66 :: [GHC.Types.Char]
                   = case w of wild { Data.Text.Internal.Text dt dt1 dt2 ->
                     let {
                       a67 :: GHC.Prim.Int# = GHC.Prim.+# dt1 dt2
                     } in
                     letrec {
                       $wunfold :: GHC.Prim.Int# -> [GHC.Types.Char]
                         {- Arity: 1, Strictness: <L,U>, Inline: [0] -}
                       = \ ww :: GHC.Prim.Int# ->
                         case GHC.Prim.tagToEnum#
                                @ GHC.Types.Bool
                                (GHC.Prim.>=# ww a67) of wild1 {
                           GHC.Types.False
                           -> case GHC.Prim.indexWord16Array# dt ww of r# { DEFAULT ->
                              case GHC.Prim.tagToEnum#
                                     @ GHC.Types.Bool
                                     (GHC.Prim.geWord# r# __word 55296) of wild2 {
                                GHC.Types.False
                                -> GHC.Types.:
                                     @ GHC.Types.Char
                                     (GHC.Types.C# (GHC.Prim.chr# (GHC.Prim.word2Int# r#)))
                                     ($wunfold (GHC.Prim.+# ww 1))
                                GHC.Types.True
                                -> case GHC.Prim.tagToEnum#
                                          @ GHC.Types.Bool
                                          (GHC.Prim.leWord# r# __word 56319) of wild3 {
                                     GHC.Types.False
                                     -> GHC.Types.:
                                          @ GHC.Types.Char
                                          (GHC.Types.C# (GHC.Prim.chr# (GHC.Prim.word2Int# r#)))
                                          ($wunfold (GHC.Prim.+# ww 1))
                                     GHC.Types.True
                                     -> case GHC.Prim.indexWord16Array#
                                               dt
                                               (GHC.Prim.+# ww 1) of r#1 { DEFAULT ->
                                        GHC.Types.:
                                          @ GHC.Types.Char
                                          (GHC.Types.C#
                                             (GHC.Prim.chr#
                                                (GHC.Prim.+#
                                                   (GHC.Prim.+#
                                                      (GHC.Prim.uncheckedIShiftL#
                                                         (GHC.Prim.-# (GHC.Prim.word2Int# r#) 55296)
                                                         10)
                                                      (GHC.Prim.-# (GHC.Prim.word2Int# r#1) 56320))
                                                   65536)))
                                          ($wunfold (GHC.Prim.+# ww 2)) } } } }
                           GHC.Types.True -> GHC.Types.[] @ GHC.Types.Char }
                     } in
                     $wunfold dt1 }
                 } in
                 let {
                   ds1 :: Data.ByteString.Builder.Internal.Builder
                   = case GHC.Base.map
                            @ (Data.Text.Internal.Text, Data.Text.Internal.Text)
                            @ (Data.ByteString.Internal.ByteString,
                               GHC.Base.Maybe Data.ByteString.Internal.ByteString)
                            Main.$fYesodEco13
                            w2 of wild {
                       []
                       -> case w1 of wild1 {
                            [] -> Network.HTTP.Types.URI.encodePathSegments Main.$fYesodEco12
                            : ds2 ds3
                            -> Network.HTTP.Types.URI.encodePathSegments
                                 (GHC.Base.map
                                    @ Data.Text.Internal.Text
                                    @ Data.Text.Internal.Text
                                    Main.$fYesodEco11
                                    wild1) }
                       : ipv ipv1
                       -> let {
                            ds2 :: Data.ByteString.Builder.Internal.Builder
                            = case w1 of wild1 {
                                [] -> Network.HTTP.Types.URI.encodePathSegments Main.$fYesodEco12
                                : ds3 ds4
                                -> Network.HTTP.Types.URI.encodePathSegments
                                     (GHC.Base.map
                                        @ Data.Text.Internal.Text
                                        @ Data.Text.Internal.Text
                                        Main.$fYesodEco11
                                        wild1) }
                          } in
                          let {
                            ds3 :: Data.ByteString.Builder.Internal.Builder
                            = case ipv of ww { (,) ww1 ww2 ->
                              Network.HTTP.Types.URI.$wgo
                                Network.HTTP.Types.URI.encodePath1
                                  `cast`
                                (Sym (Data.ByteString.Builder.Internal.NTCo:Builder[0]))
                                ww1
                                ww2 }
                          } in
                          let {
                            ds4 :: Data.ByteString.Builder.Internal.Builder
                            = Network.HTTP.Types.URI.encodePath_go ipv1
                          } in
                          (\ @ r eta :: Data.ByteString.Builder.Internal.BuildStep r ->
                           ds2 `cast` (Data.ByteString.Builder.Internal.NTCo:Builder[0])
                             @ r
                             (ds3 `cast` (Data.ByteString.Builder.Internal.NTCo:Builder[0])
                                @ r
                                (ds4 `cast` (Data.ByteString.Builder.Internal.NTCo:Builder[0])
                                   @ r
                                   eta)))
                            `cast`
                          (Sym (Data.ByteString.Builder.Internal.NTCo:Builder[0])) }
                 } in
                 (\ @ r eta :: Data.ByteString.Builder.Internal.BuildStep r ->
                  let {
                    w3 :: Data.ByteString.Builder.Internal.BufferRange
                          -> GHC.Types.IO (Data.ByteString.Builder.Internal.BuildSignal r)
                    = ds1 `cast` (Data.ByteString.Builder.Internal.NTCo:Builder[0])
                        @ r
                        eta
                  } in
                  \ w4 :: Data.ByteString.Builder.Internal.BufferRange
                    w5 :: GHC.Prim.State# GHC.Prim.RealWorld[OneShot] ->
                  case w4 of ww { Data.ByteString.Builder.Internal.BufferRange ww1 ww2 ->
                  Main.$wa3 @ r a66 w3 ww1 ww2 w5 })
                   `cast`
                 (Trans
                      (forall r.
                       <Data.ByteString.Builder.Internal.BuildStep r>_R
                       ->_R <Data.ByteString.Builder.Internal.BufferRange>_R
                       ->_R Sym (GHC.Types.NTCo:IO[0]
                                     <Data.ByteString.Builder.Internal.BuildSignal r>_R))
                      (Sym (Data.ByteString.Builder.Internal.NTCo:Builder[0])))) -}
9ed68c590bfb4a360c17171a08409561
  $w$cparseRoute ::
    [Data.Text.Internal.Text]
    -> GHC.Base.Maybe (Yesod.Routes.Class.Route Main.Eco)
  {- Arity: 1, Strictness: <S,1*U>, Inline: [0],
     Unfolding: (\ ww :: [Data.Text.Internal.Text] ->
                 case ww of wild {
                   [] -> Main.$fParseRouteEco3
                   : ds ds1
                   -> case ds of wild1 { Data.Text.Internal.Text dt dt1 dt2 ->
                      case Main.$fParseRouteEco2 of wild2 { Data.Text.Internal.Text dt3 dt4 dt5 ->
                      case GHC.Prim.tagToEnum#
                             @ GHC.Types.Bool
                             (GHC.Prim.==# dt2 dt5) of wild3 {
                        GHC.Types.False
                        -> GHC.Base.Nothing @ (Yesod.Routes.Class.Route Main.Eco)
                        GHC.Types.True
                        -> case {__pkg_ccall text-1.2.1.3@text_1l1AN4I48k37RaQ6fm6CEh _hs_text_memcmp GHC.Prim.ByteArray#
                                                                                                      -> GHC.Prim.Word#
                                                                                                      -> GHC.Prim.ByteArray#
                                                                                                      -> GHC.Prim.Word#
                                                                                                      -> GHC.Prim.Word#
                                                                                                      -> GHC.Prim.State#
                                                                                                           GHC.Prim.RealWorld
                                                                                                      -> (# GHC.Prim.State#
                                                                                                              GHC.Prim.RealWorld,
                                                                                                            GHC.Prim.Int# #)}
                                  dt
                                  (GHC.Prim.int2Word# dt1)
                                  dt3
                                  (GHC.Prim.int2Word# dt4)
                                  (GHC.Prim.int2Word# dt2)
                                  GHC.Prim.realWorld# of wild4 { (#,#) ds11 ds12 ->
                           case GHC.Prim.narrow32Int# ds12 of wild5 {
                             DEFAULT -> GHC.Base.Nothing @ (Yesod.Routes.Class.Route Main.Eco)
                             0
                             -> case ds1 of wild6 {
                                  [] -> Main.$fParseRouteEco1
                                  : ds2 ds3
                                  -> case ds3 of wild7 {
                                       []
                                       -> GHC.Base.Just
                                            @ (Yesod.Routes.Class.Route Main.Eco)
                                            (Main.MensagemR ds2)
                                              `cast`
                                            (Sub (Sym (Main.TFCo:R:RouteEco[0])))
                                       : ipv ipv1
                                       -> GHC.Base.Nothing
                                            @ (Yesod.Routes.Class.Route
                                                 Main.Eco) } } } } } } } }) -}
4762c6f41ecd606903543dfbeda646c6
  $w$cshowsPrec ::
    GHC.Prim.Int#
    -> Data.Text.Internal.Text -> GHC.Base.String -> GHC.Base.String
  {- Arity: 3, Strictness: <L,U><L,1*U(U,U,U)><L,U>, Inline: [0],
     Unfolding: (\ ww :: GHC.Prim.Int#
                   ww1 :: Data.Text.Internal.Text
                   w :: GHC.Base.String ->
                 case GHC.Prim.tagToEnum#
                        @ GHC.Types.Bool
                        (GHC.Prim.>=# ww 11) of wild {
                   GHC.Types.False
                   -> GHC.Base.++
                        @ GHC.Types.Char
                        Main.$fShowMensagem2
                        (case Data.Text.Show.$w$cshowsPrec ww1 w of ww2 { (#,#) ww3 ww4 ->
                         GHC.Types.: @ GHC.Types.Char ww3 ww4 })
                   GHC.Types.True
                   -> GHC.Types.:
                        @ GHC.Types.Char
                        GHC.Show.shows9
                        (GHC.Base.++
                           @ GHC.Types.Char
                           Main.$fShowMensagem2
                           (case Data.Text.Show.$w$cshowsPrec
                                   ww1
                                   (GHC.Types.:
                                      @ GHC.Types.Char
                                      GHC.Show.shows8
                                      w) of ww2 { (#,#) ww3 ww4 ->
                            GHC.Types.: @ GHC.Types.Char ww3 ww4 })) }) -}
9ed68c590bfb4a360c17171a08409561
  $w$cyesodDispatch ::
    Yesod.Core.Types.YesodRunnerEnv Main.Eco
    -> Network.HTTP.Types.Method.Method
    -> Network.HTTP.Types.Version.HttpVersion
    -> Data.ByteString.Internal.ByteString
    -> Data.ByteString.Internal.ByteString
    -> Network.HTTP.Types.Header.RequestHeaders
    -> GHC.Types.Bool
    -> Network.Socket.Types.SockAddr
    -> [Data.Text.Internal.Text]
    -> Network.HTTP.Types.URI.Query
    -> GHC.Types.IO Data.ByteString.Internal.ByteString
    -> Data.Vault.Lazy.Vault
    -> Network.Wai.Internal.RequestBodyLength
    -> GHC.Base.Maybe Data.ByteString.Internal.ByteString
    -> GHC.Base.Maybe Data.ByteString.Internal.ByteString
    -> (Network.Wai.Internal.Response
        -> GHC.Types.IO Network.Wai.Internal.ResponseReceived)
    -> GHC.Types.IO Network.Wai.Internal.ResponseReceived
  {- Arity: 15,
     Strictness: <L,U(U,U,U,U,C(U(U,1*U(U,U,U))))><L,U(U,U,U,U)><L,U><L,U><L,U><L,U><L,U><L,U><S,U><L,U><L,U><L,U><L,U><L,U><L,U>,
     Inline: [0] -}
d5f4fae27a3ad563dd26e5606b95ec25
  $w$sgo5 ::
    GHC.Prim.ByteArray#
    -> GHC.Prim.Int#
    -> GHC.Prim.Int#
    -> Data.Set.Base.Set Data.Text.Internal.Text
    -> Data.Set.Base.Set Data.Text.Internal.Text
  {- Arity: 4, Strictness: <L,U><L,U><L,U><S,1*U>, Inline: [0] -}
9ed68c590bfb4a360c17171a08409561
  $wa ::
    Yesod.Core.Types.HandlerT Main.Eco GHC.Types.IO res
    -> Yesod.Core.Types.YesodRequest
    -> Yesod.Core.Types.RunHandlerEnv Main.Eco
    -> GHC.Prim.MutVar# GHC.Prim.RealWorld Yesod.Core.Types.GHState
    -> (Yesod.Routes.Class.Route Main.Eco
        -> Yesod.Core.Types.MonadRoute GHC.Types.IO)
    -> GHC.Prim.MutVar#
         GHC.Prim.RealWorld Control.Monad.Trans.Resource.Internal.ReleaseMap
    -> GHC.Prim.State# GHC.Prim.RealWorld
    -> (# GHC.Prim.State# GHC.Prim.RealWorld, res #)
  {- Arity: 7,
     Strictness: <L,1*C1(C1(U(U,U)))><S,U><S,U><L,U><S,U><L,U><L,U>,
     Inline: [0] -}
150def175a14e2d0ffd33ccada7c9959
  $wa1 ::
    GHC.Prim.State# GHC.Prim.RealWorld
    -> (# GHC.Prim.State# GHC.Prim.RealWorld,
          GHC.Base.Maybe Yesod.Core.Types.SessionBackend #)
  {- Arity: 1, Strictness: <L,U>, Inline: [0],
     Unfolding: (\ w :: GHC.Prim.State# GHC.Prim.RealWorld[OneShot] ->
                 case Web.ClientSession.getDefaultKey2
                        Web.ClientSession.defaultKeyFile
                        w of ds1 { (#,#) ipv ipv1 ->
                 case Yesod.Core.Internal.Session.clientSessionDateCacher1
                        Main.$fYesodEco7
                          `cast`
                        (Trans
                             (Sym (Data.Fixed.NTCo:Fixed[0] <Data.Fixed.E12>_P))
                             (Sym (Data.Time.Clock.UTC.NTCo:NominalDiffTime[0])))
                        ipv of ds2 { (#,#) ipv2 ipv3 ->
                 case ipv3 of wild { (,) getCachedDate _closeDateCacher ->
                 (# ipv2,
                    GHC.Base.Just
                      @ Yesod.Core.Types.SessionBackend
                      (Yesod.Core.Class.Yesod.defaultClientSessionBackend3
                         ipv1
                         getCachedDate
                         Yesod.Core.Class.Yesod.defaultClientSessionBackend2)
                        `cast`
                      (Trans
                           (<Network.Wai.Internal.Request>_R
                            ->_R Sym (GHC.Types.NTCo:IO[0]
                                          <(Data.Map.Base.Map
                                              Data.Text.Internal.Text
                                              Data.ByteString.Internal.ByteString,
                                            Yesod.Core.Types.SessionMap
                                            -> GHC.Types.IO [Yesod.Core.Types.Header])>_R))
                           (Sym (Yesod.Core.Types.NTCo:SessionBackend[0]))) #) } } }) -}
e419c5ec81db7250fcb44bab3be71b07
  $wa2 ::
    Yesod.Core.Types.Logger
    -> Language.Haskell.TH.Syntax.Loc
    -> Control.Monad.Logger.LogSource
    -> Control.Monad.Logger.LogLevel
    -> System.Log.FastLogger.LogStr.LogStr
    -> GHC.Prim.State# GHC.Prim.RealWorld
    -> (# GHC.Prim.State# GHC.Prim.RealWorld, () #)
  {- Arity: 6,
     Strictness: <L,U(U(A,1*U(U),1*U(U(U),U(U),A,U),1*C1(U(U,U))),U)><L,1*U(1*U,U,1*U,1*U(1*U(U),1*U(U)),A)><L,1*U(U,U,U)><S,U><L,1*U(U,C(U))><L,U>,
     Inline: [0],
     Unfolding: (\ w :: Yesod.Core.Types.Logger
                   w1 :: Language.Haskell.TH.Syntax.Loc
                   w2 :: Control.Monad.Logger.LogSource
                   w3 :: Control.Monad.Logger.LogLevel
                   w4 :: System.Log.FastLogger.LogStr.LogStr
                   w5 :: GHC.Prim.State# GHC.Prim.RealWorld[OneShot] ->
                 let {
                   $j :: GHC.Prim.Void#
                         -> (# GHC.Prim.State# GHC.Prim.RealWorld, () #)
                     {- Arity: 1, Strictness: <L,A> -}
                   = \ w6 :: GHC.Prim.Void#[OneShot] ->
                     case Yesod.Core.Class.Yesod.defaultMessageLoggerSource2
                            (Yesod.Core.Types.loggerDate w)
                            w1
                            w2
                            w3
                            w4
                            w5 of ds2 { (#,#) ipv2 ipv3 ->
                     Yesod.Core.Types.loggerPutStr1 w ipv3 ipv2 }
                 } in
                 case w3 of wild {
                   Control.Monad.Logger.LevelDebug -> (# w5, GHC.Tuple.() #)
                   Control.Monad.Logger.LevelInfo -> $j GHC.Prim.void#
                   Control.Monad.Logger.LevelWarn -> $j GHC.Prim.void#
                   Control.Monad.Logger.LevelError -> $j GHC.Prim.void#
                   Control.Monad.Logger.LevelOther a123 -> $j GHC.Prim.void# }) -}
0f03fb76866542df3b268cfa57277b5d
  $wa3 ::
    [GHC.Types.Char]
    -> (Data.ByteString.Builder.Internal.BufferRange
        -> GHC.Types.IO (Data.ByteString.Builder.Internal.BuildSignal r))
    -> GHC.Prim.Addr#
    -> GHC.Prim.Addr#
    -> GHC.Prim.State# GHC.Prim.RealWorld
    -> (# GHC.Prim.State# GHC.Prim.RealWorld,
          Data.ByteString.Builder.Internal.BuildSignal r #)
  {- Arity: 5, HasNoCafRefs,
     Strictness: <S,1*U><L,C(C1(U(U,U)))><L,U><L,U><L,U>, Inline: [0] -}
9ed68c590bfb4a360c17171a08409561
  data Eco = Eco
    Promotable
43cb969e3bb5d2d1164104d35b17a06d
  type Handler = Yesod.Core.Types.HandlerT Main.Eco GHC.Types.IO
bf7ba837cb81bd8e31281f1f62d2028d
  data Mensagem = Mensagem Data.Text.Internal.Text
9ed68c590bfb4a360c17171a08409561
  data instance Yesod.Routes.Class.Route Main.Eco
    = HomeR | MensagemR Data.Text.Internal.Text | MensagemVazia
    RecFlag: Recursive
9ed68c590bfb4a360c17171a08409561
  axiom TFCo:R:RouteEco::
      Yesod.Routes.Class.Route Main.Eco = Main.R:RouteEco
16aaad222180b3a6f55571dc8497304b
  type Widget = Yesod.Core.Types.WidgetT Main.Eco GHC.Types.IO ()
0ad38b4f0f8d17fee6357d9454e442c8
  main :: GHC.Types.IO ()
  {- Arity: 1,
     Unfolding: InlineRule (0, True, True)
                Main.main1 `cast` (Sym (GHC.Types.NTCo:IO[0] <()>_R)) -}
368c0d1f5117fe15f88bc37a0c1cc660
  main1 ::
    GHC.Prim.State# GHC.Prim.RealWorld
    -> (# GHC.Prim.State# GHC.Prim.RealWorld, () #)
  {- Arity: 1,
     Unfolding: (Yesod.Core.Dispatch.warp1
                   @ Main.Eco
                   Main.$fYesodDispatchEco
                   Main.main2
                   Main.Eco) -}
c570853c265a1948cbf6d47b1d90bd6a
  main2 :: GHC.Types.Int
  {- HasNoCafRefs, Strictness: m, Unfolding: (GHC.Types.I# 3000) -}
1c22699ed5c34096a3af81908496d951
  main3 ::
    GHC.Prim.State# GHC.Prim.RealWorld
    -> (# GHC.Prim.State# GHC.Prim.RealWorld, () #)
  {- Arity: 1,
     Unfolding: (GHC.TopHandler.runMainIO1
                   @ ()
                   Main.main1 `cast` (Sym (GHC.Types.NTCo:IO[0] <()>_R))) -}
instance GHC.Classes.Eq [Yesod.Routes.Class.Route] = Main.$fEqRoute
instance Yesod.Routes.Class.ParseRoute [Main.Eco]
  = Main.$fParseRouteEco
instance GHC.Read.Read [Yesod.Routes.Class.Route]
  = Main.$fReadRoute
instance Yesod.Routes.Class.RenderRoute [Main.Eco]
  = Main.$fRenderRouteEco
instance Yesod.Routes.Class.RouteAttrs [Main.Eco]
  = Main.$fRouteAttrsEco
instance GHC.Show.Show [Main.Mensagem] = Main.$fShowMensagem
instance GHC.Show.Show [Yesod.Routes.Class.Route]
  = Main.$fShowRoute
instance Yesod.Core.Class.Dispatch.YesodDispatch [Main.Eco]
  = Main.$fYesodDispatchEco
instance Yesod.Core.Class.Yesod.Yesod [Main.Eco] = Main.$fYesodEco
family instance Yesod.Routes.Class.Route [Main.Eco]
  = Main.TFCo:R:RouteEco
"SPEC/Main $dmapproot @ Eco" [ALWAYS] forall $dYesod :: Yesod.Core.Class.Yesod.Yesod
                                                          Main.Eco
  Yesod.Core.Class.Yesod.$dmapproot @ Main.Eco $dYesod
  = Main.$fYesodEco_$s$dmapproot
"SPEC/Main $dmauthRoute @ Eco" [ALWAYS] forall $dYesod :: Yesod.Core.Class.Yesod.Yesod
                                                            Main.Eco
  Yesod.Core.Class.Yesod.$dmauthRoute @ Main.Eco $dYesod
  = Main.$fYesodEco_$s$dmauthRoute
"SPEC/Main $dmjsLoader @ Eco" [ALWAYS] forall $dYesod :: Yesod.Core.Class.Yesod.Yesod
                                                           Main.Eco
  Yesod.Core.Class.Yesod.$dmjsLoader @ Main.Eco $dYesod
  = Main.$fYesodEco_$s$dmjsLoader
"SPEC/Main $dmmaximumContentLength @ Eco" [ALWAYS] forall $dYesod :: Yesod.Core.Class.Yesod.Yesod
                                                                       Main.Eco
  Yesod.Core.Class.Yesod.$dmmaximumContentLength @ Main.Eco $dYesod
  = Main.$fYesodEco_$s$dmmaximumContentLength
"SPEC/Main $dmreadsPrec @ (Route Eco)" [ALWAYS] forall $dRead :: GHC.Read.Read
                                                                   (Yesod.Routes.Class.Route
                                                                      Main.Eco)
  GHC.Read.$dmreadsPrec @ (Yesod.Routes.Class.Route Main.Eco) $dRead
  = Main.$fReadRoute_$s$dmreadsPrec
"SPEC/Main $dmshouldLog @ Eco" [ALWAYS] forall $dYesod :: Yesod.Core.Class.Yesod.Yesod
                                                            Main.Eco
  Yesod.Core.Class.Yesod.$dmshouldLog @ Main.Eco $dYesod
  = Main.$fYesodEco_$s$dmshouldLog
"SPEC/Main $dmurlRenderOverride @ Eco" [ALWAYS] forall $dYesod :: Yesod.Core.Class.Yesod.Yesod
                                                                    Main.Eco
  Yesod.Core.Class.Yesod.$dmurlRenderOverride @ Main.Eco $dYesod
  = Main.$fYesodEco_$s$dmurlRenderOverride
"SPEC/Main $fApplicativeHandlerT @ Eco @ IO" [ALWAYS] forall $dFunctor :: GHC.Base.Functor
                                                                            (Yesod.Core.Types.HandlerT
                                                                               Main.Eco
                                                                               GHC.Types.IO)
                                                             $dMonad :: GHC.Base.Monad GHC.Types.IO
  Yesod.Core.Types.$fApplicativeHandlerT @ Main.Eco
                                         @ GHC.Types.IO
                                         $dFunctor
                                         $dMonad
  = Main.$fYesodEco_$s$fApplicativeHandlerT
"SPEC/Main $fApplicativeHandlerT_$cpure @ Eco @ IO" [ALWAYS] forall $dFunctor :: GHC.Base.Functor
                                                                                   (Yesod.Core.Types.HandlerT
                                                                                      Main.Eco
                                                                                      GHC.Types.IO)
                                                                    $dMonad :: GHC.Base.Monad
                                                                                 GHC.Types.IO
  Yesod.Core.Types.$fApplicativeHandlerT_$cpure @ Main.Eco
                                                @ GHC.Types.IO
                                                $dFunctor
                                                $dMonad
  = Main.$fYesodEco_$s$fApplicativeHandlerT_$cpure
"SPEC/Main $fMonadBasebHandlerT @ IO @ Eco @ IO" [ALWAYS] forall $dApplicative :: GHC.Base.Applicative
                                                                                    GHC.Types.IO
                                                                 $dApplicative1 :: GHC.Base.Applicative
                                                                                     (Yesod.Core.Types.HandlerT
                                                                                        Main.Eco
                                                                                        GHC.Types.IO)
                                                                 $dMonad :: GHC.Base.Monad
                                                                              GHC.Types.IO
                                                                 $dMonad1 :: GHC.Base.Monad
                                                                               (Yesod.Core.Types.HandlerT
                                                                                  Main.Eco
                                                                                  GHC.Types.IO)
                                                                 $dMonadBase :: Control.Monad.Base.MonadBase
                                                                                  GHC.Types.IO
                                                                                  GHC.Types.IO
  Yesod.Core.Types.$fMonadBasebHandlerT @ GHC.Types.IO
                                        @ Main.Eco
                                        @ GHC.Types.IO
                                        $dApplicative
                                        $dApplicative1
                                        $dMonad
                                        $dMonad1
                                        $dMonadBase
  = Main.$fYesodEco_$s$fMonadBasebHandlerT
"SPEC/Main $fMonadBasebHandlerT_$cliftBase @ IO @ Eco @ IO" [ALWAYS] forall $dApplicative :: GHC.Base.Applicative
                                                                                               GHC.Types.IO
                                                                            $dApplicative1 :: GHC.Base.Applicative
                                                                                                (Yesod.Core.Types.HandlerT
                                                                                                   Main.Eco
                                                                                                   GHC.Types.IO)
                                                                            $dMonad :: GHC.Base.Monad
                                                                                         GHC.Types.IO
                                                                            $dMonad1 :: GHC.Base.Monad
                                                                                          (Yesod.Core.Types.HandlerT
                                                                                             Main.Eco
                                                                                             GHC.Types.IO)
                                                                            $dMonadBase :: Control.Monad.Base.MonadBase
                                                                                             GHC.Types.IO
                                                                                             GHC.Types.IO
  Yesod.Core.Types.$fMonadBasebHandlerT_$cliftBase @ GHC.Types.IO
                                                   @ Main.Eco
                                                   @ GHC.Types.IO
                                                   $dApplicative
                                                   $dApplicative1
                                                   $dMonad
                                                   $dMonad1
                                                   $dMonadBase
  = Main.$fYesodEco_$s$fMonadBasebHandlerT_$cliftBase
"SPEC/Main $fMonadHandlerHandlerT @ Eco @ IO" [ALWAYS] forall $dMonadResource :: Control.Monad.Trans.Resource.Internal.MonadResource
                                                                                   (Yesod.Core.Types.HandlerT
                                                                                      Main.Eco
                                                                                      GHC.Types.IO)
                                                              tup :: Control.Monad.Trans.Resource.MonadResourceBase
                                                                       GHC.Types.IO
  Yesod.Core.Class.Handler.$fMonadHandlerHandlerT @ Main.Eco
                                                  @ GHC.Types.IO
                                                  $dMonadResource
                                                  tup
  = Main.$fYesodEco_$s$fMonadHandlerHandlerT
"SPEC/Main $fMonadHandlerT @ Eco @ IO" [ALWAYS] forall $dApplicative :: GHC.Base.Applicative
                                                                          (Yesod.Core.Types.HandlerT
                                                                             Main.Eco GHC.Types.IO)
                                                       $dMonad :: GHC.Base.Monad GHC.Types.IO
  Yesod.Core.Types.$fMonadHandlerT @ Main.Eco
                                   @ GHC.Types.IO
                                   $dApplicative
                                   $dMonad
  = Main.$fYesodEco_$s$fMonadHandlerT
"SPEC/Main $fMonadIOHandlerT @ Eco @ IO" [ALWAYS] forall $dMonad :: GHC.Base.Monad
                                                                      (Yesod.Core.Types.HandlerT
                                                                         Main.Eco GHC.Types.IO)
                                                         $dMonadIO :: Control.Monad.IO.Class.MonadIO
                                                                        GHC.Types.IO
  Yesod.Core.Types.$fMonadIOHandlerT @ Main.Eco
                                     @ GHC.Types.IO
                                     $dMonad
                                     $dMonadIO
  = Main.$fYesodEco_$s$fMonadIOHandlerT
"SPEC/Main $fMonadResourceHandlerT @ Eco @ IO" [ALWAYS] forall $dMonadThrow :: Control.Monad.Catch.MonadThrow
                                                                                 (Yesod.Core.Types.HandlerT
                                                                                    Main.Eco
                                                                                    GHC.Types.IO)
                                                               $dMonadIO :: Control.Monad.IO.Class.MonadIO
                                                                              (Yesod.Core.Types.HandlerT
                                                                                 Main.Eco
                                                                                 GHC.Types.IO)
                                                               $dApplicative :: GHC.Base.Applicative
                                                                                  (Yesod.Core.Types.HandlerT
                                                                                     Main.Eco
                                                                                     GHC.Types.IO)
                                                               $dMonadBase :: Control.Monad.Base.MonadBase
                                                                                GHC.Types.IO
                                                                                (Yesod.Core.Types.HandlerT
                                                                                   Main.Eco
                                                                                   GHC.Types.IO)
                                                               $dMonadIO1 :: Control.Monad.IO.Class.MonadIO
                                                                               GHC.Types.IO
                                                               $dMonadBase1 :: Control.Monad.Base.MonadBase
                                                                                 GHC.Types.IO
                                                                                 GHC.Types.IO
                                                               $dMonadThrow1 :: Control.Monad.Catch.MonadThrow
                                                                                  GHC.Types.IO
  Yesod.Core.Types.$fMonadResourceHandlerT @ Main.Eco
                                           @ GHC.Types.IO
                                           $dMonadThrow
                                           $dMonadIO
                                           $dApplicative
                                           $dMonadBase
                                           $dMonadIO1
                                           $dMonadBase1
                                           $dMonadThrow1
  = Main.$fYesodEco_$s$fMonadResourceHandlerT
"SPEC/Main $fMonadThrowHandlerT @ Eco @ IO" [ALWAYS] forall $dMonad :: GHC.Base.Monad
                                                                         (Yesod.Core.Types.HandlerT
                                                                            Main.Eco GHC.Types.IO)
                                                            $dMonadThrow :: Control.Monad.Catch.MonadThrow
                                                                              GHC.Types.IO
  Yesod.Core.Types.$fMonadThrowHandlerT @ Main.Eco
                                        @ GHC.Types.IO
                                        $dMonad
                                        $dMonadThrow
  = Main.$fYesodEco_$s$fMonadThrowHandlerT
"SPEC/Main $fMonadThrowHandlerT_$cthrowM @ Eco @ IO" [ALWAYS] forall $dMonad :: GHC.Base.Monad
                                                                                  (Yesod.Core.Types.HandlerT
                                                                                     Main.Eco
                                                                                     GHC.Types.IO)
                                                                     $dMonadThrow :: Control.Monad.Catch.MonadThrow
                                                                                       GHC.Types.IO
  Yesod.Core.Types.$fMonadThrowHandlerT_$cthrowM @ Main.Eco
                                                 @ GHC.Types.IO
                                                 $dMonad
                                                 $dMonadThrow
  = Main.$fYesodEco_$s$fMonadThrowHandlerT_$cthrowM
"SPEC/Main fromList @ Text" [ALWAYS] forall $dOrd :: GHC.Classes.Ord
                                                       Data.Text.Internal.Text
  Data.Set.Base.fromList @ Data.Text.Internal.Text $dOrd
  = Main.$fRouteAttrsEco_$sfromList
"SPEC/Main readListDefault @ (Route Eco)" [ALWAYS] forall $dRead :: GHC.Read.Read
                                                                      (Yesod.Routes.Class.Route
                                                                         Main.Eco)
  GHC.Read.readListDefault @ (Yesod.Routes.Class.Route Main.Eco)
                           $dRead
  = Main.$fReadRoute_$sreadListDefault
"SPEC/Main toWidget @ Eco @ Markup" [ALWAYS] forall tpl :: Yesod.Core.Widget.ToWidget
                                                             Main.Eco Text.Blaze.Internal.Markup
  Yesod.Core.Widget.toWidget @ Main.Eco
                             @ (Text.Blaze.Internal.MarkupM ())
                             tpl
  = Yesod.Core.Widget.$fToWidgetBodysiteMarkupM_$ctoWidget @ Main.Eco
vectorised variables:
vectorised tycons:
vectorised reused tycons:
parallel variables:
parallel tycons:
trusted: none
require own pkg trusted: False

